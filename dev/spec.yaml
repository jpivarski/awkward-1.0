Kernels:
  - name: awkward_new_Identities
    specializations:
    - name: awkward_new_Identities64
      args:
        - toptr: List[int64_t]
        - length: int64_t
    - name: awkward_new_Identities32
      args:
        - toptr: List[int32_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_new_Identities(toptr, length):
          for i in range(length):
              toptr[i] = i


  - name: awkward_Identities32_to_Identities64
    args:
      - toptr: List[int64_t]
      - fromptr: List[int32_t]
      - length: int64_t
      - width: int64_t
    fail: False
    specification: |
      def awkward_Identities32_to_Identities64(toptr, fromptr, length, width):
          for i in range(length * width):
              toptr[i] = int(fromptr[i])


  - name: awkward_Identities_from_ListOffsetArray
    specializations:
    - name: awkward_Identities64_from_ListOffsetArray64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromoffsets: List[int64_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListOffsetArrayU32
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromoffsets: List[uint32_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_ListOffsetArrayU32
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromoffsets: List[uint32_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_ListOffsetArray32
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromoffsets: List[int32_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListOffsetArray64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromoffsets: List[int64_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListOffsetArray32
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromoffsets: List[int32_t]
        - fromptroffset: int64_t
        - offsetsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    fail: False
    specification: |
      def awkward_Identities_from_ListOffsetArray(
          toptr,
          fromptr,
          fromoffsets,
          fromptroffset,
          offsetsoffset,
          tolength,
          fromlength,
          fromwidth,
      ):
          globalstart = fromoffsets[offsetsoffset]
          globalstop = fromoffsets[offsetsoffset + fromlength]
          for k in range(globalstart * (fromwidth + 1)):
              toptr[k] = -1
          k = globalstop * (fromwidth + 1)
          while k < (tolength * (fromwidth + 1)):
              toptr[k] = -1
              k = k + 1
          for i in range(fromlength):
              start = fromoffsets[offsetsoffset + i]
              stop = fromoffsets[(offsetsoffset + i) + 1]
              if (start != stop) and (stop > tolength):
                  raise ValueError("max(stop) > len(content)")
              for j in range(start, stop):
                  for k in range(fromwidth):
                      toptr[(j * (fromwidth + 1)) + k] = fromptr[
                          (fromptroffset + (i * fromwidth)) + k
                      ]
                  toptr[(j * (fromwidth + 1)) + fromwidth] = float(j - start)


  - name: awkward_Identities_from_ListArray
    specializations:
    - name: awkward_Identities64_from_ListArray64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_ListArrayU32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListArray32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListArray64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_ListArrayU32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_ListArray32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - fromptroffset: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    fail: False
    specification: |
      def awkward_Identities_from_ListArray(
          uniquecontents,
          toptr,
          fromptr,
          fromstarts,
          fromstops,
          fromptroffset,
          startsoffset,
          stopsoffset,
          tolength,
          fromlength,
          fromwidth,
      ):
          for k in range(tolength * (fromwidth + 1)):
              toptr[k] = -1
          for i in range(fromlength):
              start = fromstarts[startsoffset + i]
              stop = fromstops[stopsoffset + i]
              if (start != stop) and (stop > tolength):
                  raise ValueError("max(stop) > len(content)")
              for j in range(start, stop):
                  if toptr[(j * (fromwidth + 1)) + fromwidth] != -1:
                      uniquecontents[0] = False
                      return
                  for k in range(fromwidth):
                      toptr[(j * (fromwidth + 1)) + k] = fromptr[
                          (fromptroffset + (i * fromwidth)) + k
                      ]
                  toptr[(j * (fromwidth + 1)) + fromwidth] = float(j - start)
          uniquecontents[0] = True


  - name: awkward_Identities_from_RegularArray
    specializations:
    - name: awkward_Identities32_from_RegularArray
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - size: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_RegularArray
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - size: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    fail: False
    specification: |
      def awkward_Identities_from_RegularArray(
          toptr, fromptr, fromptroffset, size, tolength, fromlength, fromwidth
      ):
          for i in range(fromlength):
              for j in range(size):
                  for k in range(fromwidth):
                      toptr[(((i * size) + j) * (fromwidth + 1)) + k] = fromptr[
                          (fromptroffset + (i * fromwidth)) + k
                      ]
                  toptr[(((i * size) + j) * (fromwidth + 1)) + fromwidth] = float(j)
          k = ((fromlength + 1) * size) * (fromwidth + 1)
          while k < (tolength * (fromwidth + 1)):
              toptr[k] = -1
              k = k + 1


  - name: awkward_Identities_from_IndexedArray
    specializations:
    - name: awkward_Identities32_from_IndexedArray64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromindex: List[int64_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_IndexedArrayU32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromindex: List[uint32_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_IndexedArray32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromindex: List[int32_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_IndexedArrayU32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromindex: List[uint32_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities64_from_IndexedArray64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromindex: List[int64_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    - name: awkward_Identities32_from_IndexedArray32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromindex: List[int32_t]
        - fromptroffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
    fail: False
    specification: |
      def awkward_Identities_from_IndexedArray(
          uniquecontents,
          toptr,
          fromptr,
          fromindex,
          fromptroffset,
          indexoffset,
          tolength,
          fromlength,
          fromwidth,
      ):
          for k in range(tolength * fromwidth):
              toptr[k] = -1
          for i in range(fromlength):
              j = fromindex[indexoffset + i]
              if j >= tolength:
                  raise ValueError("max(index) > len(content)")
              else:
                  if j >= 0:
                      if toptr[j * fromwidth] != -1:
                          uniquecontents[0] = False
                          return
                      for k in range(fromwidth):
                          toptr[(j * fromwidth) + k] = fromptr[
                              (fromptroffset + (i * fromwidth)) + k
                          ]
          uniquecontents[0] = True


  - name: awkward_Identities_from_UnionArray
    specializations:
    - name: awkward_Identities64_from_UnionArray8_32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromtags: List[int8_t]
        - fromindex: List[int32_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    - name: awkward_Identities32_from_UnionArray8_64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromtags: List[int8_t]
        - fromindex: List[int64_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    - name: awkward_Identities32_from_UnionArray8_32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromtags: List[int8_t]
        - fromindex: List[int32_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    - name: awkward_Identities64_from_UnionArray8_64
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromtags: List[int8_t]
        - fromindex: List[int64_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    - name: awkward_Identities32_from_UnionArray8_U32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromtags: List[int8_t]
        - fromindex: List[uint32_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    - name: awkward_Identities64_from_UnionArray8_U32
      args:
        - uniquecontents: List[bool]
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromtags: List[int8_t]
        - fromindex: List[uint32_t]
        - fromptroffset: int64_t
        - tagsoffset: int64_t
        - indexoffset: int64_t
        - tolength: int64_t
        - fromlength: int64_t
        - fromwidth: int64_t
        - which: int64_t
    fail: False
    specification: |
      def awkward_Identities_from_UnionArray(
          uniquecontents,
          toptr,
          fromptr,
          fromtags,
          fromindex,
          fromptroffset,
          tagsoffset,
          indexoffset,
          tolength,
          fromlength,
          fromwidth,
          which,
      ):
          for k in range(tolength * fromwidth):
              toptr[k] = -1
          for i in range(fromlength):
              if fromtags[tagsoffset + i] == which:
                  j = fromindex[indexoffset + i]
                  if j >= tolength:
                      raise ValueError("max(index) > len(content)")
                  else:
                      if j < 0:
                          raise ValueError("min(index) < 0")
                      else:
                          if toptr[j * fromwidth] != -1:
                              uniquecontents[0] = False
                              return
                          for k in range(fromwidth):
                              toptr[(j * fromwidth) + k] = fromptr[
                                  (fromptroffset + (i * fromwidth)) + k
                              ]
          uniquecontents[0] = True


  - name: awkward_Identities_extend
    specializations:
    - name: awkward_Identities64_extend
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromoffset: int64_t
        - fromlength: int64_t
        - tolength: int64_t
    - name: awkward_Identities32_extend
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromoffset: int64_t
        - fromlength: int64_t
        - tolength: int64_t
    fail: False
    specification: |
      def awkward_Identities_extend(toptr, fromptr, fromoffset, fromlength, tolength):
          i = 0
          while i < fromlength:
              toptr[i] = fromptr[fromoffset + i]
              i = i + 1
          while i < tolength:
              toptr[i] = -1
              i = i + 1


  - name: awkward_ListArray_num
    specializations:
    - name: awkward_ListArrayU32_num_64
      args:
        - tonum: List[int64_t]
        - fromstarts: List[uint32_t]
        - startsoffset: int64_t
        - fromstops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray32_num_64
      args:
        - tonum: List[int64_t]
        - fromstarts: List[int32_t]
        - startsoffset: int64_t
        - fromstops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray64_num_64
      args:
        - tonum: List[int64_t]
        - fromstarts: List[int64_t]
        - startsoffset: int64_t
        - fromstops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_num(
          tonum, fromstarts, startsoffset, fromstops, stopsoffset, length
      ):
          for i in range(length):
              start = fromstarts[startsoffset + i]
              stop = fromstops[stopsoffset + i]
              tonum[i] = float(stop - start)


  - name: awkward_RegularArray_num
    specializations:
    - name: awkward_RegularArray_num_64
      args:
        - tonum: List[int64_t]
        - size: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_num(tonum, size, length):
          for i in range(length):
              tonum[i] = size


  - name: awkward_ListOffsetArray_flatten_offsets
    specializations:
    - name: awkward_ListOffsetArray32_flatten_offsets_64
      args:
        - tooffsets: List[int64_t]
        - outeroffsets: List[int32_t]
        - outeroffsetsoffset: int64_t
        - outeroffsetslen: int64_t
        - inneroffsets: List[int64_t]
        - inneroffsetsoffset: int64_t
        - inneroffsetslen: int64_t
    - name: awkward_ListOffsetArray64_flatten_offsets_64
      args:
        - tooffsets: List[int64_t]
        - outeroffsets: List[int64_t]
        - outeroffsetsoffset: int64_t
        - outeroffsetslen: int64_t
        - inneroffsets: List[int64_t]
        - inneroffsetsoffset: int64_t
        - inneroffsetslen: int64_t
    - name: awkward_ListOffsetArrayU32_flatten_offsets_64
      args:
        - tooffsets: List[int64_t]
        - outeroffsets: List[uint32_t]
        - outeroffsetsoffset: int64_t
        - outeroffsetslen: int64_t
        - inneroffsets: List[int64_t]
        - inneroffsetsoffset: int64_t
        - inneroffsetslen: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_flatten_offsets(
          tooffsets,
          outeroffsets,
          outeroffsetsoffset,
          outeroffsetslen,
          inneroffsets,
          inneroffsetsoffset,
          inneroffsetslen,
      ):
          for i in range(outeroffsetslen):
              tooffsets[i] = inneroffsets[
                  inneroffsetsoffset + outeroffsets[outeroffsetsoffset + i]
              ]


  - name: awkward_IndexedArray_flatten_none2empty
    specializations:
    - name: awkward_IndexedArray64_flatten_none2empty_64
      args:
        - outoffsets: List[int64_t]
        - outindex: List[int64_t]
        - outindexoffset: int64_t
        - outindexlength: int64_t
        - offsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    - name: awkward_IndexedArrayU32_flatten_none2empty_64
      args:
        - outoffsets: List[int64_t]
        - outindex: List[uint32_t]
        - outindexoffset: int64_t
        - outindexlength: int64_t
        - offsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    - name: awkward_IndexedArray32_flatten_none2empty_64
      args:
        - outoffsets: List[int64_t]
        - outindex: List[int32_t]
        - outindexoffset: int64_t
        - outindexlength: int64_t
        - offsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_flatten_none2empty(
          outoffsets,
          outindex,
          outindexoffset,
          outindexlength,
          offsets,
          offsetsoffset,
          offsetslength,
      ):
          outoffsets[0] = offsets[offsetsoffset + 0]
          k = 1
          for i in range(outindexlength):
              idx = outindex[outindexoffset + i]
              if idx < 0:
                  outoffsets[k] = outoffsets[k - 1]
                  k = k + 1
              else:
                  if ((offsetsoffset + idx) + 1) >= offsetslength:
                      raise ValueError("flattening offset out of range")
                  else:
                      count = (
                          offsets[(offsetsoffset + idx) + 1] - offsets[offsetsoffset + idx]
                      )
                      outoffsets[k] = outoffsets[k - 1] + count
                      k = k + 1


  - name: awkward_UnionArray_flatten_length
    specializations:
    - name: awkward_UnionArray64_flatten_length_64
      args:
        - total_length: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    - name: awkward_UnionArrayU32_flatten_length_64
      args:
        - total_length: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[uint32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    - name: awkward_UnionArray32_flatten_length_64
      args:
        - total_length: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    fail: False
    specification: |
      def awkward_UnionArray_flatten_length(
          total_length,
          fromtags,
          fromtagsoffset,
          fromindex,
          fromindexoffset,
          length,
          offsetsraws,
          offsetsoffsets,
      ):
          total_length[0] = 0
          for i in range(length):
              tag = fromtags[fromtagsoffset + i]
              idx = fromindex[fromindexoffset + i]
              start = offsetsraws[tag][offsetsoffsets[tag] + idx]
              stop = offsetsraws[tag][(offsetsoffsets[tag] + idx) + 1]
              total_length[0] = total_length[0] + (stop - start)


  - name: awkward_UnionArray_flatten_combine
    specializations:
    - name: awkward_UnionArray64_flatten_combine_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - tooffsets: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    - name: awkward_UnionArrayU32_flatten_combine_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - tooffsets: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[uint32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    - name: awkward_UnionArray32_flatten_combine_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - tooffsets: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - offsetsraws: List[List[int64_t]]
        - offsetsoffsets: List[int64_t]
    fail: False
    specification: |
      def awkward_UnionArray_flatten_combine(
          totags,
          toindex,
          tooffsets,
          fromtags,
          fromtagsoffset,
          fromindex,
          fromindexoffset,
          length,
          offsetsraws,
          offsetsoffsets,
      ):
          tooffsets[0] = 0
          k = 0
          for i in range(length):
              tag = fromtags[fromtagsoffset + i]
              idx = fromindex[fromindexoffset + i]
              start = offsetsraws[tag][offsetsoffsets[tag] + idx]
              stop = offsetsraws[tag][(offsetsoffsets[tag] + idx) + 1]
              tooffsets[i + 1] = tooffsets[i] + (stop - start)
              for j in range(start, stop):
                  totags[k] = tag
                  toindex[k] = j
                  k = k + 1


  - name: awkward_IndexedArray_flatten_nextcarry
    specializations:
    - name: awkward_IndexedArray32_flatten_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArray64_flatten_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArrayU32_flatten_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_flatten_nextcarry(
          tocarry, fromindex, indexoffset, lenindex, lencontent
      ):
          k = 0
          for i in range(lenindex):
              j = fromindex[indexoffset + i]
              if j >= lencontent:
                  raise ValueError("index out of range")
              else:
                  if j >= 0:
                      tocarry[k] = j
                      k = k + 1


  - name: awkward_IndexedArray_overlay_mask
    specializations:
    - name: awkward_IndexedArray64_overlay_mask8_to64
      args:
        - toindex: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArrayU32_overlay_mask8_to64
      args:
        - toindex: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArray32_overlay_mask8_to64
      args:
        - toindex: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_overlay_mask(
          toindex, mask, maskoffset, fromindex, indexoffset, length
      ):
          for i in range(length):
              m = mask[maskoffset + i]
              toindex[i] = -1 if m else fromindex[indexoffset + i]


  - name: awkward_IndexedArray_mask
    specializations:
    - name: awkward_IndexedArray32_mask8
      args:
        - tomask: List[int8_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArray64_mask8
      args:
        - tomask: List[int8_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArrayU32_mask8
      args:
        - tomask: List[int8_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_mask(tomask, fromindex, indexoffset, length):
          for i in range(length):
              tomask[i] = fromindex[indexoffset + i] < 0


  - name: awkward_ByteMaskedArray_mask
    specializations:
    - name: awkward_ByteMaskedArray_mask8
      args:
        - tomask: List[int8_t]
        - frommask: List[int8_t]
        - maskoffset: int64_t
        - length: int64_t
        - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_mask(tomask, frommask, maskoffset, length, validwhen):
          for i in range(length):
              tomask[i] = (frommask[maskoffset + i] != 0) != validwhen


  - name: awkward_zero_mask
    specializations:
    - name: awkward_zero_mask8
      args:
        - tomask: List[int8_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_zero_mask(tomask, length):
          for i in range(length):
              tomask[i] = 0


  - name: awkward_IndexedArray_simplify
    specializations:
    - name: awkward_IndexedArray64_simplify32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int64_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArrayU32_simplifyU32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[uint32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[uint32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArrayU32_simplify64_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[uint32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int64_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArray32_simplify64_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int64_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArray32_simplify32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArray32_simplifyU32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[uint32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArrayU32_simplify32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[uint32_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArray64_simplifyU32_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int64_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[uint32_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    - name: awkward_IndexedArray64_simplify64_to64
      args:
        - toindex: List[int64_t]
        - outerindex: List[int64_t]
        - outeroffset: int64_t
        - outerlength: int64_t
        - innerindex: List[int64_t]
        - inneroffset: int64_t
        - innerlength: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_simplify(
          toindex, outerindex, outeroffset, outerlength, innerindex, inneroffset, innerlength
      ):
          for i in range(outerlength):
              j = outerindex[outeroffset + i]
              if j < 0:
                  toindex[i] = -1
              else:
                  if j >= innerlength:
                      raise ValueError("index out of range")
                  else:
                      toindex[i] = innerindex[inneroffset + j]


  - name: awkward_RegularArray_compact_offsets
    specializations:
    - name: awkward_RegularArray_compact_offsets64
      args:
        - tooffsets: List[int64_t]
        - length: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_compact_offsets(tooffsets, length, size):
          tooffsets[0] = 0
          for i in range(length):
              tooffsets[i + 1] = (i + 1) * size


  - name: awkward_ListArray_compact_offsets
    specializations:
    - name: awkward_ListArray64_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArrayU32_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray32_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_compact_offsets(
          tooffsets, fromstarts, fromstops, startsoffset, stopsoffset, length
      ):
          tooffsets[0] = 0
          for i in range(length):
              start = fromstarts[startsoffset + i]
              stop = fromstops[stopsoffset + i]
              if stop < start:
                  raise ValueError("stops[i] < starts[i]")
              tooffsets[i + 1] = tooffsets[i] + (stop - start)


  - name: awkward_ListOffsetArray_compact_offsets
    specializations:
    - name: awkward_ListOffsetArray32_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromoffsets: List[int32_t]
        - offsetsoffset: int64_t
        - length: int64_t
    - name: awkward_ListOffsetArray64_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - length: int64_t
    - name: awkward_ListOffsetArrayU32_compact_offsets_64
      args:
        - tooffsets: List[int64_t]
        - fromoffsets: List[uint32_t]
        - offsetsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_compact_offsets(
          tooffsets, fromoffsets, offsetsoffset, length
      ):
          diff = int(fromoffsets[offsetsoffset + 0])
          tooffsets[0] = 0
          for i in range(length):
              tooffsets[i + 1] = fromoffsets[(offsetsoffset + i) + 1] - diff


  - name: awkward_ListArray_broadcast_tooffsets
    specializations:
    - name: awkward_ListArrayU32_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[uint32_t]
        - startsoffset: int64_t
        - fromstops: List[uint32_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[int64_t]
        - startsoffset: int64_t
        - fromstops: List[int64_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray32_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[int32_t]
        - startsoffset: int64_t
        - fromstops: List[int32_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_ListArray_broadcast_tooffsets(
          tocarry,
          fromoffsets,
          offsetsoffset,
          offsetslength,
          fromstarts,
          startsoffset,
          fromstops,
          stopsoffset,
          lencontent,
      ):
          k = 0
          for i in range(offsetslength - 1):
              start = int(fromstarts[startsoffset + i])
              stop = int(fromstops[stopsoffset + i])
              if (start != stop) and (stop > lencontent):
                  raise ValueError("stops[i] > len(content)")
              count = int(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              if count < 0:
                  raise ValueError("broadcast's offsets must be monotonically increasing")
              if (stop - start) != count:
                  raise ValueError("cannot broadcast nested list")
              for j in range(start, stop):
                  tocarry[k] = float(j)
                  k = k + 1


  - name: awkward_RegularArray_broadcast_tooffsets
    specializations:
    - name: awkward_RegularArray_broadcast_tooffsets_64
      args:
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - size: int64_t
    fail: True
    specification: |
      def awkward_RegularArray_broadcast_tooffsets(
          fromoffsets, offsetsoffset, offsetslength, size
      ):
          for i in range(offsetslength - 1):
              count = int(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              if count < 0:
                  raise ValueError("broadcast's offsets must be monotonically increasing")
              if size != count:
                  raise ValueError("cannot broadcast nested list")


  - name: awkward_RegularArray_broadcast_tooffsets_size1
    specializations:
    - name: awkward_RegularArray_broadcast_tooffsets_size1_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_broadcast_tooffsets_size1(
          tocarry, fromoffsets, offsetsoffset, offsetslength
      ):
          k = 0
          for i in range(offsetslength - 1):
              count = int(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              if count < 0:
                  raise ValueError("broadcast's offsets must be monotonically increasing")
              for j in range(count):
                  tocarry[k] = float(i)
                  k = k + 1


  - name: awkward_ListOffsetArray_toRegularArray
    specializations:
    - name: awkward_ListOffsetArrayU32_toRegularArray
      args:
        - size: List[int64_t]
        - fromoffsets: List[uint32_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    - name: awkward_ListOffsetArray32_toRegularArray
      args:
        - size: List[int64_t]
        - fromoffsets: List[int32_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    - name: awkward_ListOffsetArray64_toRegularArray
      args:
        - size: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_toRegularArray(
          size, fromoffsets, offsetsoffset, offsetslength
      ):
          size[0] = -1
          for i in range(offsetslength - 1):
              count = int(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              if count < 0:
                  raise ValueError("offsets must be monotonically increasing")
              if size[0] == -1:
                  size[0] = count
              else:
                  if size[0] != count:
                      raise ValueError(
                          "cannot convert to RegularArray because subarray lengths are not regular"
                      )
          if size[0] == -1:
              size[0] = 0


  - name: awkward_NumpyArray_fill_frombool
    specializations:
    - name: awkward_NumpyArray_fill_toint16_frombool
      args:
        - toptr: List[int16_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_frombool
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint64_frombool
      args:
        - toptr: List[uint64_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint16_frombool
      args:
        - toptr: List[uint16_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_frombool
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_frombool
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_frombool
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint8_frombool
      args:
        - toptr: List[int8_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tobool_frombool
      args:
        - toptr: List[bool]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint32_frombool
      args:
        - toptr: List[uint32_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint8_frombool
      args:
        - toptr: List[uint8_t]
        - tooffset: int64_t
        - fromptr: List[bool]
        - fromoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_fill_frombool(toptr, tooffset, fromptr, fromoffset, length):
          for i in range(length):
              toptr[tooffset + i] = float(fromptr[fromoffset + i] != 0)


  - name: awkward_NumpyArray_fill
    specializations:
    - name: awkward_NumpyArray_fill_toint16_fromuint8
      args:
        - toptr: List[int16_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromuint64
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[uint64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromint32
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[int32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromint64
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[int64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromuint32
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[uint32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromint64
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[int64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromuint64
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[uint64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromuint32
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[uint32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint64_fromuint64
      args:
        - toptr: List[uint64_t]
        - tooffset: int64_t
        - fromptr: List[uint64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint32_fromuint32
      args:
        - toptr: List[uint32_t]
        - tooffset: int64_t
        - fromptr: List[uint32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint8_fromint8
      args:
        - toptr: List[int8_t]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromfloat32
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[float]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint16_fromint16
      args:
        - toptr: List[int16_t]
        - tooffset: int64_t
        - fromptr: List[int16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromuint16
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromuint16
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint64_fromuint8
      args:
        - toptr: List[uint64_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromfloat64
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[double]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromint16
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[int16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint64_fromuint16
      args:
        - toptr: List[uint64_t]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromuint8
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_fromint8
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromint8
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromint32
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[int32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromint32
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[int32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromint8
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromuint32
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[uint32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint16_fromuint8
      args:
        - toptr: List[uint16_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromint8
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_fromuint8
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_fromint16
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[int16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint32_fromuint16
      args:
        - toptr: List[uint32_t]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromint64
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[int64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromuint8
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat32_fromuint16
      args:
        - toptr: List[float]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint8_fromuint8
      args:
        - toptr: List[uint8_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint32_fromuint8
      args:
        - toptr: List[uint32_t]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint64_fromuint32
      args:
        - toptr: List[uint64_t]
        - tooffset: int64_t
        - fromptr: List[uint32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_touint16_fromuint16
      args:
        - toptr: List[uint16_t]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromuint8
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[uint8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_fromint32
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[int32_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint16_fromint8
      args:
        - toptr: List[int16_t]
        - tooffset: int64_t
        - fromptr: List[int8_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint32_fromuint16
      args:
        - toptr: List[int32_t]
        - tooffset: int64_t
        - fromptr: List[uint16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromuint64
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[uint64_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromfloat32
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[float]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_tofloat64_fromint16
      args:
        - toptr: List[double]
        - tooffset: int64_t
        - fromptr: List[int16_t]
        - fromoffset: int64_t
        - length: int64_t
    - name: awkward_NumpyArray_fill_toint64_fromint16
      args:
        - toptr: List[int64_t]
        - tooffset: int64_t
        - fromptr: List[int16_t]
        - fromoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_fill(toptr, tooffset, fromptr, fromoffset, length):
          for i in range(length):
              toptr[tooffset + i] = float(fromptr[fromoffset + i])


  - name: awkward_ListArray_fill
    specializations:
    - name: awkward_ListArray_fill_to64_from32
      args:
        - tostarts: List[int64_t]
        - tostartsoffset: int64_t
        - tostops: List[int64_t]
        - tostopsoffset: int64_t
        - fromstarts: List[int32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int32_t]
        - fromstopsoffset: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_ListArray_fill_to64_from64
      args:
        - tostarts: List[int64_t]
        - tostartsoffset: int64_t
        - tostops: List[int64_t]
        - tostopsoffset: int64_t
        - fromstarts: List[int64_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int64_t]
        - fromstopsoffset: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_ListArray_fill_to64_fromU32
      args:
        - tostarts: List[int64_t]
        - tostartsoffset: int64_t
        - tostops: List[int64_t]
        - tostopsoffset: int64_t
        - fromstarts: List[uint32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[uint32_t]
        - fromstopsoffset: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_ListArray_fill(
          tostarts,
          tostartsoffset,
          tostops,
          tostopsoffset,
          fromstarts,
          fromstartsoffset,
          fromstops,
          fromstopsoffset,
          length,
          base,
      ):
          for i in range(length):
              tostarts[tostartsoffset + i] = float(fromstarts[fromstartsoffset + i] + base)
              tostops[tostopsoffset + i] = float(fromstops[fromstopsoffset + i] + base)


  - name: awkward_IndexedArray_fill
    specializations:
    - name: awkward_IndexedArray_fill_to64_from64
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_IndexedArray_fill_to64_fromU32
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[uint32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_IndexedArray_fill_to64_from32
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[int32_t]
        - fromindexoffset: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_fill(
          toindex, toindexoffset, fromindex, fromindexoffset, length, base
      ):
          for i in range(length):
              fromval = fromindex[fromindexoffset + i]
              toindex[toindexoffset + i] = -1 if fromval < 0 else float(fromval + base)


  - name: awkward_IndexedArray_fill_count
    specializations:
    - name: awkward_IndexedArray_fill_to64_count
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_fill_count(toindex, toindexoffset, length, base):
          for i in range(length):
              toindex[toindexoffset + i] = i + base


  - name: awkward_UnionArray_filltags
    specializations:
    - name: awkward_UnionArray_filltags_to8_from8
      args:
        - totags: List[int8_t]
        - totagsoffset: int64_t
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_filltags(
          totags, totagsoffset, fromtags, fromtagsoffset, length, base
      ):
          for i in range(length):
              totags[totagsoffset + i] = float(fromtags[fromtagsoffset + i] + base)


  - name: awkward_UnionArray_fillindex
    specializations:
    - name: awkward_UnionArray_fillindex_to64_from64
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillindex_to64_from32
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[int32_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillindex_to64_fromU32
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - fromindex: List[uint32_t]
        - fromindexoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_fillindex(
          toindex, toindexoffset, fromindex, fromindexoffset, length
      ):
          for i in range(length):
              toindex[toindexoffset + i] = float(fromindex[fromindexoffset + i])


  - name: awkward_UnionArray_filltags_const
    specializations:
    - name: awkward_UnionArray_filltags_to8_const
      args:
        - totags: List[int8_t]
        - totagsoffset: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_filltags_const(totags, totagsoffset, length, base):
          for i in range(length):
              totags[totagsoffset + i] = float(base)


  - name: awkward_UnionArray_fillindex_count
    specializations:
    - name: awkward_UnionArray_fillindex_to64_count
      args:
        - toindex: List[int64_t]
        - toindexoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_fillindex_count(toindex, toindexoffset, length):
          for i in range(length):
              toindex[toindexoffset + i] = float(i)


  - name: awkward_UnionArray_simplify
    specializations:
    - name: awkward_UnionArray8_32_simplify8_32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_32_simplify8_U32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[uint32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_32_simplify8_64_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int64_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_U32_simplify8_U32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[uint32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[uint32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_64_simplify8_64_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int64_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int64_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_64_simplify8_32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int64_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_U32_simplify8_32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[uint32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_U32_simplify8_64_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[uint32_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[int64_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_64_simplify8_U32_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - outertags: List[int8_t]
        - outertagsoffset: int64_t
        - outerindex: List[int64_t]
        - outerindexoffset: int64_t
        - innertags: List[int8_t]
        - innertagsoffset: int64_t
        - innerindex: List[uint32_t]
        - innerindexoffset: int64_t
        - towhich: int64_t
        - innerwhich: int64_t
        - outerwhich: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_simplify(
          totags,
          toindex,
          outertags,
          outertagsoffset,
          outerindex,
          outerindexoffset,
          innertags,
          innertagsoffset,
          innerindex,
          innerindexoffset,
          towhich,
          innerwhich,
          outerwhich,
          length,
          base,
      ):
          for i in range(length):
              if outertags[outertagsoffset + i] == outerwhich:
                  j = outerindex[outerindexoffset + i]
                  if innertags[innertagsoffset + j] == innerwhich:
                      totags[i] = float(towhich)
                      toindex[i] = float(innerindex[innerindexoffset + j] + base)


  - name: awkward_UnionArray_simplify_one
    specializations:
    - name: awkward_UnionArray8_64_simplify_one_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - towhich: int64_t
        - fromwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_32_simplify_one_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[int32_t]
        - fromindexoffset: int64_t
        - towhich: int64_t
        - fromwhich: int64_t
        - length: int64_t
        - base: int64_t
    - name: awkward_UnionArray8_U32_simplify_one_to8_64
      args:
        - totags: List[int8_t]
        - toindex: List[int64_t]
        - fromtags: List[int8_t]
        - fromtagsoffset: int64_t
        - fromindex: List[uint32_t]
        - fromindexoffset: int64_t
        - towhich: int64_t
        - fromwhich: int64_t
        - length: int64_t
        - base: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_simplify_one(
          totags,
          toindex,
          fromtags,
          fromtagsoffset,
          fromindex,
          fromindexoffset,
          towhich,
          fromwhich,
          length,
          base,
      ):
          for i in range(length):
              if fromtags[fromtagsoffset + i] == fromwhich:
                  totags[i] = float(towhich)
                  toindex[i] = float(fromindex[fromindexoffset + i] + base)


  - name: awkward_ListArray_validity
    specializations:
    - name: awkward_ListArray32_validity
      args:
        - starts: List[int32_t]
        - startsoffset: int64_t
        - stops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
    - name: awkward_ListArrayU32_validity
      args:
        - starts: List[uint32_t]
        - startsoffset: int64_t
        - stops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_validity
      args:
        - starts: List[int64_t]
        - startsoffset: int64_t
        - stops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_ListArray_validity(
          starts, startsoffset, stops, stopsoffset, length, lencontent
      ):
          for i in range(length):
              start = starts[startsoffset + i]
              stop = stops[stopsoffset + i]
              if start != stop:
                  if start > stop:
                      raise ValueError("start[i] > stop[i]")
                  if start < 0:
                      raise ValueError("start[i] < 0")
                  if stop > lencontent:
                      raise ValueError("stop[i] > len(content)")


  - name: awkward_IndexedArray_validity
    specializations:
    - name: awkward_IndexedArray64_validity
      args:
        - index: List[int64_t]
        - indexoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
        - isoption: bool
    - name: awkward_IndexedArray32_validity
      args:
        - index: List[int32_t]
        - indexoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
        - isoption: bool
    - name: awkward_IndexedArrayU32_validity
      args:
        - index: List[uint32_t]
        - indexoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
        - isoption: bool
    fail: False
    specification: |
      def awkward_IndexedArray_validity(index, indexoffset, length, lencontent, isoption):
          for i in range(length):
              idx = index[indexoffset + i]
              if not (isoption):
                  if idx < 0:
                      raise ValueError("index[i] < 0")
              if idx >= lencontent:
                  raise ValueError("index[i] >= len(content)")


  - name: awkward_UnionArray_validity
    specializations:
    - name: awkward_UnionArray8_64_validity
      args:
        - tags: List[int8_t]
        - tagsoffset: int64_t
        - index: List[int64_t]
        - indexoffset: int64_t
        - length: int64_t
        - numcontents: int64_t
        - lencontents: List[int64_t]
    - name: awkward_UnionArray8_32_validity
      args:
        - tags: List[int8_t]
        - tagsoffset: int64_t
        - index: List[int32_t]
        - indexoffset: int64_t
        - length: int64_t
        - numcontents: int64_t
        - lencontents: List[int64_t]
    - name: awkward_UnionArray8_U32_validity
      args:
        - tags: List[int8_t]
        - tagsoffset: int64_t
        - index: List[uint32_t]
        - indexoffset: int64_t
        - length: int64_t
        - numcontents: int64_t
        - lencontents: List[int64_t]
    fail: True
    specification: |
      def awkward_UnionArray_validity(
          tags, tagsoffset, index, indexoffset, length, numcontents, lencontents
      ):
          for i in range(length):
              tag = tags[tagsoffset + i]
              idx = index[indexoffset + i]
              if tag < 0:
                  raise ValueError("tags[i] < 0")
              if idx < 0:
                  raise ValueError("index[i] < 0")
              if tag >= numcontents:
                  raise ValueError("tags[i] >= len(contents)")
              lencontent = lencontents[tag]
              if idx >= lencontent:
                  raise ValueError("index[i] >= len(content[tags[i]])")


  - name: awkward_UnionArray_fillna
    specializations:
    - name: awkward_UnionArray_fillna_from64_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - offset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillna_from32_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int32_t]
        - offset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillna_fromU32_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[uint32_t]
        - offset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_fillna(toindex, fromindex, offset, length):
          for i in range(length):
              toindex[i] = fromindex[offset + i] if fromindex[offset + i] >= 0 else 0


  - name: awkward_IndexedOptionArray_rpad_and_clip_mask_axis1
    specializations:
    - name: awkward_IndexedOptionArray_rpad_and_clip_mask_axis1_64
      args:
        - toindex: List[int64_t]
        - frommask: List[int8_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_IndexedOptionArray_rpad_and_clip_mask_axis1(toindex, frommask, length):
          count = 0
          for i in range(length):
              if frommask[i]:
                  toindex[i] = -1
              else:
                  toindex[i] = count = count + 1


  - name: awkward_index_rpad_and_clip_axis0
    specializations:
    - name: awkward_index_rpad_and_clip_axis0_64
      args:
        - toindex: List[int64_t]
        - target: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_index_rpad_and_clip_axis0(toindex, target, length):
          shorter = target if target < length else length
          for i in range(shorter):
              toindex[i] = i
          for i in range(shorter, target):
              toindex[i] = -1


  - name: awkward_index_rpad_and_clip_axis1
    specializations:
    - name: awkward_index_rpad_and_clip_axis1_64
      args:
        - tostarts: List[int64_t]
        - tostops: List[int64_t]
        - target: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_index_rpad_and_clip_axis1(tostarts, tostops, target, length):
          offset = 0
          for i in range(length):
              tostarts[i] = offset
              offset = offset + target
              tostops[i] = offset


  - name: awkward_RegularArray_rpad_and_clip_axis1
    specializations:
    - name: awkward_RegularArray_rpad_and_clip_axis1_64
      args:
        - toindex: List[int64_t]
        - target: int64_t
        - size: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_rpad_and_clip_axis1(toindex, target, size, length):
          shorter = target if target < size else size
          for i in range(length):
              for j in range(shorter):
                  toindex[(i * target) + j] = (i * size) + j
              for j in range(shorter, target):
                  toindex[(i * target) + j] = -1


  - name: awkward_ListArray_min_range
    specializations:
    - name: awkward_ListArray64_min_range
      args:
        - tomin: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArray32_min_range
      args:
        - tomin: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArrayU32_min_range
      args:
        - tomin: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    fail: False
    specification: |
      def awkward_ListArray_min_range(
          tomin, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset
      ):
          shorter = fromstops[stopsoffset + 0] - fromstarts[startsoffset + 0]
          for i in range(1, lenstarts):
              rangeval = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              shorter = shorter if shorter < rangeval else rangeval
          tomin[0] = shorter


  - name: awkward_ListArray_rpad_and_clip_length_axis1
    specializations:
    - name: awkward_ListArrayU32_rpad_and_clip_length_axis1
      args:
        - tomin: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - target: int64_t
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArray64_rpad_and_clip_length_axis1
      args:
        - tomin: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - target: int64_t
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArray32_rpad_and_clip_length_axis1
      args:
        - tomin: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - target: int64_t
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    fail: False
    specification: |
      def awkward_ListArray_rpad_and_clip_length_axis1(
          tomin, fromstarts, fromstops, target, lenstarts, startsoffset, stopsoffset
      ):
          length = 0
          for i in range(lenstarts):
              rangeval = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              length += target if target > rangeval else rangeval
          tomin[0] = length


  - name: awkward_ListArray_rpad_axis1
    specializations:
    - name: awkward_ListArray32_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - tostarts: List[int32_t]
        - tostops: List[int32_t]
        - target: int64_t
        - length: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArray64_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - tostarts: List[int64_t]
        - tostops: List[int64_t]
        - target: int64_t
        - length: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    - name: awkward_ListArrayU32_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - tostarts: List[uint32_t]
        - tostops: List[uint32_t]
        - target: int64_t
        - length: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
    fail: False
    specification: |
      def awkward_ListArray_rpad_axis1(
          toindex,
          fromstarts,
          fromstops,
          tostarts,
          tostops,
          target,
          length,
          startsoffset,
          stopsoffset,
      ):
          offset = 0
          for i in range(length):
              tostarts[i] = offset
              rangeval = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              for j in range(rangeval):
                  toindex[offset + j] = fromstarts[startsoffset + i] + j
              for j in range(rangeval, target):
                  toindex[offset + j] = -1
              offset = tostarts[i] + target if target > rangeval else tostarts[i] + rangeval
              tostops[i] = offset


  - name: awkward_ListOffsetArray_rpad_and_clip_axis1
    specializations:
    - name: awkward_ListOffsetArray64_rpad_and_clip_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - length: int64_t
        - target: int64_t
    - name: awkward_ListOffsetArrayU32_rpad_and_clip_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[uint32_t]
        - offsetsoffset: int64_t
        - length: int64_t
        - target: int64_t
    - name: awkward_ListOffsetArray32_rpad_and_clip_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[int32_t]
        - offsetsoffset: int64_t
        - length: int64_t
        - target: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_rpad_and_clip_axis1(
          toindex, fromoffsets, offsetsoffset, length, target
      ):
          for i in range(length):
              rangeval = float(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              shorter = target if target < rangeval else rangeval
              for j in range(shorter):
                  toindex[(i * target) + j] = float(fromoffsets[offsetsoffset + i]) + j
              for j in range(shorter, target):
                  toindex[(i * target) + j] = -1


  - name: awkward_ListOffsetArray_rpad_length_axis1
    specializations:
    - name: awkward_ListOffsetArray32_rpad_length_axis1
      args:
        - tooffsets: List[int32_t]
        - fromoffsets: List[int32_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
        - tolength: List[int64_t]
    - name: awkward_ListOffsetArrayU32_rpad_length_axis1
      args:
        - tooffsets: List[uint32_t]
        - fromoffsets: List[uint32_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
        - tolength: List[int64_t]
    - name: awkward_ListOffsetArray64_rpad_length_axis1
      args:
        - tooffsets: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
        - tolength: List[int64_t]
    fail: False
    specification: |
      def awkward_ListOffsetArray_rpad_length_axis1(
          tooffsets, fromoffsets, offsetsoffset, fromlength, target, tolength
      ):
          length = 0
          tooffsets[0] = 0
          for i in range(fromlength):
              rangeval = fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              longer = rangeval if target < rangeval else target
              length = length + longer
              tooffsets[i + 1] = tooffsets[i] + longer
          tolength[0] = length


  - name: awkward_ListOffsetArray_rpad_axis1
    specializations:
    - name: awkward_ListOffsetArray64_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
    - name: awkward_ListOffsetArray32_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[int32_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
    - name: awkward_ListOffsetArrayU32_rpad_axis1_64
      args:
        - toindex: List[int64_t]
        - fromoffsets: List[uint32_t]
        - offsetsoffset: int64_t
        - fromlength: int64_t
        - target: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_rpad_axis1(
          toindex, fromoffsets, offsetsoffset, fromlength, target
      ):
          count = 0
          for i in range(fromlength):
              rangeval = float(
                  fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
              )
              for j in range(rangeval):
                  toindex[count] = float(fromoffsets[offsetsoffset + i]) + j
                  count = count + 1
              for j in range(rangeval, target):
                  toindex[count] = -1
                  count = count + 1


  - name: awkward_localindex
    specializations:
    - name: awkward_localindex_64
      args:
        - toindex: List[int64_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_localindex(toindex, length):
          for i in range(length):
              toindex[i] = i


  - name: awkward_ListArray_localindex
    specializations:
    - name: awkward_ListArray32_localindex_64
      args:
        - toindex: List[int64_t]
        - offsets: List[int32_t]
        - offsetsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArrayU32_localindex_64
      args:
        - toindex: List[int64_t]
        - offsets: List[uint32_t]
        - offsetsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray64_localindex_64
      args:
        - toindex: List[int64_t]
        - offsets: List[int64_t]
        - offsetsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_localindex(toindex, offsets, offsetsoffset, length):
          for i in range(length):
              start = int(offsets[offsetsoffset + i])
              stop = int(offsets[(offsetsoffset + i) + 1])
              for j in range(start, stop):
                  toindex[j] = j - start


  - name: awkward_RegularArray_localindex
    specializations:
    - name: awkward_RegularArray_localindex_64
      args:
        - toindex: List[int64_t]
        - size: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_localindex(toindex, size, length):
          for i in range(length):
              for j in range(size):
                  toindex[(i * size) + j] = j


  - name: awkward_combinations
    specializations:
    - name: awkward_combinations_64
      args:
        - toindex: List[int64_t]
        - n: int64_t
        - replacement: bool
        - singlelen: int64_t
    fail: False
    specification: |
      def awkward_combinations(toindex, n, replacement, singlelen):
          raise ValueError("FIXME: awkward_combinations")


  - name: awkward_ListArray_combinations_length
    specializations:
    - name: awkward_ListArrayU32_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[uint32_t]
        - startsoffset: int64_t
        - stops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray32_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int32_t]
        - startsoffset: int64_t
        - stops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray64_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int64_t]
        - startsoffset: int64_t
        - stops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_combinations_length(
          totallen,
          tooffsets,
          n,
          replacement,
          starts,
          startsoffset,
          stops,
          stopsoffset,
          length,
      ):
          totallen[0] = 0
          tooffsets[0] = 0
          for i in range(length):
              size = int(stops[stopsoffset + i] - starts[startsoffset + i])
              if replacement:
                  size += n - 1
              thisn = n
      
              if thisn > size:
                  combinationslen = 0
              else:
                  if thisn == size:
                      combinationslen = 1
                  else:
                      if (thisn * 2) > size:
                          thisn = size - thisn
                      combinationslen = size
                      j = 2
                      while j <= thisn:
                          combinationslen *= (size - j) + 1
                          combinationslen /= j
                          j = j + 1
              totallen[0] = totallen[0] + combinationslen
              tooffsets[i + 1] = tooffsets[i] + combinationslen


  - name: awkward_ListArray_combinations
    specializations:
    - name: awkward_ListArray64_combinations_64
      args:
        - tocarry: List[List[int64_t]]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int64_t]
        - startsoffset: int64_t
        - stops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray32_combinations_64
      args:
        - tocarry: List[List[int64_t]]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int32_t]
        - startsoffset: int64_t
        - stops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArrayU32_combinations_64
      args:
        - tocarry: List[List[int64_t]]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[uint32_t]
        - startsoffset: int64_t
        - stops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_combinations(
          tocarry,
          toindex,
          fromindex,
          n,
          replacement,
          starts,
          startsoffset,
          stops,
          stopsoffset,
          length,
      ):
          for j in range(n):
              toindex[j] = 0
          for i in range(length):
              start = int(starts[startsoffset + i])
              stop = int(stops[stopsoffset + i])
              fromindex[0] = start
              awkward_ListArray_combinations_step(
                  tocarry, toindex, fromindex, 0, stop, n, replacement
              )


  - name: awkward_RegularArray_combinations
    specializations:
    - name: awkward_RegularArray_combinations_64
      args:
        - tocarry: List[List[int64_t]]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - n: int64_t
        - replacement: bool
        - size: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_combinations(
          tocarry, toindex, fromindex, n, replacement, size, length
      ):
          for j in range(n):
              toindex[j] = 0
          for i in range(length):
              start = size * i
              stop = start + size
              fromindex[0] = start
              awkward_ListArray_combinations_step(
                  tocarry, toindex, fromindex, 0, stop, n, replacement
              )


  - name: awkward_ByteMaskedArray_overlay_mask
    specializations:
    - name: awkward_ByteMaskedArray_overlay_mask8
      args:
        - tomask: List[int8_t]
        - theirmask: List[int8_t]
        - theirmaskoffset: int64_t
        - mymask: List[int8_t]
        - mymaskoffset: int64_t
        - length: int64_t
        - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_overlay_mask(
          tomask, theirmask, theirmaskoffset, mymask, mymaskoffset, length, validwhen
      ):
          for i in range(length):
              theirs = theirmask[theirmaskoffset + i]
              mine = (mymask[mymaskoffset + i] != 0) != validwhen
              tomask[i] = 1 if theirs | mine else 0


  - name: awkward_BitMaskedArray_to_ByteMaskedArray
    args:
      - tobytemask: List[int8_t]
      - frombitmask: List[uint8_t]
      - bitmaskoffset: int64_t
      - bitmasklength: int64_t
      - validwhen: bool
      - lsb_order: bool
    fail: False
    specification: |
      def awkward_BitMaskedArray_to_ByteMaskedArray(
          tobytemask, frombitmask, bitmaskoffset, bitmasklength, validwhen, lsb_order
      ):
          if lsb_order:
              for i in range(bitmasklength):
                  byte = frombitmask[bitmaskoffset + i]
                  tobytemask[(i * 8) + 0] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 1] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 2] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 3] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 4] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 5] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 6] = (byte & int(1)) != validwhen
                  byte >>= 1
                  tobytemask[(i * 8) + 7] = (byte & int(1)) != validwhen
          else:
              for i in range(bitmasklength):
                  byte = frombitmask[bitmaskoffset + i]
                  tobytemask[(i * 8) + 0] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 1] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 2] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 3] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 4] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 5] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 6] = ((byte & int(128)) != 0) != validwhen
                  byte <<= 1
                  tobytemask[(i * 8) + 7] = ((byte & int(128)) != 0) != validwhen


  - name: awkward_BitMaskedArray_to_IndexedOptionArray
    specializations:
    - name: awkward_BitMaskedArray_to_IndexedOptionArray64
      args:
        - toindex: List[int64_t]
        - frombitmask: List[uint8_t]
        - bitmaskoffset: int64_t
        - bitmasklength: int64_t
        - validwhen: bool
        - lsb_order: bool
    fail: False
    specification: |
      def awkward_BitMaskedArray_to_IndexedOptionArray(
          toindex, frombitmask, bitmaskoffset, bitmasklength, validwhen, lsb_order
      ):
          if lsb_order:
              for i in range(bitmasklength):
                  byte = frombitmask[bitmaskoffset + i]
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 0] = (i * 8) + 0
                  else:
                      toindex[(i * 8) + 0] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 1] = (i * 8) + 1
                  else:
                      toindex[(i * 8) + 1] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 2] = (i * 8) + 2
                  else:
                      toindex[(i * 8) + 2] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 3] = (i * 8) + 3
                  else:
                      toindex[(i * 8) + 3] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 4] = (i * 8) + 4
                  else:
                      toindex[(i * 8) + 4] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 5] = (i * 8) + 5
                  else:
                      toindex[(i * 8) + 5] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 6] = (i * 8) + 6
                  else:
                      toindex[(i * 8) + 6] = -1
                  byte >>= 1
                  if (byte & int(1)) == validwhen:
                      toindex[(i * 8) + 7] = (i * 8) + 7
                  else:
                      toindex[(i * 8) + 7] = -1
          else:
              for i in range(bitmasklength):
                  byte = frombitmask[bitmaskoffset + i]
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 0] = (i * 8) + 0
                  else:
                      toindex[(i * 8) + 0] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 1] = (i * 8) + 1
                  else:
                      toindex[(i * 8) + 1] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 2] = (i * 8) + 2
                  else:
                      toindex[(i * 8) + 2] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 3] = (i * 8) + 3
                  else:
                      toindex[(i * 8) + 3] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 4] = (i * 8) + 4
                  else:
                      toindex[(i * 8) + 4] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 5] = (i * 8) + 5
                  else:
                      toindex[(i * 8) + 5] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 6] = (i * 8) + 6
                  else:
                      toindex[(i * 8) + 6] = -1
                  byte <<= 1
                  if ((byte & int(128)) != 0) == validwhen:
                      toindex[(i * 8) + 7] = (i * 8) + 7
                  else:
                      toindex[(i * 8) + 7] = -1


  - name: awkward_reduce_count_64
    args:
      - toptr: List[int64_t]
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_count_64(toptr, parents, parentsoffset, lenparents, outlength):
          for i in range(outlength):
              toptr[i] = 0
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] = toptr[parents[parentsoffset + i]] + 1


  - name: awkward_reduce_countnonzero
    specializations:
    - name: awkward_reduce_countnonzero_uint8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_uint64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_int8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_uint16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_int32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_float32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_int16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_float64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_bool_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[bool]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_countnonzero_uint32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_countnonzero(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 0
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] += fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_sum
    specializations:
    - name: awkward_reduce_sum_float64_float64_64
      args:
        - toptr: List[double]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint64_uint8_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint64_uint64_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_float32_float32_64
      args:
        - toptr: List[float]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int64_int8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int32_int32_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int32_int16_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int32_int8_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint32_uint8_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int64_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint64_uint32_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint64_uint16_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint32_uint32_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int64_int16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_int64_int32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_uint32_uint16_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_sum(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = float(0)
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] += float(fromptr[fromptroffset + i])


  - name: awkward_reduce_sum_int64_bool_64
    args:
      - toptr: List[int64_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_sum_int64_bool_64(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 0
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] += fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_sum_int32_bool_64
    args:
      - toptr: List[int32_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_sum_int32_bool_64(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 0
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] += fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_sum_bool
    specializations:
    - name: awkward_reduce_sum_bool_float32_64
      args:
        - toptr: List[bool]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_uint8_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_uint64_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_uint16_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_int64_64
      args:
        - toptr: List[bool]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_int16_64
      args:
        - toptr: List[bool]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_uint32_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_float64_64
      args:
        - toptr: List[bool]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_int8_64
      args:
        - toptr: List[bool]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_int32_64
      args:
        - toptr: List[bool]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_sum_bool_bool_64
      args:
        - toptr: List[bool]
        - fromptr: List[bool]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_sum_bool(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = int(0)
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] |= fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_prod
    specializations:
    - name: awkward_reduce_prod_int32_int8_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint64_uint32_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_float64_float64_64
      args:
        - toptr: List[double]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int32_int32_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint64_uint8_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint64_uint16_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_float32_float32_64
      args:
        - toptr: List[float]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int64_int8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int64_int32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int32_int16_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int64_int16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint32_uint32_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint32_uint8_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_int64_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint32_uint16_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_uint64_uint64_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_prod(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = float(1)
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] *= float(fromptr[fromptroffset + i])


  - name: awkward_reduce_prod_int64_bool_64
    args:
      - toptr: List[int64_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_prod_int64_bool_64(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 1
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] *= fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_prod_int32_bool_64
    args:
      - toptr: List[int32_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_prod_int32_bool_64(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 1
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] *= fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_prod_bool
    specializations:
    - name: awkward_reduce_prod_bool_uint32_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_bool_64
      args:
        - toptr: List[bool]
        - fromptr: List[bool]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_uint16_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_int64_64
      args:
        - toptr: List[bool]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_uint64_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_int32_64
      args:
        - toptr: List[bool]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_float32_64
      args:
        - toptr: List[bool]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_int8_64
      args:
        - toptr: List[bool]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_uint8_64
      args:
        - toptr: List[bool]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_int16_64
      args:
        - toptr: List[bool]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_prod_bool_float64_64
      args:
        - toptr: List[bool]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_prod_bool(
          toptr, fromptr, fromptroffset, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = int(1)
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] &= fromptr[fromptroffset + i] != 0


  - name: awkward_reduce_min
    specializations:
    - name: awkward_reduce_min_int16_int16_64
      args:
        - toptr: List[int16_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int16_t
    - name: awkward_reduce_min_int64_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int64_t
    - name: awkward_reduce_min_uint64_uint64_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint64_t
    - name: awkward_reduce_min_uint32_uint32_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint32_t
    - name: awkward_reduce_min_float32_float32_64
      args:
        - toptr: List[float]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: float
    - name: awkward_reduce_min_int8_int8_64
      args:
        - toptr: List[int8_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int8_t
    - name: awkward_reduce_min_uint16_uint16_64
      args:
        - toptr: List[uint16_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint16_t
    - name: awkward_reduce_min_int32_int32_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int32_t
    - name: awkward_reduce_min_float64_float64_64
      args:
        - toptr: List[double]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: double
    - name: awkward_reduce_min_uint8_uint8_64
      args:
        - toptr: List[uint8_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint8_t
    fail: False
    specification: |
      def awkward_reduce_min(
          toptr,
          fromptr,
          fromptroffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
          identity,
      ):
          for i in range(outlength):
              toptr[i] = identity
          for i in range(lenparents):
              x = fromptr[fromptroffset + i]
              toptr[parents[parentsoffset + i]] = (
                  x
                  if x < toptr[parents[parentsoffset + i]]
                  else toptr[parents[parentsoffset + i]]
              )


  - name: awkward_reduce_max
    specializations:
    - name: awkward_reduce_max_int16_int16_64
      args:
        - toptr: List[int16_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int16_t
    - name: awkward_reduce_max_int64_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int64_t
    - name: awkward_reduce_max_uint16_uint16_64
      args:
        - toptr: List[uint16_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint16_t
    - name: awkward_reduce_max_float64_float64_64
      args:
        - toptr: List[double]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: double
    - name: awkward_reduce_max_uint8_uint8_64
      args:
        - toptr: List[uint8_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint8_t
    - name: awkward_reduce_max_uint32_uint32_64
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint32_t
    - name: awkward_reduce_max_int8_int8_64
      args:
        - toptr: List[int8_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int8_t
    - name: awkward_reduce_max_int32_int32_64
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: int32_t
    - name: awkward_reduce_max_float32_float32_64
      args:
        - toptr: List[float]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: float
    - name: awkward_reduce_max_uint64_uint64_64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
        - identity: uint64_t
    fail: False
    specification: |
      def awkward_reduce_max(
          toptr,
          fromptr,
          fromptroffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
          identity,
      ):
          for i in range(outlength):
              toptr[i] = identity
          for i in range(lenparents):
              x = fromptr[fromptroffset + i]
              toptr[parents[parentsoffset + i]] = (
                  x
                  if x > toptr[parents[parentsoffset + i]]
                  else toptr[parents[parentsoffset + i]]
              )


  - name: awkward_reduce_argmin
    specializations:
    - name: awkward_reduce_argmin_uint32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_uint16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_float32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_int8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_int32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_uint8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_uint64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_int16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmin_float64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_argmin(
          toptr,
          fromptr,
          fromptroffset,
          starts,
          startsoffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
      ):
          for i in range(outlength):
              toptr[i] = -1
          for i in range(lenparents):
              parent = parents[parentsoffset + i]
              start = starts[startsoffset + parent]
              if (toptr[parent] == -1) or (
                  fromptr[fromptroffset + i]
                  < fromptr[(fromptroffset + toptr[parent]) + start]
              ):
                  toptr[parent] = i - start


  - name: awkward_reduce_argmin_bool_64
    args:
      - toptr: List[int64_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - starts: List[int64_t]
      - startsoffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_argmin_bool_64(
          toptr,
          fromptr,
          fromptroffset,
          starts,
          startsoffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
      ):
          for i in range(outlength):
              toptr[i] = -1
          for i in range(lenparents):
              parent = parents[parentsoffset + i]
              start = starts[startsoffset + parent]
              if (toptr[parent] == -1) or (
                  (fromptr[fromptroffset + i] != 0)
                  < (fromptr[(fromptroffset + toptr[parent]) + start] != 0)
              ):
                  toptr[parent] = i - start


  - name: awkward_reduce_argmax
    specializations:
    - name: awkward_reduce_argmax_uint16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint16_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_int32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_uint32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint32_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_uint64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint64_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_int8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_float32_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[float]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_float64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[double]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_uint8_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint8_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_int64_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    - name: awkward_reduce_argmax_int16_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - fromptroffset: int64_t
        - starts: List[int64_t]
        - startsoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - lenparents: int64_t
        - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_argmax(
          toptr,
          fromptr,
          fromptroffset,
          starts,
          startsoffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
      ):
          for i in range(outlength):
              toptr[i] = -1
          for i in range(lenparents):
              parent = parents[parentsoffset + i]
              start = starts[startsoffset + parent]
              if (toptr[parent] == -1) or (
                  fromptr[fromptroffset + i]
                  > fromptr[(fromptroffset + toptr[parent]) + start]
              ):
                  toptr[parent] = i - start


  - name: awkward_reduce_argmax_bool_64
    args:
      - toptr: List[int64_t]
      - fromptr: List[bool]
      - fromptroffset: int64_t
      - starts: List[int64_t]
      - startsoffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_reduce_argmax_bool_64(
          toptr,
          fromptr,
          fromptroffset,
          starts,
          startsoffset,
          parents,
          parentsoffset,
          lenparents,
          outlength,
      ):
          for i in range(outlength):
              toptr[i] = -1
          for i in range(lenparents):
              parent = parents[parentsoffset + i]
              start = starts[startsoffset + parent]
              if (toptr[parent] == -1) or (
                  (fromptr[fromptroffset + i] != 0)
                  > (fromptr[(fromptroffset + toptr[parent]) + start] != 0)
              ):
                  toptr[parent] = i - start


  - name: awkward_content_reduce_zeroparents_64
    args:
      - toparents: List[int64_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_content_reduce_zeroparents_64(toparents, length):
          for i in range(length):
              toparents[i] = 0


  - name: awkward_ListOffsetArray_reduce_global_startstop_64
    args:
      - globalstart: List[int64_t]
      - globalstop: List[int64_t]
      - offsets: List[int64_t]
      - offsetsoffset: int64_t
      - length: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_global_startstop_64(
          globalstart, globalstop, offsets, offsetsoffset, length
      ):
          globalstart[0] = offsets[offsetsoffset + 0]
          globalstop[0] = offsets[offsetsoffset + length]


  - name: awkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64
    args:
      - maxcount: List[int64_t]
      - offsetscopy: List[int64_t]
      - offsets: List[int64_t]
      - offsetsoffset: int64_t
      - length: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64(
          maxcount, offsetscopy, offsets, offsetsoffset, length
      ):
          maxcount[0] = 0
          offsetscopy[0] = offsets[offsetsoffset + 0]
          for i in range(length):
              count = offsets[(offsetsoffset + i) + 1] - offsets[offsetsoffset + i]
              if maxcount[0] < count:
                  maxcount[0] = count
              offsetscopy[i + 1] = offsets[(offsetsoffset + i) + 1]


  - name: awkward_ListOffsetArray_reduce_nonlocal_preparenext_64
    args:
      - nextcarry: List[int64_t]
      - nextparents: List[int64_t]
      - nextlen: int64_t
      - maxnextparents: List[int64_t]
      - distincts: List[int64_t]
      - distinctslen: int64_t
      - offsetscopy: List[int64_t]
      - offsets: List[int64_t]
      - offsetsoffset: int64_t
      - length: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - maxcount: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_nonlocal_preparenext_64(
          nextcarry,
          nextparents,
          nextlen,
          maxnextparents,
          distincts,
          distinctslen,
          offsetscopy,
          offsets,
          offsetsoffset,
          length,
          parents,
          parentsoffset,
          maxcount,
      ):
          maxnextparents[0] = 0
          for i in range(distinctslen):
              distincts[i] = -1
          k = 0
          while k < nextlen:
              j = 0
              for i in range(length):
                  if offsetscopy[i] < offsets[(offsetsoffset + i) + 1]:
                      diff = offsetscopy[i] - offsets[offsetsoffset + i]
                      parent = parents[parentsoffset + i]
                      nextcarry[k] = offsetscopy[i]
                      nextparents[k] = (parent * maxcount) + diff
                      if maxnextparents[0] < nextparents[k]:
                          maxnextparents[0] = nextparents[k]
                      if distincts[nextparents[k]] == -1:
                          distincts[nextparents[k]] = j
                          j = j + 1
                      k = k + 1
                      offsetscopy[i] = offsetscopy[i] + 1


  - name: awkward_ListOffsetArray_reduce_nonlocal_nextstarts_64
    args:
      - nextstarts: List[int64_t]
      - nextparents: List[int64_t]
      - nextlen: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_nonlocal_nextstarts_64(
          nextstarts, nextparents, nextlen
      ):
          lastnextparent = -1
          for k in range(nextlen):
              if nextparents[k] != lastnextparent:
                  nextstarts[nextparents[k]] = k
              lastnextparent = nextparents[k]


  - name: awkward_ListOffsetArray_reduce_nonlocal_findgaps_64
    args:
      - gaps: List[int64_t]
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_nonlocal_findgaps_64(
          gaps, parents, parentsoffset, lenparents
      ):
          k = 0
          last = -1
          for i in range(lenparents):
              parent = parents[parentsoffset + i]
              if last < parent:
                  gaps[k] = parent - last
                  k = k + 1
                  last = parent


  - name: awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64
    args:
      - outstarts: List[int64_t]
      - outstops: List[int64_t]
      - distincts: List[int64_t]
      - lendistincts: int64_t
      - gaps: List[int64_t]
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64(
          outstarts, outstops, distincts, lendistincts, gaps, outlength
      ):
          j = 0
          k = 0
          maxdistinct = -1
          for i in range(lendistincts):
              if maxdistinct < distincts[i]:
                  maxdistinct = distincts[i]
                  for gappy in range(gaps[j]):
                      outstarts[k] = i
                      outstops[k] = i
                      k = k + 1
                  j = j + 1
              if distincts[i] != -1:
                  outstops[k - 1] = i + 1
          while k < outlength:
              outstarts[k] = lendistincts + 1
              outstops[k] = lendistincts + 1
              k = k + 1


  - name: awkward_ListOffsetArray_reduce_local_nextparents_64
    args:
      - nextparents: List[int64_t]
      - offsets: List[int64_t]
      - offsetsoffset: int64_t
      - length: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_local_nextparents_64(
          nextparents, offsets, offsetsoffset, length
      ):
          initialoffset = offsets[offsetsoffset]
          for i in range(length):
              j = offsets[offsetsoffset + i] - initialoffset
              while j < (offsets[(offsetsoffset + i) + 1] - initialoffset):
                  nextparents[j] = i
                  j = j + 1


  - name: awkward_ListOffsetArray_reduce_local_outoffsets_64
    args:
      - outoffsets: List[int64_t]
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_reduce_local_outoffsets_64(
          outoffsets, parents, parentsoffset, lenparents, outlength
      ):
          k = 0
          last = -1
          for i in range(lenparents):
              while last < parents[parentsoffset + i]:
                  outoffsets[k] = i
                  k = k + 1
                  last = last + 1
      
          while k <= outlength:
              outoffsets[k] = lenparents
              k = k + 1


  - name: awkward_IndexedArray_reduce_next_64
    specializations:
    - name: awkward_IndexedArray64_reduce_next_64
      args:
        - nextcarry: List[int64_t]
        - nextparents: List[int64_t]
        - outindex: List[int64_t]
        - index: List[int64_t]
        - indexoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArrayU32_reduce_next_64
      args:
        - nextcarry: List[int64_t]
        - nextparents: List[int64_t]
        - outindex: List[int64_t]
        - index: List[uint32_t]
        - indexoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - length: int64_t
    - name: awkward_IndexedArray32_reduce_next_64
      args:
        - nextcarry: List[int64_t]
        - nextparents: List[int64_t]
        - outindex: List[int64_t]
        - index: List[int32_t]
        - indexoffset: int64_t
        - parents: List[int64_t]
        - parentsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_reduce_next_64(
          nextcarry, nextparents, outindex, index, indexoffset, parents, parentsoffset, length
      ):
          k = 0
          for i in range(length):
              if index[indexoffset + i] >= 0:
                  nextcarry[k] = index[indexoffset + i]
                  nextparents[k] = parents[parentsoffset + i]
                  outindex[i] = k
                  k = k + 1
              else:
                  outindex[i] = -1


  - name: awkward_IndexedArray_reduce_next_fix_offsets_64
    args:
      - outoffsets: List[int64_t]
      - starts: List[int64_t]
      - startsoffset: int64_t
      - startslength: int64_t
      - outindexlength: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_reduce_next_fix_offsets_64(
          outoffsets, starts, startsoffset, startslength, outindexlength
      ):
          for i in range(startslength):
              outoffsets[i] = starts[startsoffset + i]
          outoffsets[startsoffset + startslength] = outindexlength


  - name: awkward_NumpyArray_reduce_mask_ByteMaskedArray_64
    args:
      - toptr: List[int8_t]
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - lenparents: int64_t
      - outlength: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_reduce_mask_ByteMaskedArray_64(
          toptr, parents, parentsoffset, lenparents, outlength
      ):
          for i in range(outlength):
              toptr[i] = 1
          for i in range(lenparents):
              toptr[parents[parentsoffset + i]] = 0


  - name: awkward_ByteMaskedArray_reduce_next_64
    args:
      - nextcarry: List[int64_t]
      - nextparents: List[int64_t]
      - outindex: List[int64_t]
      - mask: List[int8_t]
      - maskoffset: int64_t
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - length: int64_t
      - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_reduce_next_64(
          nextcarry,
          nextparents,
          outindex,
          mask,
          maskoffset,
          parents,
          parentsoffset,
          length,
          validwhen,
      ):
          k = 0
          for i in range(length):
              if (mask[maskoffset + i] != 0) == validwhen:
                  nextcarry[k] = i
                  nextparents[k] = parents[parentsoffset + i]
                  outindex[i] = k
                  k = k + 1
              else:
                  outindex[i] = -1


  - name: awkward_regularize_rangeslice
    args:
      - start: List[int64_t]
      - stop: List[int64_t]
      - posstep: bool
      - hasstart: bool
      - hasstop: bool
      - length: int64_t
    fail: False
    specification: |
      def awkward_regularize_rangeslice(start, stop, posstep, hasstart, hasstop, length):
          if posstep:
              if not (hasstart):
                  start[0] = 0
              else:
                  if start[0] < 0:
                      start[0] += length
              if start[0] < 0:
                  start[0] = 0
              if start[0] > length:
                  start[0] = length
              if not (hasstop):
                  stop[0] = length
              else:
                  if stop[0] < 0:
                      stop[0] += length
              if stop[0] < 0:
                  stop[0] = 0
              if stop[0] > length:
                  stop[0] = length
              if stop[0] < start[0]:
                  stop[0] = start[0]
          else:
              if not (hasstart):
                  start[0] = length - 1
              else:
                  if start[0] < 0:
                      start[0] += length
              if start[0] < -1:
                  start[0] = -1
              if start[0] > (length - 1):
                  start[0] = length - 1
              if not (hasstop):
                  stop[0] = -1
              else:
                  if stop[0] < 0:
                      stop[0] += length
              if stop[0] < -1:
                  stop[0] = -1
              if stop[0] > (length - 1):
                  stop[0] = length - 1
              if stop[0] > start[0]:
                  stop[0] = start[0]


  - name: awkward_regularize_arrayslice
    specializations:
    - name: awkward_regularize_arrayslice_64
      args:
        - flatheadptr: List[int64_t]
        - lenflathead: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_regularize_arrayslice(flatheadptr, lenflathead, length):
          for i in range(lenflathead):
              original = flatheadptr[i]
              if flatheadptr[i] < 0:
                  flatheadptr[i] += length
              if (flatheadptr[i] < 0) or (flatheadptr[i] >= length):
                  raise ValueError("index out of range")


  - name: awkward_Index8_to_Index64
    args:
      - toptr: List[int64_t]
      - fromptr: List[int8_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_Index8_to_Index64(toptr, fromptr, length):
          for i in range(length):
              toptr[i] = int(fromptr[i])


  - name: awkward_IndexU8_to_Index64
    args:
      - toptr: List[int64_t]
      - fromptr: List[uint8_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_IndexU8_to_Index64(toptr, fromptr, length):
          for i in range(length):
              toptr[i] = int(fromptr[i])


  - name: awkward_Index32_to_Index64
    args:
      - toptr: List[int64_t]
      - fromptr: List[int32_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_Index32_to_Index64(toptr, fromptr, length):
          for i in range(length):
              toptr[i] = int(fromptr[i])


  - name: awkward_IndexU32_to_Index64
    args:
      - toptr: List[int64_t]
      - fromptr: List[uint32_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_IndexU32_to_Index64(toptr, fromptr, length):
          for i in range(length):
              toptr[i] = int(fromptr[i])


  - name: awkward_index_carry
    specializations:
    - name: awkward_Index64_carry_64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - lenfromindex: int64_t
        - length: int64_t
    - name: awkward_Index32_carry_64
      args:
        - toindex: List[int32_t]
        - fromindex: List[int32_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - lenfromindex: int64_t
        - length: int64_t
    - name: awkward_IndexU8_carry_64
      args:
        - toindex: List[uint8_t]
        - fromindex: List[uint8_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - lenfromindex: int64_t
        - length: int64_t
    - name: awkward_Index8_carry_64
      args:
        - toindex: List[int8_t]
        - fromindex: List[int8_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - lenfromindex: int64_t
        - length: int64_t
    - name: awkward_IndexU32_carry_64
      args:
        - toindex: List[uint32_t]
        - fromindex: List[uint32_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - lenfromindex: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_index_carry(
          toindex, fromindex, carry, fromindexoffset, lenfromindex, length
      ):
          for i in range(length):
              j = carry[i]
              if j > lenfromindex:
                  raise ValueError("index out of range")
              toindex[i] = fromindex[fromindexoffset + j]


  - name: awkward_index_carry_nocheck
    specializations:
    - name: awkward_Index64_carry_nocheck_64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_Index32_carry_nocheck_64
      args:
        - toindex: List[int32_t]
        - fromindex: List[int32_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexU8_carry_nocheck_64
      args:
        - toindex: List[uint8_t]
        - fromindex: List[uint8_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_Index8_carry_nocheck_64
      args:
        - toindex: List[int8_t]
        - fromindex: List[int8_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    - name: awkward_IndexU32_carry_nocheck_64
      args:
        - toindex: List[uint32_t]
        - fromindex: List[uint32_t]
        - carry: List[int64_t]
        - fromindexoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_index_carry_nocheck(toindex, fromindex, carry, fromindexoffset, length):
          for i in range(length):
              toindex[i] = fromindex[fromindexoffset + carry[i]]


  - name: awkward_slicearray_ravel
    specializations:
    - name: awkward_slicearray_ravel_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - ndim: int64_t
        - shape: List[int64_t]
        - strides: List[int64_t]
    fail: False
    specification: |
      def awkward_slicearray_ravel(toptr, fromptr, ndim, shape, strides):
          if ndim == 1:
              for i in range(shape[0]):
                  toptr[i] = fromptr[i * strides[0]]
          else:
              for i in range(shape[0]):
                  err = awkward_slicearray_ravel(
                      toptr[i * shape[1]],
                      fromptr[i * strides[0]],
                      ndim - 1,
                      shape[1],
                      strides[1],
                  )
                  if err.str != nullptr:
                      return err


  - name: awkward_slicemissing_check_same
    args:
      - same: List[bool]
      - bytemask: List[int8_t]
      - bytemaskoffset: int64_t
      - missingindex: List[int64_t]
      - missingindexoffset: int64_t
      - length: int64_t
    fail: False
    specification: |
      def awkward_slicemissing_check_same(
          same, bytemask, bytemaskoffset, missingindex, missingindexoffset, length
      ):
          same[0] = True
          for i in range(length):
              left = bytemask[bytemaskoffset + i] != 0
              right = missingindex[missingindexoffset + i] < 0
              if left != right:
                  same[0] = False
                  return


  - name: awkward_carry_arange
    specializations:
    - name: awkward_carry_arangeU32
      args:
        - toptr: List[uint32_t]
        - length: int64_t
    - name: awkward_carry_arange32
      args:
        - toptr: List[int32_t]
        - length: int64_t
    - name: awkward_carry_arange64
      args:
        - toptr: List[int64_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_carry_arange(toptr, length):
          for i in range(length):
              toptr[i] = i


  - name: awkward_Identities_getitem_carry
    specializations:
    - name: awkward_Identities32_getitem_carry_64
      args:
        - newidentitiesptr: List[int32_t]
        - identitiesptr: List[int32_t]
        - carryptr: List[int64_t]
        - lencarry: int64_t
        - offset: int64_t
        - width: int64_t
        - length: int64_t
    - name: awkward_Identities64_getitem_carry_64
      args:
        - newidentitiesptr: List[int64_t]
        - identitiesptr: List[int64_t]
        - carryptr: List[int64_t]
        - lencarry: int64_t
        - offset: int64_t
        - width: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_Identities_getitem_carry(
          newidentitiesptr, identitiesptr, carryptr, lencarry, offset, width, length
      ):
          for i in range(lencarry):
              if carryptr[i] >= length:
                  raise ValueError("index out of range")
              for j in range(width):
                  newidentitiesptr[(width * i) + j] = identitiesptr[
                      (offset + (width * carryptr[i])) + j
                  ]


  - name: awkward_NumpyArray_contiguous_init
    specializations:
    - name: awkward_NumpyArray_contiguous_init_64
      args:
        - toptr: List[int64_t]
        - skip: int64_t
        - stride: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_contiguous_init(toptr, skip, stride):
          for i in range(skip):
              toptr[i] = i * stride


  - name: awkward_NumpyArray_contiguous_copy
    specializations:
    - name: awkward_NumpyArray_contiguous_copy_64
      args:
        - toptr: List[uint8_t]
        - fromptr: List[uint8_t]
        - len: int64_t
        - stride: int64_t
        - offset: int64_t
        - pos: List[int64_t]
    fail: False
    specification: |
      def awkward_NumpyArray_contiguous_copy(toptr, fromptr, len, stride, offset, pos):
          for i in range(len):
              toptr[i * stride : i * stride + stride] = fromptr[
                  offset + int(pos[i]) : offset + int(pos[i]) + stride
              ]


  - name: awkward_NumpyArray_contiguous_next
    specializations:
    - name: awkward_NumpyArray_contiguous_next_64
      args:
        - topos: List[int64_t]
        - frompos: List[int64_t]
        - len: int64_t
        - skip: int64_t
        - stride: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_contiguous_next(topos, frompos, len, skip, stride):
          for i in range(len):
              for j in range(skip):
                  topos[(i * skip) + j] = frompos[i] + (j * stride)


  - name: awkward_NumpyArray_getitem_next_null
    specializations:
    - name: awkward_NumpyArray_getitem_next_null_64
      args:
        - toptr: List[uint8_t]
        - fromptr: List[uint8_t]
        - len: int64_t
        - stride: int64_t
        - offset: int64_t
        - pos: List[int64_t]
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_null(toptr, fromptr, len, stride, offset, pos):
          for i in range(len):
              toptr[i * stride : i * stride + stride] = fromptr[
                  offset + (pos[i] * stride) : offset + (pos[i] * stride) + stride
              ]


  - name: awkward_NumpyArray_getitem_next_at
    specializations:
    - name: awkward_NumpyArray_getitem_next_at_64
      args:
        - nextcarryptr: List[int64_t]
        - carryptr: List[int64_t]
        - lencarry: int64_t
        - skip: int64_t
        - at: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_at(nextcarryptr, carryptr, lencarry, skip, at):
          for i in range(lencarry):
              nextcarryptr[i] = (skip * carryptr[i]) + at


  - name: awkward_NumpyArray_getitem_next_range
    specializations:
    - name: awkward_NumpyArray_getitem_next_range_64
      args:
        - nextcarryptr: List[int64_t]
        - carryptr: List[int64_t]
        - lencarry: int64_t
        - lenhead: int64_t
        - skip: int64_t
        - start: int64_t
        - step: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_range(
          nextcarryptr, carryptr, lencarry, lenhead, skip, start, step
      ):
          for i in range(lencarry):
              for j in range(lenhead):
                  nextcarryptr[(i * lenhead) + j] = ((skip * carryptr[i]) + start) + (
                      j * step
                  )


  - name: awkward_NumpyArray_getitem_next_range_advanced
    specializations:
    - name: awkward_NumpyArray_getitem_next_range_advanced_64
      args:
        - nextcarryptr: List[int64_t]
        - nextadvancedptr: List[int64_t]
        - carryptr: List[int64_t]
        - advancedptr: List[int64_t]
        - lencarry: int64_t
        - lenhead: int64_t
        - skip: int64_t
        - start: int64_t
        - step: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_range_advanced(
          nextcarryptr,
          nextadvancedptr,
          carryptr,
          advancedptr,
          lencarry,
          lenhead,
          skip,
          start,
          step,
      ):
          for i in range(lencarry):
              for j in range(lenhead):
                  nextcarryptr[(i * lenhead) + j] = ((skip * carryptr[i]) + start) + (
                      j * step
                  )
                  nextadvancedptr[(i * lenhead) + j] = advancedptr[i]


  - name: awkward_NumpyArray_getitem_next_array
    specializations:
    - name: awkward_NumpyArray_getitem_next_array_64
      args:
        - nextcarryptr: List[int64_t]
        - nextadvancedptr: List[int64_t]
        - carryptr: List[int64_t]
        - flatheadptr: List[int64_t]
        - lencarry: int64_t
        - lenflathead: int64_t
        - skip: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_array(
          nextcarryptr, nextadvancedptr, carryptr, flatheadptr, lencarry, lenflathead, skip
      ):
          for i in range(lencarry):
              for j in range(lenflathead):
                  nextcarryptr[(i * lenflathead) + j] = (skip * carryptr[i]) + flatheadptr[j]
                  nextadvancedptr[(i * lenflathead) + j] = j


  - name: awkward_NumpyArray_getitem_next_array_advanced
    specializations:
    - name: awkward_NumpyArray_getitem_next_array_advanced_64
      args:
        - nextcarryptr: List[int64_t]
        - carryptr: List[int64_t]
        - advancedptr: List[int64_t]
        - flatheadptr: List[int64_t]
        - lencarry: int64_t
        - skip: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_next_array_advanced(
          nextcarryptr, carryptr, advancedptr, flatheadptr, lencarry, skip
      ):
          for i in range(lencarry):
              nextcarryptr[i] = (skip * carryptr[i]) + flatheadptr[advancedptr[i]]


  - name: awkward_NumpyArray_getitem_boolean_numtrue
    args:
      - numtrue: List[int64_t]
      - fromptr: List[int8_t]
      - byteoffset: int64_t
      - length: int64_t
      - stride: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_boolean_numtrue(
          numtrue, fromptr, byteoffset, length, stride
      ):
          numtrue[0] = 0
          i = 0
          while i < length:
              numtrue[0] = numtrue[0] + (fromptr[byteoffset + i] != 0)
              i += stride


  - name: awkward_NumpyArray_getitem_boolean_nonzero
    specializations:
    - name: awkward_NumpyArray_getitem_boolean_nonzero_64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - byteoffset: int64_t
        - length: int64_t
        - stride: int64_t
    fail: False
    specification: |
      def awkward_NumpyArray_getitem_boolean_nonzero(
          toptr, fromptr, byteoffset, length, stride
      ):
          k = 0
          i = 0
          while i < length:
              if fromptr[byteoffset + i] != 0:
                  toptr[k] = i
                  k = k + 1
              i += stride


  - name: awkward_ListArray_getitem_next_at
    specializations:
    - name: awkward_ListArray32_getitem_next_at_64
      args:
        - tocarry: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - at: int64_t
    - name: awkward_ListArray64_getitem_next_at_64
      args:
        - tocarry: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - at: int64_t
    - name: awkward_ListArrayU32_getitem_next_at_64
      args:
        - tocarry: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - at: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_at(
          tocarry, fromstarts, fromstops, lenstarts, startsoffset, stopsoffset, at
      ):
          for i in range(lenstarts):
              length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              regular_at = at
              if regular_at < 0:
                  regular_at += length
              if not ((0 <= regular_at) and (regular_at < length)):
                  raise ValueError("index out of range")
              tocarry[i] = fromstarts[startsoffset + i] + regular_at


  - name: awkward_ListArray_getitem_next_range_carrylength
    specializations:
    - name: awkward_ListArrayU32_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray32_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray64_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_range_carrylength(
          carrylength,
          fromstarts,
          fromstops,
          lenstarts,
          startsoffset,
          stopsoffset,
          start,
          stop,
          step,
      ):
          carrylength[0] = 0
          for i in range(lenstarts):
              length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              regular_start = start
              regular_stop = stop
              awkward_regularize_rangeslice(
                  regular_start,
                  regular_stop,
                  step > 0,
                  start != kSliceNone,
                  stop != kSliceNone,
                  length,
              )
              if step > 0:
                  j = regular_start
                  while j < regular_stop:
                      carrylength[0] = carrylength[0] + 1
                      j += step
              else:
                  j = regular_start
                  while j > regular_stop:
                      carrylength[0] = carrylength[0] + 1
                      j += step


  - name: awkward_ListArray_getitem_next_range
    specializations:
    - name: awkward_ListArrayU32_getitem_next_range_64
      args:
        - tooffsets: List[uint32_t]
        - tocarry: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray64_getitem_next_range_64
      args:
        - tooffsets: List[int64_t]
        - tocarry: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray32_getitem_next_range_64
      args:
        - tooffsets: List[int32_t]
        - tocarry: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_range(
          tooffsets,
          tocarry,
          fromstarts,
          fromstops,
          lenstarts,
          startsoffset,
          stopsoffset,
          start,
          stop,
          step,
      ):
          k = 0
          tooffsets[0] = 0
          if step > 0:
              for i in range(lenstarts):
                  length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
                  regular_start = start
                  regular_stop = stop
                  awkward_regularize_rangeslice(
                      regular_start,
                      regular_stop,
                      step > 0,
                      start != kSliceNone,
                      stop != kSliceNone,
                      length,
                  )
                  j = regular_start
                  while j < regular_stop:
                      tocarry[k] = fromstarts[startsoffset + i] + j
                      k = k + 1
                      j += step
                  tooffsets[i + 1] = float(k)
          else:
              for i in range(lenstarts):
                  length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
                  regular_start = start
                  regular_stop = stop
                  awkward_regularize_rangeslice(
                      regular_start,
                      regular_stop,
                      step > 0,
                      start != kSliceNone,
                      stop != kSliceNone,
                      length,
                  )
                  j = regular_start
                  while j > regular_stop:
                      tocarry[k] = fromstarts[startsoffset + i] + j
                      k = k + 1
                      j += step
                  tooffsets[i + 1] = float(k)


  - name: awkward_ListArray_getitem_next_range_counts
    specializations:
    - name: awkward_ListArray64_getitem_next_range_counts_64
      args:
        - total: List[int64_t]
        - fromoffsets: List[int64_t]
        - lenstarts: int64_t
    - name: awkward_ListArray32_getitem_next_range_counts_64
      args:
        - total: List[int64_t]
        - fromoffsets: List[int32_t]
        - lenstarts: int64_t
    - name: awkward_ListArrayU32_getitem_next_range_counts_64
      args:
        - total: List[int64_t]
        - fromoffsets: List[uint32_t]
        - lenstarts: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_range_counts(total, fromoffsets, lenstarts):
          total[0] = 0
          for i in range(lenstarts):
              total[0] = (total[0] + fromoffsets[i + 1]) - fromoffsets[i]


  - name: awkward_ListArray_getitem_next_range_spreadadvanced
    specializations:
    - name: awkward_ListArray64_getitem_next_range_spreadadvanced_64
      args:
        - toadvanced: List[int64_t]
        - fromadvanced: List[int64_t]
        - fromoffsets: List[int64_t]
        - lenstarts: int64_t
    - name: awkward_ListArray32_getitem_next_range_spreadadvanced_64
      args:
        - toadvanced: List[int64_t]
        - fromadvanced: List[int64_t]
        - fromoffsets: List[int32_t]
        - lenstarts: int64_t
    - name: awkward_ListArrayU32_getitem_next_range_spreadadvanced_64
      args:
        - toadvanced: List[int64_t]
        - fromadvanced: List[int64_t]
        - fromoffsets: List[uint32_t]
        - lenstarts: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_range_spreadadvanced(
          toadvanced, fromadvanced, fromoffsets, lenstarts
      ):
          for i in range(lenstarts):
              count = fromoffsets[i + 1] - fromoffsets[i]
              for j in range(count):
                  toadvanced[fromoffsets[i] + j] = fromadvanced[i]


  - name: awkward_ListArray_getitem_next_array
    specializations:
    - name: awkward_ListArray32_getitem_next_array_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - fromarray: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    - name: awkward_ListArrayU32_getitem_next_array_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - fromarray: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_getitem_next_array_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - fromarray: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_array(
          tocarry,
          toadvanced,
          fromstarts,
          fromstops,
          fromarray,
          startsoffset,
          stopsoffset,
          lenstarts,
          lenarray,
          lencontent,
      ):
          for i in range(lenstarts):
              if fromstops[stopsoffset + i] < fromstarts[startsoffset + i]:
                  raise ValueError("stops[i] < starts[i]")
              if (fromstarts[startsoffset + i] != fromstops[stopsoffset + i]) and (
                  fromstops[stopsoffset + i] > lencontent
              ):
                  raise ValueError("stops[i] > len(content)")
              length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              for j in range(lenarray):
                  regular_at = fromarray[j]
                  if regular_at < 0:
                      regular_at += length
                  if not ((0 <= regular_at) and (regular_at < length)):
                      raise ValueError("index out of range")
                  tocarry[(i * lenarray) + j] = fromstarts[startsoffset + i] + regular_at
                  toadvanced[(i * lenarray) + j] = j


  - name: awkward_ListArray_getitem_next_array_advanced
    specializations:
    - name: awkward_ListArrayU32_getitem_next_array_advanced_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - fromarray: List[int64_t]
        - fromadvanced: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray32_getitem_next_array_advanced_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - fromarray: List[int64_t]
        - fromadvanced: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_getitem_next_array_advanced_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - fromarray: List[int64_t]
        - fromadvanced: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lenarray: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_next_array_advanced(
          tocarry,
          toadvanced,
          fromstarts,
          fromstops,
          fromarray,
          fromadvanced,
          startsoffset,
          stopsoffset,
          lenstarts,
          lenarray,
          lencontent,
      ):
          for i in range(lenstarts):
              if fromstops[stopsoffset + i] < fromstarts[startsoffset + i]:
                  raise ValueError("stops[i] < starts[i]")
              if (fromstarts[startsoffset + i] != fromstops[stopsoffset + i]) and (
                  fromstops[stopsoffset + i] > lencontent
              ):
                  raise ValueError("stops[i] > len(content)")
              length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
              regular_at = fromarray[fromadvanced[i]]
              if regular_at < 0:
                  regular_at += length
              if not ((0 <= regular_at) and (regular_at < length)):
                  raise ValueError("index out of range")
              tocarry[i] = fromstarts[startsoffset + i] + regular_at
              toadvanced[i] = i


  - name: awkward_ListArray_getitem_carry
    specializations:
    - name: awkward_ListArray64_getitem_carry_64
      args:
        - tostarts: List[int64_t]
        - tostops: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - fromcarry: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lencarry: int64_t
    - name: awkward_ListArrayU32_getitem_carry_64
      args:
        - tostarts: List[uint32_t]
        - tostops: List[uint32_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - fromcarry: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lencarry: int64_t
    - name: awkward_ListArray32_getitem_carry_64
      args:
        - tostarts: List[int32_t]
        - tostops: List[int32_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - fromcarry: List[int64_t]
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - lenstarts: int64_t
        - lencarry: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_carry(
          tostarts,
          tostops,
          fromstarts,
          fromstops,
          fromcarry,
          startsoffset,
          stopsoffset,
          lenstarts,
          lencarry,
      ):
          for i in range(lencarry):
              if fromcarry[i] >= lenstarts:
                  raise ValueError("index out of range")
              tostarts[i] = float(fromstarts[startsoffset + fromcarry[i]])
              tostops[i] = float(fromstops[stopsoffset + fromcarry[i]])


  - name: awkward_RegularArray_getitem_next_at
    specializations:
    - name: awkward_RegularArray_getitem_next_at_64
      args:
        - tocarry: List[int64_t]
        - at: int64_t
        - len: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_at(tocarry, at, len, size):
          regular_at = at
          if regular_at < 0:
              regular_at += size
          if not ((0 <= regular_at) and (regular_at < size)):
              raise ValueError("index out of range")
          for i in range(len):
              tocarry[i] = (i * size) + regular_at


  - name: awkward_RegularArray_getitem_next_range
    specializations:
    - name: awkward_RegularArray_getitem_next_range_64
      args:
        - tocarry: List[int64_t]
        - regular_start: int64_t
        - step: int64_t
        - len: int64_t
        - size: int64_t
        - nextsize: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_range(
          tocarry, regular_start, step, len, size, nextsize
      ):
          for i in range(len):
              for j in range(nextsize):
                  tocarry[(i * nextsize) + j] = ((i * size) + regular_start) + (j * step)


  - name: awkward_RegularArray_getitem_next_range_spreadadvanced
    specializations:
    - name: awkward_RegularArray_getitem_next_range_spreadadvanced_64
      args:
        - toadvanced: List[int64_t]
        - fromadvanced: List[int64_t]
        - len: int64_t
        - nextsize: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_range_spreadadvanced(
          toadvanced, fromadvanced, len, nextsize
      ):
          for i in range(len):
              for j in range(nextsize):
                  toadvanced[(i * nextsize) + j] = fromadvanced[i]


  - name: awkward_RegularArray_getitem_next_array_regularize
    specializations:
    - name: awkward_RegularArray_getitem_next_array_regularize_64
      args:
        - toarray: List[int64_t]
        - fromarray: List[int64_t]
        - lenarray: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_array_regularize(
          toarray, fromarray, lenarray, size
      ):
          for j in range(lenarray):
              toarray[j] = fromarray[j]
              if toarray[j] < 0:
                  toarray[j] += size
              if not ((0 <= toarray[j]) and (toarray[j] < size)):
                  raise ValueError("index out of range")


  - name: awkward_RegularArray_getitem_next_array
    specializations:
    - name: awkward_RegularArray_getitem_next_array_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromarray: List[int64_t]
        - len: int64_t
        - lenarray: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_array(
          tocarry, toadvanced, fromarray, len, lenarray, size
      ):
          for i in range(len):
              for j in range(lenarray):
                  tocarry[(i * lenarray) + j] = (i * size) + fromarray[j]
                  toadvanced[(i * lenarray) + j] = j


  - name: awkward_RegularArray_getitem_next_array_advanced
    specializations:
    - name: awkward_RegularArray_getitem_next_array_advanced_64
      args:
        - tocarry: List[int64_t]
        - toadvanced: List[int64_t]
        - fromadvanced: List[int64_t]
        - fromarray: List[int64_t]
        - len: int64_t
        - lenarray: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_next_array_advanced(
          tocarry, toadvanced, fromadvanced, fromarray, len, lenarray, size
      ):
          for i in range(len):
              tocarry[i] = (i * size) + fromarray[fromadvanced[i]]
              toadvanced[i] = i


  - name: awkward_RegularArray_getitem_carry
    specializations:
    - name: awkward_RegularArray_getitem_carry_64
      args:
        - tocarry: List[int64_t]
        - fromcarry: List[int64_t]
        - lencarry: int64_t
        - size: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_carry(tocarry, fromcarry, lencarry, size):
          for i in range(lencarry):
              for j in range(size):
                  tocarry[(i * size) + j] = (fromcarry[i] * size) + j


  - name: awkward_IndexedArray_numnull
    specializations:
    - name: awkward_IndexedArray64_numnull
      args:
        - numnull: List[int64_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
    - name: awkward_IndexedArrayU32_numnull
      args:
        - numnull: List[int64_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
    - name: awkward_IndexedArray32_numnull
      args:
        - numnull: List[int64_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_numnull(numnull, fromindex, indexoffset, lenindex):
          numnull[0] = 0
          for i in range(lenindex):
              if fromindex[indexoffset + i] < 0:
                  numnull[0] = numnull[0] + 1


  - name: awkward_IndexedArray_getitem_nextcarry_outindex
    specializations:
    - name: awkward_IndexedArray32_getitem_nextcarry_outindex_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[int32_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[uint32_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArray64_getitem_nextcarry_outindex_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_getitem_nextcarry_outindex(
          tocarry, toindex, fromindex, indexoffset, lenindex, lencontent
      ):
          k = 0
          for i in range(lenindex):
              j = fromindex[indexoffset + i]
              if j >= lencontent:
                  raise ValueError("index out of range")
              else:
                  if j < 0:
                      toindex[i] = -1
                  else:
                      tocarry[k] = j
                      toindex[i] = float(k)
                      k = k + 1


  - name: awkward_IndexedArray_getitem_nextcarry_outindex_mask
    specializations:
    - name: awkward_IndexedArray64_getitem_nextcarry_outindex_mask_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArray32_getitem_nextcarry_outindex_mask_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[int64_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArrayU32_getitem_nextcarry_outindex_mask_64
      args:
        - tocarry: List[int64_t]
        - toindex: List[int64_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_getitem_nextcarry_outindex_mask(
          tocarry, toindex, fromindex, indexoffset, lenindex, lencontent
      ):
          k = 0
          for i in range(lenindex):
              j = fromindex[indexoffset + i]
              if j >= lencontent:
                  raise ValueError("index out of range")
              else:
                  if j < 0:
                      toindex[i] = -1
                  else:
                      tocarry[k] = j
                      toindex[i] = float(k)
                      k = k + 1


  - name: awkward_ListOffsetArray_getitem_adjust_offsets
    specializations:
    - name: awkward_ListOffsetArray_getitem_adjust_offsets_64
      args:
        - tooffsets: List[int64_t]
        - tononzero: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - length: int64_t
        - nonzero: List[int64_t]
        - nonzerooffset: int64_t
        - nonzerolength: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_getitem_adjust_offsets(
          tooffsets,
          tononzero,
          fromoffsets,
          offsetsoffset,
          length,
          nonzero,
          nonzerooffset,
          nonzerolength,
      ):
          j = 0
          tooffsets[0] = fromoffsets[offsetsoffset + 0]
          for i in range(length):
              slicestart = fromoffsets[offsetsoffset + i]
              slicestop = fromoffsets[(offsetsoffset + i) + 1]
              count = 0
              while (j < nonzerolength) and (nonzero[nonzerooffset + j] < slicestop):
                  tononzero[j] = nonzero[nonzerooffset + j] - slicestart
                  j = j + 1
                  count = count + 1
      
              tooffsets[i + 1] = tooffsets[i] + count


  - name: awkward_ListOffsetArray_getitem_adjust_offsets_index
    specializations:
    - name: awkward_ListOffsetArray_getitem_adjust_offsets_index_64
      args:
        - tooffsets: List[int64_t]
        - tononzero: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - length: int64_t
        - index: List[int64_t]
        - indexoffset: int64_t
        - indexlength: int64_t
        - nonzero: List[int64_t]
        - nonzerooffset: int64_t
        - nonzerolength: int64_t
        - originalmask: List[int8_t]
        - maskoffset: int64_t
        - masklength: int64_t
    fail: False
    specification: |
      def awkward_ListOffsetArray_getitem_adjust_offsets_index(
          tooffsets,
          tononzero,
          fromoffsets,
          offsetsoffset,
          length,
          index,
          indexoffset,
          indexlength,
          nonzero,
          nonzerooffset,
          nonzerolength,
          originalmask,
          maskoffset,
          masklength,
      ):
          k = 0
          tooffsets[0] = fromoffsets[offsetsoffset + 0]
          for i in range(length):
              slicestart = fromoffsets[offsetsoffset + i]
              slicestop = fromoffsets[(offsetsoffset + i) + 1]
              numnull = 0
              for j in range(slicestart, slicestop):
                  numnull += 1 if originalmask[maskoffset + j] != 0 else 0
              nullcount = 0
              count = 0
              while (k < indexlength) and (
                  ((index[indexoffset + k] < 0) and (nullcount < numnull))
                  or (
                      (
                          (index[indexoffset + k] >= 0)
                          and (index[indexoffset + k] < nonzerolength)
                      )
                      and (nonzero[nonzerooffset + index[indexoffset + k]] < slicestop)
                  )
              ):
                  if index[indexoffset + k] < 0:
                      nullcount = nullcount + 1
                  else:
                      j = index[indexoffset + k]
                      tononzero[j] = nonzero[nonzerooffset + j] - slicestart
                  k = k + 1
                  count = count + 1
      
              tooffsets[i + 1] = tooffsets[i] + count


  - name: awkward_IndexedArray_getitem_adjust_outindex
    specializations:
    - name: awkward_IndexedArray_getitem_adjust_outindex_64
      args:
        - tomask: List[int8_t]
        - toindex: List[int64_t]
        - tononzero: List[int64_t]
        - fromindex: List[int64_t]
        - fromindexoffset: int64_t
        - fromindexlength: int64_t
        - nonzero: List[int64_t]
        - nonzerooffset: int64_t
        - nonzerolength: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_getitem_adjust_outindex(
          tomask,
          toindex,
          tononzero,
          fromindex,
          fromindexoffset,
          fromindexlength,
          nonzero,
          nonzerooffset,
          nonzerolength,
      ):
          j = 0
          k = 0
          for i in range(fromindexlength):
              fromval = fromindex[fromindexoffset + i]
              tomask[i] = fromval < 0
              if fromval < 0:
                  toindex[k] = -1
                  k = k + 1
              else:
                  if (j < nonzerolength) and (fromval == nonzero[nonzerooffset + j]):
                      tononzero[j] = fromval + (k - j)
                      toindex[k] = j
                      j = j + 1
                      k = k + 1


  - name: awkward_IndexedArray_getitem_nextcarry
    specializations:
    - name: awkward_IndexedArrayU32_getitem_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArray64_getitem_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    - name: awkward_IndexedArray32_getitem_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencontent: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_getitem_nextcarry(
          tocarry, fromindex, indexoffset, lenindex, lencontent
      ):
          k = 0
          for i in range(lenindex):
              j = fromindex[indexoffset + i]
              if (j < 0) or (j >= lencontent):
                  raise ValueError("index out of range")
              else:
                  tocarry[k] = j
                  k = k + 1


  - name: awkward_IndexedArray_getitem_carry
    specializations:
    - name: awkward_IndexedArray32_getitem_carry_64
      args:
        - toindex: List[int32_t]
        - fromindex: List[int32_t]
        - fromcarry: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencarry: int64_t
    - name: awkward_IndexedArray64_getitem_carry_64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - fromcarry: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencarry: int64_t
    - name: awkward_IndexedArrayU32_getitem_carry_64
      args:
        - toindex: List[uint32_t]
        - fromindex: List[uint32_t]
        - fromcarry: List[int64_t]
        - indexoffset: int64_t
        - lenindex: int64_t
        - lencarry: int64_t
    fail: False
    specification: |
      def awkward_IndexedArray_getitem_carry(
          toindex, fromindex, fromcarry, indexoffset, lenindex, lencarry
      ):
          for i in range(lencarry):
              if fromcarry[i] >= lenindex:
                  raise ValueError("index out of range")
              toindex[i] = float(fromindex[indexoffset + fromcarry[i]])


  - name: awkward_UnionArray_regular_index_getsize
    specializations:
    - name: awkward_UnionArray8_regular_index_getsize
      args:
        - size: List[int64_t]
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_regular_index_getsize(size, fromtags, tagsoffset, length):
          size[0] = 0
          for i in range(length):
              tag = int(fromtags[tagsoffset + i])
              if size[0] < tag:
                  size[0] = tag
          size[0] = size[0] + 1


  - name: awkward_UnionArray_regular_index
    specializations:
    - name: awkward_UnionArray8_U32_regular_index
      args:
        - toindex: List[uint32_t]
        - current: List[uint32_t]
        - size: int64_t
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - length: int64_t
    - name: awkward_UnionArray8_64_regular_index
      args:
        - toindex: List[int64_t]
        - current: List[int64_t]
        - size: int64_t
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - length: int64_t
    - name: awkward_UnionArray8_32_regular_index
      args:
        - toindex: List[int32_t]
        - current: List[int32_t]
        - size: int64_t
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_regular_index(
          toindex, current, size, fromtags, tagsoffset, length
      ):
          count = 0
          for k in range(size):
              current[k] = 0
          for i in range(length):
              tag = fromtags[tagsoffset + i]
              toindex[i] = current[tag]
              current[tag] = current[tag] + 1


  - name: awkward_UnionArray_project
    specializations:
    - name: awkward_UnionArray8_64_project_64
      args:
        - lenout: List[int64_t]
        - tocarry: List[int64_t]
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - fromindex: List[int64_t]
        - indexoffset: int64_t
        - length: int64_t
        - which: int64_t
    - name: awkward_UnionArray8_32_project_64
      args:
        - lenout: List[int64_t]
        - tocarry: List[int64_t]
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - fromindex: List[int32_t]
        - indexoffset: int64_t
        - length: int64_t
        - which: int64_t
    - name: awkward_UnionArray8_U32_project_64
      args:
        - lenout: List[int64_t]
        - tocarry: List[int64_t]
        - fromtags: List[int8_t]
        - tagsoffset: int64_t
        - fromindex: List[uint32_t]
        - indexoffset: int64_t
        - length: int64_t
        - which: int64_t
    fail: False
    specification: |
      def awkward_UnionArray_project(
          lenout, tocarry, fromtags, tagsoffset, fromindex, indexoffset, length, which
      ):
          lenout[0] = 0
          for i in range(length):
              if fromtags[tagsoffset + i] == which:
                  tocarry[lenout[0]] = fromindex[indexoffset + i]
                  lenout[0] = lenout[0] + 1


  - name: awkward_missing_repeat
    specializations:
    - name: awkward_missing_repeat_64
      args:
        - outindex: List[int64_t]
        - index: List[int64_t]
        - indexoffset: int64_t
        - indexlength: int64_t
        - repetitions: int64_t
        - regularsize: int64_t
    fail: False
    specification: |
      def awkward_missing_repeat(
          outindex, index, indexoffset, indexlength, repetitions, regularsize
      ):
          for i in range(repetitions):
              for j in range(indexlength):
                  base = index[indexoffset + j]
                  outindex[(i * indexlength) + j] = base + i * regularsize if base >= 0 else 0


  - name: awkward_RegularArray_getitem_jagged_expand
    specializations:
    - name: awkward_RegularArray_getitem_jagged_expand_64
      args:
        - multistarts: List[int64_t]
        - multistops: List[int64_t]
        - singleoffsets: List[int64_t]
        - regularsize: int64_t
        - regularlength: int64_t
    fail: False
    specification: |
      def awkward_RegularArray_getitem_jagged_expand(
          multistarts, multistops, singleoffsets, regularsize, regularlength
      ):
          for i in range(regularlength):
              for j in range(regularsize):
                  multistarts[(i * regularsize) + j] = singleoffsets[j]
                  multistops[(i * regularsize) + j] = singleoffsets[j + 1]


  - name: awkward_ListArray_getitem_jagged_expand
    specializations:
    - name: awkward_ListArrayU32_getitem_jagged_expand_64
      args:
        - multistarts: List[int64_t]
        - multistops: List[int64_t]
        - singleoffsets: List[int64_t]
        - tocarry: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[uint32_t]
        - fromstopsoffset: int64_t
        - jaggedsize: int64_t
        - length: int64_t
    - name: awkward_ListArray64_getitem_jagged_expand_64
      args:
        - multistarts: List[int64_t]
        - multistops: List[int64_t]
        - singleoffsets: List[int64_t]
        - tocarry: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int64_t]
        - fromstopsoffset: int64_t
        - jaggedsize: int64_t
        - length: int64_t
    - name: awkward_ListArray32_getitem_jagged_expand_64
      args:
        - multistarts: List[int64_t]
        - multistops: List[int64_t]
        - singleoffsets: List[int64_t]
        - tocarry: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int32_t]
        - fromstopsoffset: int64_t
        - jaggedsize: int64_t
        - length: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_jagged_expand(
          multistarts,
          multistops,
          singleoffsets,
          tocarry,
          fromstarts,
          fromstartsoffset,
          fromstops,
          fromstopsoffset,
          jaggedsize,
          length,
      ):
          for i in range(length):
              start = fromstarts[fromstartsoffset + i]
              stop = fromstops[fromstopsoffset + i]
              if stop < start:
                  raise ValueError("stops[i] < starts[i]")
              if (stop - start) != jaggedsize:
                  raise ValueError("cannot fit jagged slice into nested list")
              for j in range(jaggedsize):
                  multistarts[(i * jaggedsize) + j] = singleoffsets[j]
                  multistops[(i * jaggedsize) + j] = singleoffsets[j + 1]
                  tocarry[(i * jaggedsize) + j] = start + j


  - name: awkward_ListArray_getitem_jagged_carrylen
    specializations:
    - name: awkward_ListArray_getitem_jagged_carrylen_64
      args:
        - carrylen: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_jagged_carrylen(
          carrylen,
          slicestarts,
          slicestartsoffset,
          slicestops,
          slicestopsoffset,
          sliceouterlen,
      ):
          carrylen[0] = 0
          for i in range(sliceouterlen):
              carrylen[0] = carrylen[0] + int(
                  slicestops[slicestopsoffset + i] - slicestarts[slicestartsoffset + i]
              )


  - name: awkward_ListArray_getitem_jagged_apply
    specializations:
    - name: awkward_ListArray32_getitem_jagged_apply_64
      args:
        - tooffsets: List[int64_t]
        - tocarry: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - sliceindex: List[int64_t]
        - sliceindexoffset: int64_t
        - sliceinnerlen: int64_t
        - fromstarts: List[int32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int32_t]
        - fromstopsoffset: int64_t
        - contentlen: int64_t
    - name: awkward_ListArray64_getitem_jagged_apply_64
      args:
        - tooffsets: List[int64_t]
        - tocarry: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - sliceindex: List[int64_t]
        - sliceindexoffset: int64_t
        - sliceinnerlen: int64_t
        - fromstarts: List[int64_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int64_t]
        - fromstopsoffset: int64_t
        - contentlen: int64_t
    - name: awkward_ListArrayU32_getitem_jagged_apply_64
      args:
        - tooffsets: List[int64_t]
        - tocarry: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - sliceindex: List[int64_t]
        - sliceindexoffset: int64_t
        - sliceinnerlen: int64_t
        - fromstarts: List[uint32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[uint32_t]
        - fromstopsoffset: int64_t
        - contentlen: int64_t
    fail: True
    specification: |
      def awkward_ListArray_getitem_jagged_apply(
          tooffsets,
          tocarry,
          slicestarts,
          slicestartsoffset,
          slicestops,
          slicestopsoffset,
          sliceouterlen,
          sliceindex,
          sliceindexoffset,
          sliceinnerlen,
          fromstarts,
          fromstartsoffset,
          fromstops,
          fromstopsoffset,
          contentlen,
      ):
          k = 0
          for i in range(sliceouterlen):
              slicestart = slicestarts[slicestartsoffset + i]
              slicestop = slicestops[slicestopsoffset + i]
              tooffsets[i] = float(k)
              if slicestart != slicestop:
                  if slicestop < slicestart:
                      raise ValueError("jagged slice's stops[i] < starts[i]")
                  if slicestop > sliceinnerlen:
                      raise ValueError("jagged slice's offsets extend beyond its content")
                  start = int(fromstarts[fromstartsoffset + i])
                  stop = int(fromstops[fromstopsoffset + i])
                  if stop < start:
                      raise ValueError("stops[i] < starts[i]")
                  if (start != stop) and (stop > contentlen):
                      raise ValueError("stops[i] > len(content)")
                  count = stop - start
                  for j in range(slicestart, slicestop):
                      index = int(sliceindex[sliceindexoffset + j])
                      if index < 0:
                          index += count
                      if not ((0 <= index) and (index < count)):
                          raise ValueError("index out of range")
                      tocarry[k] = start + index
                      k = k + 1
              tooffsets[i + 1] = float(k)


  - name: awkward_ListArray_getitem_jagged_numvalid
    specializations:
    - name: awkward_ListArray_getitem_jagged_numvalid_64
      args:
        - numvalid: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - length: int64_t
        - missing: List[int64_t]
        - missingoffset: int64_t
        - missinglength: int64_t
    fail: True
    specification: |
      def awkward_ListArray_getitem_jagged_numvalid(
          numvalid,
          slicestarts,
          slicestartsoffset,
          slicestops,
          slicestopsoffset,
          length,
          missing,
          missingoffset,
          missinglength,
      ):
          numvalid[0] = 0
          for i in range(length):
              slicestart = slicestarts[slicestartsoffset + i]
              slicestop = slicestops[slicestopsoffset + i]
              if slicestart != slicestop:
                  if slicestop < slicestart:
                      raise ValueError("jagged slice's stops[i] < starts[i]")
                  if slicestop > missinglength:
                      raise ValueError("jagged slice's offsets extend beyond its content")
                  for j in range(slicestart, slicestop):
                      numvalid[0] = numvalid[0] + 1 if missing[missingoffset + j] >= 0 else 0


  - name: awkward_ListArray_getitem_jagged_shrink
    specializations:
    - name: awkward_ListArray_getitem_jagged_shrink_64
      args:
        - tocarry: List[int64_t]
        - tosmalloffsets: List[int64_t]
        - tolargeoffsets: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - length: int64_t
        - missing: List[int64_t]
        - missingoffset: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_jagged_shrink(
          tocarry,
          tosmalloffsets,
          tolargeoffsets,
          slicestarts,
          slicestartsoffset,
          slicestops,
          slicestopsoffset,
          length,
          missing,
          missingoffset,
      ):
          k = 0
          if length == 0:
              tosmalloffsets[0] = 0
              tolargeoffsets[0] = 0
          else:
              tosmalloffsets[0] = slicestarts[slicestartsoffset + 0]
              tolargeoffsets[0] = slicestarts[slicestartsoffset + 0]
          for i in range(length):
              slicestart = slicestarts[slicestartsoffset + i]
              slicestop = slicestops[slicestopsoffset + i]
              if slicestart != slicestop:
                  smallcount = 0
                  for j in range(slicestart, slicestop):
                      if missing[missingoffset + j] >= 0:
                          tocarry[k] = j
                          k = k + 1
                          smallcount = smallcount + 1
                  tosmalloffsets[i + 1] = tosmalloffsets[i] + smallcount
              else:
                  tosmalloffsets[i + 1] = tosmalloffsets[i]
              tolargeoffsets[i + 1] = tolargeoffsets[i] + (slicestop - slicestart)


  - name: awkward_ListArray_getitem_jagged_descend
    specializations:
    - name: awkward_ListArray32_getitem_jagged_descend_64
      args:
        - tooffsets: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - fromstarts: List[int32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int32_t]
        - fromstopsoffset: int64_t
    - name: awkward_ListArrayU32_getitem_jagged_descend_64
      args:
        - tooffsets: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - fromstarts: List[uint32_t]
        - fromstartsoffset: int64_t
        - fromstops: List[uint32_t]
        - fromstopsoffset: int64_t
    - name: awkward_ListArray64_getitem_jagged_descend_64
      args:
        - tooffsets: List[int64_t]
        - slicestarts: List[int64_t]
        - slicestartsoffset: int64_t
        - slicestops: List[int64_t]
        - slicestopsoffset: int64_t
        - sliceouterlen: int64_t
        - fromstarts: List[int64_t]
        - fromstartsoffset: int64_t
        - fromstops: List[int64_t]
        - fromstopsoffset: int64_t
    fail: False
    specification: |
      def awkward_ListArray_getitem_jagged_descend(
          tooffsets,
          slicestarts,
          slicestartsoffset,
          slicestops,
          slicestopsoffset,
          sliceouterlen,
          fromstarts,
          fromstartsoffset,
          fromstops,
          fromstopsoffset,
      ):
          if sliceouterlen == 0:
              tooffsets[0] = 0
          else:
              tooffsets[0] = slicestarts[slicestartsoffset + 0]
          for i in range(sliceouterlen):
              slicecount = int(
                  slicestops[slicestopsoffset + i] - slicestarts[slicestartsoffset + i]
              )
              count = int(fromstops[fromstopsoffset + i] - fromstarts[fromstartsoffset + i])
              if slicecount != count:
                  raise ValueError(
                      "jagged slice inner length differs from array inner length"
                  )
              tooffsets[i + 1] = tooffsets[i] + float(count)


  - name: awkward_NumpyArrayU16_getitem_at
    args:
      - ptr: List[uint16_t]
      - at: int64_t
    fail: False
    specification: |
      def awkward_NumpyArrayU16_getitem_at(ptr, at):
          return ptr[at]


  - name: awkward_ByteMaskedArray_getitem_carry
    specializations:
    - name: awkward_ByteMaskedArray_getitem_carry_64
      args:
        - tomask: List[int8_t]
        - frommask: List[int8_t]
        - frommaskoffset: int64_t
        - lenmask: int64_t
        - fromcarry: List[int64_t]
        - lencarry: int64_t
    fail: False
    specification: |
      def awkward_ByteMaskedArray_getitem_carry(
          tomask, frommask, frommaskoffset, lenmask, fromcarry, lencarry
      ):
          for i in range(lencarry):
              if fromcarry[i] >= lenmask:
                  raise ValueError("index out of range")
              tomask[i] = frommask[frommaskoffset + fromcarry[i]]


  - name: awkward_ByteMaskedArray_numnull
    args:
      - numnull: List[int64_t]
      - mask: List[int8_t]
      - maskoffset: int64_t
      - length: int64_t
      - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_numnull(numnull, mask, maskoffset, length, validwhen):
          numnull[0] = 0
          for i in range(length):
              if (mask[maskoffset + i] != 0) != validwhen:
                  numnull[0] = numnull[0] + 1


  - name: awkward_ByteMaskedArray_getitem_nextcarry
    specializations:
    - name: awkward_ByteMaskedArray_getitem_nextcarry_64
      args:
        - tocarry: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - length: int64_t
        - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_getitem_nextcarry(
          tocarry, mask, maskoffset, length, validwhen
      ):
          k = 0
          for i in range(length):
              if (mask[maskoffset + i] != 0) == validwhen:
                  tocarry[k] = i
                  k = k + 1


  - name: awkward_ByteMaskedArray_getitem_nextcarry_outindex
    specializations:
    - name: awkward_ByteMaskedArray_getitem_nextcarry_outindex_64
      args:
        - tocarry: List[int64_t]
        - outindex: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - length: int64_t
        - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_getitem_nextcarry_outindex(
          tocarry, toindex, mask, maskoffset, length, validwhen
      ):
          k = 0
          for i in range(length):
              if (mask[maskoffset + i] != 0) == validwhen:
                  tocarry[k] = i
                  toindex[i] = float(k)
                  k = k + 1
              else:
                  toindex[i] = -1


  - name: awkward_ByteMaskedArray_toIndexedOptionArray
    specializations:
    - name: awkward_ByteMaskedArray_toIndexedOptionArray64
      args:
        - toindex: List[int64_t]
        - mask: List[int8_t]
        - maskoffset: int64_t
        - length: int64_t
        - validwhen: bool
    fail: False
    specification: |
      def awkward_ByteMaskedArray_toIndexedOptionArray(
          toindex, mask, maskoffset, length, validwhen
      ):
          for i in range(length):
              toindex[i] = i if (mask[maskoffset + i] != 0) == validwhen else -1


  - name: awkward_Content_getitem_next_missing_jagged_getmaskstartstop
    args:
      - index_in: List[int64_t]
      - index_in_offset: int64_t
      - offsets_in: List[int64_t]
      - offsets_in_offset: int64_t
      - mask_out: List[int64_t]
      - starts_out: List[int64_t]
      - stops_out: List[int64_t]
      - length: int64_t
    fail: False
    specification: |
      def awkward_Content_getitem_next_missing_jagged_getmaskstartstop(
          index_in,
          index_in_offset,
          offsets_in,
          offsets_in_offset,
          mask_out,
          starts_out,
          stops_out,
          length,
      ):
          k = 0
          i = 0
          while i < length:
              starts_out[i] = offsets_in[k + offsets_in_offset]
              if index_in[i + index_in_offset] < 0:
                  mask_out[i] = -1
                  stops_out[i] = offsets_in[k + offsets_in_offset]
              else:
                  mask_out[i] = i
                  k += 1
                  stops_out[i] = offsets_in[k + offsets_in_offset]
              i = i + 1


  - name: awkward_MaskedArray_getitem_next_jagged_project
    specializations:
    - name: awkward_MaskedArray32_getitem_next_jagged_project
      args:
        - index: List[int32_t]
        - index_offset: int64_t
        - starts_in: List[int64_t]
        - starts_offset: int64_t
        - stops_in: List[int64_t]
        - stops_offset: int64_t
        - starts_out: List[int64_t]
        - stops_out: List[int64_t]
        - length: int64_t
    - name: awkward_MaskedArray64_getitem_next_jagged_project
      args:
        - index: List[int64_t]
        - index_offset: int64_t
        - starts_in: List[int64_t]
        - starts_offset: int64_t
        - stops_in: List[int64_t]
        - stops_offset: int64_t
        - starts_out: List[int64_t]
        - stops_out: List[int64_t]
        - length: int64_t
    - name: awkward_MaskedArrayU32_getitem_next_jagged_project
      args:
        - index: List[uint32_t]
        - index_offset: int64_t
        - starts_in: List[int64_t]
        - starts_offset: int64_t
        - stops_in: List[int64_t]
        - stops_offset: int64_t
        - starts_out: List[int64_t]
        - stops_out: List[int64_t]
        - length: int64_t
    fail: False
    specification: |
      def awkward_MaskedArray_getitem_next_jagged_project(
          index,
          index_offset,
          starts_in,
          starts_offset,
          stops_in,
          stops_offset,
          starts_out,
          stops_out,
          length,
      ):
          k = 0
          i = 0
          while i < length:
              if index[i + index_offset] >= 0:
                  starts_out[k] = starts_in[i + starts_offset]
                  stops_out[k] = stops_in[i + stops_offset]
                  k = k + 1
              i = i + 1


  - name: awkward_sorting_ranges
    args:
      - toindex: List[int64_t]
      - tolength: int64_t
      - parents: List[int64_t]
      - parentslength: int64_t
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_sorting_ranges_length
    args:
      - tolength: List[int64_t]
      - parents: List[int64_t]
      - parentslength: int64_t
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_argsort
    specializations:
    - name: awkward_argsort_int32
      args:
        - toptr: List[int64_t]
        - fromptr: List[int32_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_uint64
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint64_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_float32
      args:
        - toptr: List[int64_t]
        - fromptr: List[float]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_int16
      args:
        - toptr: List[int64_t]
        - fromptr: List[int16_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_uint8
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint8_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_uint16
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint16_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_int64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_float64
      args:
        - toptr: List[int64_t]
        - fromptr: List[double]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_bool
      args:
        - toptr: List[int64_t]
        - fromptr: List[bool]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_uint32
      args:
        - toptr: List[int64_t]
        - fromptr: List[uint32_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_argsort_int8
      args:
        - toptr: List[int64_t]
        - fromptr: List[int8_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - ascending: bool
        - stable: bool
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_sort
    specializations:
    - name: awkward_sort_uint32
      args:
        - toptr: List[uint32_t]
        - fromptr: List[uint32_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_float64
      args:
        - toptr: List[double]
        - fromptr: List[double]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_uint8
      args:
        - toptr: List[uint8_t]
        - fromptr: List[uint8_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_int8
      args:
        - toptr: List[int8_t]
        - fromptr: List[int8_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_bool
      args:
        - toptr: List[bool]
        - fromptr: List[bool]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_int32
      args:
        - toptr: List[int32_t]
        - fromptr: List[int32_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_int16
      args:
        - toptr: List[int16_t]
        - fromptr: List[int16_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_uint64
      args:
        - toptr: List[uint64_t]
        - fromptr: List[uint64_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_float32
      args:
        - toptr: List[float]
        - fromptr: List[float]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_int64
      args:
        - toptr: List[int64_t]
        - fromptr: List[int64_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    - name: awkward_sort_uint16
      args:
        - toptr: List[uint16_t]
        - fromptr: List[uint16_t]
        - length: int64_t
        - offsets: List[int64_t]
        - offsetslength: int64_t
        - parentslength: int64_t
        - ascending: bool
        - stable: bool
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_ListOffsetArray_local_preparenext_64
    args:
      - tocarry: List[int64_t]
      - fromindex: List[int64_t]
      - length: int64_t
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_IndexedArray_local_preparenext_64
    args:
      - tocarry: List[int64_t]
      - starts: List[int64_t]
      - parents: List[int64_t]
      - parentsoffset: int64_t
      - parentslength: int64_t
      - nextparents: List[int64_t]
      - nextparentsoffset: int64_t
    fail: False
    specification: |
      Insert Python specification here

  - name: awkward_NumpyArray_sort_asstrings_uint8
    args:
      - toptr: List[uint8_t]
      - fromptr: List[uint8_t]
      - offsets: List[int64_t]
      - offsetslength: int64_t
      - outoffsets: List[int64_t]
      - ascending: bool
      - stable: bool
    fail: False
    specification: |
      Insert Python specification here

