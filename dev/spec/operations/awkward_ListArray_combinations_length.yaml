- name: awkward_ListArray_combinations_length
  specializations:
    - name: awkward_ListArrayU32_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[uint32_t]
        - startsoffset: int64_t
        - stops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray64_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int64_t]
        - startsoffset: int64_t
        - stops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
    - name: awkward_ListArray32_combinations_length_64
      args:
        - totallen: List[int64_t]
        - tooffsets: List[int64_t]
        - n: int64_t
        - replacement: bool
        - starts: List[int32_t]
        - startsoffset: int64_t
        - stops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
  inparams: ['n', 'replacement', 'starts', 'startsoffset', 'stops', 'stopsoffset', 'length']
  outparams: ['totallen', 'tooffsets']
  definition: |
    def awkward_ListArray_combinations_length(
        totallen,
        tooffsets,
        n,
        replacement,
        starts,
        startsoffset,
        stops,
        stopsoffset,
        length,
    ):
        totallen[0] = 0
        tooffsets[0] = 0
        for i in range(length):
            size = int(stops[stopsoffset + i] - starts[startsoffset + i])
            if replacement:
                size += n - 1
            thisn = n
    
            if thisn > size:
                combinationslen = 0
            else:
                if thisn == size:
                    combinationslen = 1
                else:
                    if (thisn * 2) > size:
                        thisn = size - thisn
                    combinationslen = size
                    j = 2
                    while j <= thisn:
                        combinationslen *= (size - j) + 1
                        combinationslen /= j
                        j = j + 1
            totallen[0] = totallen[0] + combinationslen
            tooffsets[i + 1] = tooffsets[i] + combinationslen
  tests:
    - args:
        totallen: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        tooffsets: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        n: 3
        replacement: True
        starts: [2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]
        startsoffset: 0
        stops: [3, 1, 3, 2, 3, 1, 2, 3]
        stopsoffset: 0
        length: 3
      successful: True
      results:
        totallen: [3]
        tooffsets: [0, 1, 2, 3]
    - args:
        totallen: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        tooffsets: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        n: 3
        replacement: False
        starts: [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1]
        startsoffset: 1
        stops: [8, 4, 5, 6, 5, 5, 7]
        stopsoffset: 1
        length: 3
      successful: True
      results:
        totallen: [34.0]
        tooffsets: [0, 4, 14.0, 34.0]
