- name: awkward_ListArray_validity
  specializations:
    - name: awkward_ListArrayU32_validity
      args:
        - starts: List[uint32_t]
        - startsoffset: int64_t
        - stops: List[uint32_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray32_validity
      args:
        - starts: List[int32_t]
        - startsoffset: int64_t
        - stops: List[int32_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_validity
      args:
        - starts: List[int64_t]
        - startsoffset: int64_t
        - stops: List[int64_t]
        - stopsoffset: int64_t
        - length: int64_t
        - lencontent: int64_t
  inparams: ['starts', 'startsoffset', 'stops', 'stopsoffset', 'length', 'lencontent']
  outparams: []
  definition: |
    def awkward_ListArray_validity(
        starts, startsoffset, stops, stopsoffset, length, lencontent
    ):
        for i in range(length):
            start = starts[startsoffset + i]
            stop = stops[stopsoffset + i]
            if start != stop:
                if start > stop:
                    raise ValueError("start[i] > stop[i]")
                if start < 0:
                    raise ValueError("start[i] < 0")
                if stop > lencontent:
                    raise ValueError("stop[i] > len(content)")
  tests:
    - args:
        starts: [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1]
        startsoffset: 1
        stops: [8, 4, 5, 6, 5, 5, 7]
        stopsoffset: 1
        length: 3
        lencontent: 3
      successful: False
