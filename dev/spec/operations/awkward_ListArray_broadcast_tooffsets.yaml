- name: awkward_ListArray_broadcast_tooffsets
  specializations:
    - name: awkward_ListArray32_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[int32_t]
        - startsoffset: int64_t
        - fromstops: List[int32_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
    - name: awkward_ListArrayU32_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[uint32_t]
        - startsoffset: int64_t
        - fromstops: List[uint32_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
    - name: awkward_ListArray64_broadcast_tooffsets_64
      args:
        - tocarry: List[int64_t]
        - fromoffsets: List[int64_t]
        - offsetsoffset: int64_t
        - offsetslength: int64_t
        - fromstarts: List[int64_t]
        - startsoffset: int64_t
        - fromstops: List[int64_t]
        - stopsoffset: int64_t
        - lencontent: int64_t
  inparams: ['fromoffsets', 'offsetsoffset', 'offsetslength', 'fromstarts', 'startsoffset', 'fromstops', 'stopsoffset', 'lencontent']
  outparams: ['tocarry']
  definition: |
    def awkward_ListArray_broadcast_tooffsets(
        tocarry,
        fromoffsets,
        offsetsoffset,
        offsetslength,
        fromstarts,
        startsoffset,
        fromstops,
        stopsoffset,
        lencontent,
    ):
        k = 0
        for i in range(offsetslength - 1):
            start = int(fromstarts[startsoffset + i])
            stop = int(fromstops[stopsoffset + i])
            if (start != stop) and (stop > lencontent):
                raise ValueError("stops[i] > len(content)")
            count = int(
                fromoffsets[(offsetsoffset + i) + 1] - fromoffsets[offsetsoffset + i]
            )
            if count < 0:
                raise ValueError("broadcast's offsets must be monotonically increasing")
            if (stop - start) != count:
                raise ValueError("cannot broadcast nested list")
            for j in range(start, stop):
                tocarry[k] = float(j)
                k = k + 1
  tests:
    - args:
        tocarry: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        fromoffsets: [1, 3, 5, 7, 9, 11]
        offsetsoffset: 0
        offsetslength: 3
        fromstarts: [1, 2, 3, 4, 5, 6]
        startsoffset: 0
        fromstops: [3, 4, 5, 6, 7, 8]
        stopsoffset: 0
        lencontent: 10
      successful: True
      results:
        tocarry: [1.0, 2.0, 2.0, 3.0]
    - args:
        tocarry: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        fromoffsets: [1, 3, 5, 7, 9, 11]
        offsetsoffset: 0
        offsetslength: 3
        fromstarts: [1, 2, 3, 4, 5, 6]
        startsoffset: 1
        fromstops: [3, 4, 5, 6, 7, 8]
        stopsoffset: 1
        lencontent: 10
      successful: True
      results:
        tocarry: [2.0, 3.0, 3.0, 4.0]
