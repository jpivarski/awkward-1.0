- name: awkward_UnionArray_fillna
  specializations:
    - name: awkward_UnionArray_fillna_from32_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int32_t]
        - offset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillna_from64_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[int64_t]
        - offset: int64_t
        - length: int64_t
    - name: awkward_UnionArray_fillna_fromU32_to64
      args:
        - toindex: List[int64_t]
        - fromindex: List[uint32_t]
        - offset: int64_t
        - length: int64_t
  inparams: ['fromindex', 'offset', 'length']
  outparams: ['toindex']
  definition: |
    def awkward_UnionArray_fillna(toindex, fromindex, offset, length):
        for i in range(length):
            toindex[i] = fromindex[offset + i] if fromindex[offset + i] >= 0 else 0
  tests:
    - args:
        toindex: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        fromindex: [4, 3, 6, 6, 3, 7, 3, 8, 3, 8, 8]
        offset: 0
        length: 3
      successful: True
      results:
        toindex: [4, 3, 6]
    - args:
        toindex: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        fromindex: [3, 4, 7, 7, 4, 1, 3, 8, 3, 8, 8]
        offset: 1
        length: 3
      successful: True
      results:
        toindex: [4, 7, 7]
