- name: awkward_ListArray_getitem_next_range_carrylength
  specializations:
    - name: awkward_ListArrayU32_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[uint32_t]
        - fromstops: List[uint32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray32_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[int32_t]
        - fromstops: List[int32_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
    - name: awkward_ListArray64_getitem_next_range_carrylength
      args:
        - carrylength: List[int64_t]
        - fromstarts: List[int64_t]
        - fromstops: List[int64_t]
        - lenstarts: int64_t
        - startsoffset: int64_t
        - stopsoffset: int64_t
        - start: int64_t
        - stop: int64_t
        - step: int64_t
  inparams: ['fromstarts', 'fromstops', 'lenstarts', 'startsoffset', 'stopsoffset', 'start', 'stop', 'step']
  outparams: ['carrylength']
  definition: |
    def awkward_ListArray_getitem_next_range_carrylength(
        carrylength,
        fromstarts,
        fromstops,
        lenstarts,
        startsoffset,
        stopsoffset,
        start,
        stop,
        step,
    ):
        carrylength[0] = 0
        for i in range(lenstarts):
            length = fromstops[stopsoffset + i] - fromstarts[startsoffset + i]
            regular_start = start
            regular_stop = stop
            awkward_regularize_rangeslice(
                regular_start,
                regular_stop,
                step > 0,
                start != kSliceNone,
                stop != kSliceNone,
                length,
            )
            if step > 0:
                j = regular_start
                while j < regular_stop:
                    carrylength[0] = carrylength[0] + 1
                    j += step
            else:
                j = regular_start
                while j > regular_stop:
                    carrylength[0] = carrylength[0] + 1
                    j += step
