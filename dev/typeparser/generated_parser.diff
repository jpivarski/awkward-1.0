# diff dev/typeparser/generated_parser.py src/awkward/types/_awkward_datashape_parser.py

1,2c1,6
< # The file was automatically generated by Lark v0.11.1
< __version__ = "0.11.1"
---
> # flake8: noqa
> # fmt: off
> # pylint: skip-file
> 
> # The file was automatically generated by Lark v0.12.0
> __version__ = "0.12.0"
29d32
< from io import open
36a40,48
> class ConfigurationError(LarkError, ValueError):
>     pass
> 
> 
> def assert_config(value, options, msg='Got %r, expected one of %s'):
>     if value not in options:
>         raise ConfigurationError(msg % (value, options))
> 
> 
49,56d60
< class UnexpectedEOF(ParseError):
<     def __init__(self, expected):
<         self.expected = expected
< 
<         message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
<         super(UnexpectedEOF, self).__init__(message)
< 
< 
59a64
>     _terminals_by_name = None
62a68
>         assert self.pos_in_stream is not None, self
91c97
<                         if use_accepts and ut.accepts != self.accepts:
---
>                         if use_accepts and hasattr(self, 'accepts') and ut.accepts != self.accepts:
93c99
<                                         (self.state, self.accepts, ut.accepts, i, j))
---
>                                          (self.state, self.accepts, ut.accepts, i, j))
98c104
<                                 logger.debug("Exact Match at example [%s][%s]" % (i, j))
---
>                                 logger.debug(f"Exact Match at example [{i}][{j}]")
105c111
<                                     logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
---
>                                     logger.debug(f"Token Type Fallback at example [{i}][{j}]")
110,111c116,117
<                         if not candidate[0]:
<                             logger.debug("Same State match at example [%s][%s]" % (i, j))
---
>                         if candidate[0] is None:
>                             logger.debug(f"Same State match at example [{i}][{j}]")
115a122,150
>     def _format_expected(self, expected):
>         if self._terminals_by_name:
>             d = self._terminals_by_name
>             expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
>         return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)
> 
> 
> class UnexpectedEOF(ParseError, UnexpectedInput):
>     #--
> 
>     def __init__(self, expected, state=None, terminals_by_name=None):
>         super().__init__()
> 
>         self.expected = expected
>         self.state = state
>         from .lexer import Token
>         self.token = Token("<EOF>", "")  ##
> 
>         self.pos_in_stream = -1
>         self.line = -1
>         self.column = -1
>         self._terminals_by_name = terminals_by_name
> 
> 
>     def __str__(self):
>         message = "Unexpected end-of-input. "
>         message += self._format_expected(self.expected)
>         return message
> 
118c153,160
<     def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
---
>     #--
> 
>     def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
>                  terminals_by_name=None, considered_rules=None):
>         super().__init__()
> 
>         ##
> 
122a165
>         self._terminals_by_name = terminals_by_name
125a169,170
>         self.considered_rules = considered_rules
>         self.token_history = token_history
128c173
<             _s = seq[lex_pos:lex_pos+1].decode("ascii", "backslashreplace")
---
>             self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
130c175,176
<             _s = seq[lex_pos]
---
>             self.char = seq[lex_pos]
>         self._context = self.get_context(seq)
132,137d177
<         message = "No terminal defined for %r at line %d col %d" % (_s, line, column)
<         message += '\n\n' + self.get_context(seq)
<         if allowed:
<             message += '\nExpecting: %s\n' % allowed
<         if token_history:
<             message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)
139c179,186
<         super(UnexpectedCharacters, self).__init__(message)
---
>     def __str__(self):
>         message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
>         message += '\n\n' + self._context
>         if self.allowed:
>             message += self._format_expected(self.allowed)
>         if self.token_history:
>             message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
>         return message
144c191,196
<     def __init__(self, token, expected, considered_rules=None, state=None, puppet=None):
---
> 
>     def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
>         super().__init__()
> 
>         ##
> 
147c199
<         self.pos_in_stream = getattr(token, 'pos_in_stream', None)
---
>         self.pos_in_stream = getattr(token, 'start_pos', None)
151c203
<         self.expected = expected     ##
---
>         self.expected = expected  ##
152a205
>         self._accepts = NO_VALUE
154c207,209
<         self.puppet = puppet
---
>         self.interactive_parser = interactive_parser
>         self._terminals_by_name = terminals_by_name
>         self.token_history = token_history
156d210
<         ##
158c212,222
<         ##
---
>     @property
>     def accepts(self):
>         if self._accepts is NO_VALUE:
>             self._accepts = self.interactive_parser and self.interactive_parser.accepts()
>         return self._accepts
> 
>     def __str__(self):
>         message = ("Unexpected token %r at line %s, column %s.\n%s"
>                    % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
>         if self.token_history:
>             message += "Previous tokens: %r\n" % self.token_history
160c224
<         self.accepts = puppet and puppet.accepts()
---
>         return message
162,164c226,229
<         message = ("Unexpected token %r at line %s, column %s.\n"
<                    "Expected one of: \n\t* %s\n"
<                    % (token, self.line, self.column, '\n\t* '.join(self.accepts or self.expected)))
---
>     @property
>     def puppet(self):
>         warn("UnexpectedToken.puppet attribute has been renamed to interactive_parser", DeprecationWarning)
>         return self.interactive_parser
166d230
<         super(UnexpectedToken, self).__init__(message)
170a235
> 
171a237,240
>         message = f'Error trying to process rule "{rule}":\n\n{orig_exc}'
>         super().__init__(message)
> 
>         self.rule = rule
175,176d243
<         message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
<         super(VisitError, self).__init__(message)
178d244
< import sys, re
179a246,248
> import re
> import sys
> 
183a253,254
> ##
> 
185a257,270
> if sys.version_info[0]>2:
>     from abc import ABC, abstractmethod
> else:
>     from abc import ABCMeta, abstractmethod
>     class ABC: ##
> 
>         __slots__ = ()
>         __metclass__ = ABCMeta
> 
> 
> Py36 = (sys.version_info[:2] >= (3, 6))
> 
> NO_VALUE = object()
> 
213c298
< class Serialize(object):
---
> class Serialize:
227,229c312,313
<         postprocess = getattr(self, '_serialize', None)
<         if postprocess:
<             postprocess(res, memo)
---
>         if hasattr(self, '_serialize'):
>             self._serialize(res, memo)
234c318
<         namespace = getattr(cls, '__serialize_namespace__', {})
---
>         namespace = getattr(cls, '__serialize_namespace__', [])
248,250c332,335
<         postprocess = getattr(inst, '_deserialize', None)
<         if postprocess:
<             postprocess()
---
> 
>         if hasattr(inst, '_deserialize'):
>             inst._deserialize()
> 
282d366
< from functools import wraps, partial
283a368
> from functools import partial, wraps
285c370
< Str = type(u'')
---
> Str = str
315c400
< except ModuleNotFoundError:
---
> except ImportError:
318,319c403,409
< import sre_parse
< import sre_constants
---
> if sys.version_info >= (3, 11):
>     import re._constants as sre_constants
>     import re._parser as sre_parse
> else:
>     import sre_constants
>     import sre_parse
> 
338c428,439
<         raise ValueError(expr)
---
>         if not regex:
>             raise ValueError(expr)
>         else:
>             ##
> 
>             ##
> 
>             c = regex.compile(regexp_final)
>             if c.match('') is None:
>                 return 1, sre_constants.MAXREPEAT
>             else:
>                 return 0, sre_constants.MAXREPEAT
349c450
< class Tree(object):
---
> class Tree:
363c464
<         return 'Tree(%r, %r)' % (self.data, self.children)
---
>         return f'Tree({self.data!r}, {self.children!r})'
370c471
<             return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']
---
>             return [indent_str*level, self._pretty_label(), '\t', f'{self.children[0]}', '\n']
377c478
<                 l += [indent_str*(level+1), '%s' % (n,), '\n']
---
>                 l += [indent_str*(level+1), f'{n}', '\n']
532a634,653
> def merge_transformers(base_transformer=None, **transformers_to_merge):
>     #--
>     if base_transformer is None:
>         base_transformer = Transformer()
>     for prefix, transformer in transformers_to_merge.items():
>         for method_name in dir(transformer):
>             method = getattr(transformer, method_name)
>             if not callable(method):
>                 continue
>             if method_name.startswith("_") or method_name == "transform":
>                 continue
>             prefixed_method = prefix + "__" + method_name
>             if hasattr(base_transformer, prefixed_method):
>                 raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)
> 
>             setattr(base_transformer, prefixed_method, method)
> 
>     return base_transformer
> 
> 
547c668
< class TransformerChain(object):
---
> class TransformerChain:
598a720,721
>             elif self.__visit_tokens__ and isinstance(x, Token):
>                 stack.append(self._call_userfunc_token(x))
787,844d909
< class Indenter:
<     def __init__(self):
<         self.paren_level = None
<         self.indent_level = None
<         assert self.tab_len > 0
< 
<     def handle_NL(self, token):
<         if self.paren_level > 0:
<             return
< 
<         yield token
< 
<         indent_str = token.rsplit('\n', 1)[1] ##
< 
<         indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len
< 
<         if indent > self.indent_level[-1]:
<             self.indent_level.append(indent)
<             yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
<         else:
<             while indent < self.indent_level[-1]:
<                 self.indent_level.pop()
<                 yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)
< 
<             assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])
< 
<     def _process(self, stream):
<         for token in stream:
<             if token.type == self.NL_type:
<                 for t in self.handle_NL(token):
<                     yield t
<             else:
<                 yield token
< 
<             if token.type in self.OPEN_PAREN_types:
<                 self.paren_level += 1
<             elif token.type in self.CLOSE_PAREN_types:
<                 self.paren_level -= 1
<                 assert self.paren_level >= 0
< 
<         while len(self.indent_level) > 1:
<             self.indent_level.pop()
<             yield Token(self.DEDENT_type, '')
< 
<         assert self.indent_level == [0], self.indent_level
< 
<     def process(self, stream):
<         self.paren_level = 0
<         self.indent_level = [0]
<         return self._process(stream)
< 
<     ##
< 
<     @property
<     def always_accept(self):
<         return (self.NL_type,)
< 
< 
865c930
<         return '%s(%r)' % (type(self).__name__, self.name)
---
>         return f'{type(self).__name__}({self.name!r})'
881c946
<         return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)
---
>         return f'{type(self).__name__}({self.name!r}, {self.filter_out!r})'
901c966
<         return 'RuleOptions(%r, %r, %r, %r)' % (
---
>         return 'RuleOptions({!r}, {!r}, {!r}, {!r})'.format(
928c993
<         return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))
---
>         return '<{} : {}>'.format(self.origin.name, ' '.join(x.name for x in self.expansion))
931c996
<         return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)
---
>         return f'Rule({self.origin!r}, {self.expansion!r}, {self.alias!r}, {self.options!r})'
943a1009
> from warnings import warn
946a1013,1014
>     raw = None
>     type = None
948c1016
<     def __init__(self, value, flags=()):
---
>     def __init__(self, value, flags=(), raw=None):
950a1019
>         self.raw = raw
966,969c1035,1054
<     def _get_flags(self, value):
<         for f in self.flags:
<             value = f'(?{f}:{value})'
<         return value
---
>     def min_width(self):
>         raise NotImplementedError()
> 
>     def max_width(self):
>         raise NotImplementedError()
> 
>     if Py36:
>         ##
> 
>         def _get_flags(self, value):
>             for f in self.flags:
>                 value = (f'(?{f}:{value})')
>             return value
> 
>     else:
>         def _get_flags(self, value):
>             for f in self.flags:
>                 value = ('(?%s)' % f) + value
>             return value
> 
1020c1105,1112
<         return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)
---
>         return f'{type(self).__name__}({self.name!r}, {self.pattern!r})'
> 
>     def user_repr(self):
>         if self.name.startswith('__'): ##
> 
>             return self.pattern.raw or self.name
>         else:
>             return self.name
1025c1117
<     __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')
---
>     __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')
1027c1119
<     def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
---
>     def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None, pos_in_stream=None):
1029c1121
<             self = super(Token, cls).__new__(cls, value)
---
>             inst = super().__new__(cls, value)
1032c1124
<             self = super(Token, cls).__new__(cls, value)
---
>             inst = super().__new__(cls, value)
1034,1042c1126,1139
<         self.type = type_
<         self.pos_in_stream = pos_in_stream
<         self.value = value
<         self.line = line
<         self.column = column
<         self.end_line = end_line
<         self.end_column = end_column
<         self.end_pos = end_pos
<         return self
---
>         inst.type = type_
>         inst.start_pos = start_pos if start_pos is not None else pos_in_stream
>         inst.value = value
>         inst.line = line
>         inst.column = column
>         inst.end_line = end_line
>         inst.end_column = end_column
>         inst.end_pos = end_pos
>         return inst
> 
>     @property
>     def pos_in_stream(self):
>         warn("Attribute Token.pos_in_stream was renamed to Token.start_pos", DeprecationWarning, 2)
>         return self.start_pos
1053c1150
<         return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)
---
>         return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)
1056c1153
<         return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column))
---
>         return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))
1059c1156
<         return 'Token(%r, %r)' % (self.type, self.value)
---
>         return f'Token({self.type!r}, {self.value!r})'
1062c1159
<         return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)
---
>         return Token(self.type, self.value, self.start_pos, self.line, self.column)
1082a1180,1185
>     def __eq__(self, other):
>         if not isinstance(other, LineCounter):
>             return NotImplemented
> 
>         return self.char_pos == other.char_pos and self.newline_char == other.newline_char
> 
1096,1097c1199,1200
<     def __init__(self, mres):
<         self.mres = mres
---
>     def __init__(self, scanner):
>         self.scanner = scanner
1100,1104c1203,1205
<         for mre, type_from_index in self.mres:
<             m = mre.match(t.value)
<             if m:
<                 t.type = type_from_index[m.lastindex]
<                 break
---
>         res = self.scanner.match(t.value, 0)
>         if res:
>             _value, t.type = res
1118a1220,1224
> def _get_match(re_, regexp, s, flags):
>     m = re_.match(regexp, s, flags)
>     if m:
>         return m.group(0)
> 
1130,1131c1236
<             m = re_.match(retok.pattern.to_regexp(), s, g_regex_flags)
<             if m and m.group(0) == s:
---
>             if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
1136c1241
<             callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))
---
>             callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))
1138,1139c1243,1244
<     terminals = [t for t in terminals if t not in embedded_strs]
<     return terminals, callback
---
>     new_terminals = [t for t in terminals if t not in embedded_strs]
>     return new_terminals, callback
1142,1143d1246
< def _build_mres(terminals, max_size, g_regex_flags, match_whole, re_, use_bytes):
<     ##
1145c1248,1254
<     ##
---
> class Scanner:
>     def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
>         self.terminals = terminals
>         self.g_regex_flags = g_regex_flags
>         self.re_ = re_
>         self.use_bytes = use_bytes
>         self.match_whole = match_whole
1147c1256
<     ##
---
>         self.allowed_types = {t.name for t in self.terminals}
1149,1157c1258,1263
<     postfix = '$' if match_whole else ''
<     mres = []
<     while terminals:
<         pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
<         if use_bytes:
<             pattern = pattern.encode('latin-1')
<         try:
<             mre = re_.compile(pattern, g_regex_flags)
<         except AssertionError:  ##
---
>         self._mres = self._build_mres(terminals, len(terminals))
> 
>     def _build_mres(self, terminals, max_size):
>         ##
> 
>         ##
1159c1265,1275
<             return _build_mres(terminals, max_size//2, g_regex_flags, match_whole, re_, use_bytes)
---
>         ##
> 
>         postfix = '$' if self.match_whole else ''
>         mres = []
>         while terminals:
>             pattern = '|'.join(f'(?P<{t.name}>{t.pattern.to_regexp() + postfix})' for t in terminals[:max_size])
>             if self.use_bytes:
>                 pattern = pattern.encode('latin-1')
>             try:
>                 mre = self.re_.compile(pattern, self.g_regex_flags)
>             except AssertionError:  ##
1161,1163c1277
<         mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
<         terminals = terminals[max_size:]
<     return mres
---
>                 return self._build_mres(terminals, max_size//2)
1164a1279,1281
>             mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
>             terminals = terminals[max_size:]
>         return mres
1166,1167c1283,1287
< def build_mres(terminals, g_regex_flags, re_, use_bytes, match_whole=False):
<     return _build_mres(terminals, len(terminals), g_regex_flags, match_whole, re_, use_bytes)
---
>     def match(self, text, pos):
>         for mre, type_from_index in self._mres:
>             m = mre.match(text, pos)
>             if m:
>                 return m.group(0), type_from_index[m.lastindex]
1175c1295
< class Lexer(object):
---
> class Lexer:
1187c1307
<         terminals = list(conf.tokens)
---
>         terminals = list(conf.terminals)
1199c1319
<                     raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))
---
>                     raise LexError(f"Cannot compile token {t.name}: {t.pattern}")
1202c1322
<                     raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))
---
>                     raise LexError(f"Lexer does not allow zero-width terminals. ({t.name}: {t.pattern})")
1204c1324,1325
<             assert set(conf.ignore) <= {t.name for t in terminals}
---
>             if not (set(conf.ignore) <= {t.name for t in terminals}):
>                 raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))
1215a1337
>         self.terminals_by_name = conf.terminals_by_name
1217c1339
<         self._mres = None
---
>         self._scanner = None
1219c1341
<     def _build(self):
---
>     def _build_scanner(self):
1231c1353
<         self._mres = build_mres(terminals, self.g_regex_flags, self.re, self.use_bytes)
---
>         self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)
1234,1237c1356,1359
<     def mres(self):
<         if self._mres is None:
<             self._build()
<         return self._mres
---
>     def scanner(self):
>         if self._scanner is None:
>             self._build_scanner()
>         return self._scanner
1240,1243c1362
<         for mre, type_from_index in self.mres:
<             m = mre.match(text, pos)
<             if m:
<                 return m.group(0), type_from_index[m.lastindex]
---
>         return self.scanner.match(text, pos)
1245c1364
<     def lex(self, state, _parser_state):
---
>     def lex(self, state, parser_state):
1248c1367
<                 yield self.next_token(state)
---
>                 yield self.next_token(state, parser_state)
1250c1369
<     def next_token(self, lex_state):
---
>     def next_token(self, lex_state, parser_state=None):
1255c1374
<                 allowed = {v for m, tfi in self.mres for v in tfi.values()} - self.ignore_types
---
>                 allowed = self.scanner.allowed_types - self.ignore_types
1259c1378,1379
<                                            allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token])
---
>                                            allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
>                                            state=parser_state, terminals_by_name=self.terminals_by_name)
1272c1392
<                         raise ValueError("Callbacks must return a token (returned %r)" % t)
---
>                         raise LexError("Callbacks must return a token (returned %r)" % t)
1293a1414,1419
>     def __eq__(self, other):
>         if not isinstance(other, LexerState):
>             return NotImplemented
> 
>         return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token
> 
1301,1305c1427,1428
<         terminals = list(conf.tokens)
<         tokens_by_name = {}
<         for t in terminals:
<             assert t.name not in tokens_by_name, t
<             tokens_by_name[t.name] = t
---
>         terminals = list(conf.terminals)
>         terminals_by_name = conf.terminals_by_name
1308c1431
<         trad_conf.tokens = terminals
---
>         trad_conf.terminals = terminals
1318d1440
<                 state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
1320c1442
<                 lexer_conf.tokens = state_tokens
---
>                 lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
1326c1448
<         assert trad_conf.tokens is terminals
---
>         assert trad_conf.terminals is terminals
1336c1458
<                 yield lexer.next_token(lexer_state)
---
>                 yield lexer.next_token(lexer_state, parser_state)
1344,1345c1466,1472
<             token = self.root_lexer.next_token(lexer_state)
<             raise UnexpectedToken(token, e.allowed, state=parser_state.position)
---
>             try:
>                 last_token = lexer_state.last_token  ##
> 
>                 token = self.root_lexer.next_token(lexer_state, parser_state)
>                 raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
>             except UnexpectedCharacters:
>                 raise e  ##
1357a1485,1490
>     def __copy__(self):
>         copied = object.__new__(LexerThread)
>         copied.lexer = self.lexer
>         copied.state = copy(self.state)
>         return copied
> 
1361c1494
<     __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags', 'use_bytes'
---
>     __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
1364,1366c1497,1500
<     def __init__(self, tokens, re_module, ignore=(), postlex=None, callbacks=None, g_regex_flags=0, skip_validation=False, use_bytes=False):
<         self.tokens = tokens    ##
< 
---
>     def __init__(self, terminals, re_module, ignore=(), postlex=None, callbacks=None, g_regex_flags=0, skip_validation=False, use_bytes=False):
>         self.terminals = terminals
>         self.terminals_by_name = {t.name: t for t in self.terminals}
>         assert len(self.terminals) == len(self.terminals_by_name)
1373a1508,1540
>         self.lexer_type = None
> 
>     @property
>     def tokens(self):
>         warn("LexerConf.tokens is deprecated. Use LexerConf.terminals instead", DeprecationWarning)
>         return self.terminals
> 
>     def _deserialize(self):
>         self.terminals_by_name = {t.name: t for t in self.terminals}
> 
>     def __deepcopy__(self, memo):
>         return type(self)(
>             deepcopy(self.terminals, memo),
>             self.re_module,
>             deepcopy(self.ignore, memo),
>             deepcopy(self.postlex, memo),
>             deepcopy(self.callbacks, memo),
>             deepcopy(self.g_regex_flags, memo),
>             deepcopy(self.skip_validation, memo),
>             deepcopy(self.use_bytes, memo),
>         )
> 
> 
> class ParserConf(Serialize):
>     __serialize_fields__ = 'rules', 'start', 'parser_type'
> 
>     def __init__(self, rules, callbacks, start):
>         assert isinstance(start, list)
>         self.rules = rules
>         self.callbacks = callbacks
>         self.start = start
> 
>         self.parser_type = None
1377c1544
< from itertools import repeat, product
---
> from itertools import product, repeat
1390a1558
> 
1392c1560
<     def __init__(self, node_builder):
---
>     def __init__(self, node_builder, node_filter=None):
1393a1562
>         self.node_filter = node_filter
1398,1399d1566
<         ##
< 
1400a1568,1576
>             ##
> 
>             ##
> 
>             ##
> 
>             ##
> 
> 
1402,1414c1578,1586
<             for c in children:
<                 if isinstance(c, Tree):
<                     child_meta = c.meta
<                     if not child_meta.empty:
<                         res_meta.line = child_meta.line
<                         res_meta.column = child_meta.column
<                         res_meta.start_pos = child_meta.start_pos
<                         res_meta.empty = False
<                         break
<                 elif isinstance(c, Token):
<                     res_meta.line = c.line
<                     res_meta.column = c.column
<                     res_meta.start_pos = c.pos_in_stream
---
> 
>             first_meta = self._pp_get_meta(children)
>             if first_meta is not None:
>                 if not hasattr(res_meta, 'line'):
>                     ##
> 
>                     res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
>                     res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
>                     res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
1416d1587
<                     break
1418,1430c1589,1597
<             for c in reversed(children):
<                 if isinstance(c, Tree):
<                     child_meta = c.meta
<                     if not child_meta.empty:
<                         res_meta.end_line = child_meta.end_line
<                         res_meta.end_column = child_meta.end_column
<                         res_meta.end_pos = child_meta.end_pos
<                         res_meta.empty = False
<                         break
<                 elif isinstance(c, Token):
<                     res_meta.end_line = c.end_line
<                     res_meta.end_column = c.end_column
<                     res_meta.end_pos = c.end_pos
---
>                 res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
>                 res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)
> 
>             last_meta = self._pp_get_meta(reversed(children))
>             if last_meta is not None:
>                 if not hasattr(res_meta, 'end_line'):
>                     res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
>                     res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
>                     res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
1432c1599,1601
<                     break
---
> 
>                 res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
>                 res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
1435a1605,1624
>     def _pp_get_meta(self, children):
>         for c in children:
>             if self.node_filter is not None and not self.node_filter(c):
>                 continue
>             if isinstance(c, Tree):
>                 if not c.meta.empty:
>                     return c.meta
>             elif isinstance(c, Token):
>                 return c
> 
> def make_propagate_positions(option):
>     if callable(option):
>         return partial(PropagatePositions, node_filter=option)
>     elif option is True:
>         return PropagatePositions
>     elif option is False:
>         return None
> 
>     raise ConfigurationError('Invalid option for propagate_positions: %r' % option)
> 
1562,1563c1751
<                 to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
<                 child.expand_kids_by_index(*to_expand)
---
>                 child.expand_kids_by_data('_ambig')
1655a1844,1845
>         propagate_positions = make_propagate_positions(self.propagate_positions)
> 
1664c1854
<                 self.propagate_positions and PropagatePositions,
---
>                 propagate_positions,
1696c1886
<                 raise GrammarError("Rule '%s' already exists" % (rule,))
---
>                 raise GrammarError(f"Rule '{rule}' already exists")
1704c1894
< class LALR_Parser(object):
---
> class LALR_Parser(Serialize):
1724,1725c1914,1949
<     def parse(self, *args):
<         return self.parser.parse(*args)
---
>     def parse_interactive(self, lexer, start):
>         return self.parser.parse(lexer, start, start_interactive=True)
> 
>     def parse(self, lexer, start, on_error=None):
>         try:
>             return self.parser.parse(lexer, start)
>         except UnexpectedInput as e:
>             if on_error is None:
>                 raise
> 
>             while True:
>                 if isinstance(e, UnexpectedCharacters):
>                     s = e.interactive_parser.lexer_state.state
>                     p = s.line_ctr.char_pos
> 
>                 if not on_error(e):
>                     raise e
> 
>                 if isinstance(e, UnexpectedCharacters):
>                     ##
> 
>                     if p == s.line_ctr.char_pos:
>                         s.line_ctr.feed(s.text[p:p+1])
> 
>                 try:
>                     return e.interactive_parser.resume_parse()
>                 except UnexpectedToken as e2:
>                     if (isinstance(e, UnexpectedToken)
>                         and e.token.type == e2.token.type == '$END'
>                         and e.interactive_parser == e2.interactive_parser):
>                         ##
> 
>                         raise e2
>                     e = e2
>                 except UnexpectedCharacters as e2:
>                     e = e2
1754a1979,1985
>     ##
> 
>     def __eq__(self, other):
>         if not isinstance(other, ParserState):
>             return NotImplemented
>         return len(self.state_stack) == len(other.state_stack) and self.position == other.position
> 
1780c2011
<                 raise UnexpectedToken(token, expected, state=state, puppet=None)
---
>                 raise UnexpectedToken(token, expected, state=self, interactive_parser=None)
1789c2020
<                 value_stack.append(token)
---
>                 value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
1819c2050
<     def parse(self, lexer, start, value_stack=None, state_stack=None):
---
>     def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
1821a2053,2054
>         if start_interactive:
>             return InteractiveParser(self, parser_state, parser_state.lexer)
1823a2057
> 
1832,1833c2066,2067
<             token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
<             return state.feed_token(token, True)
---
>             end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
>             return state.feed_token(end_token, True)
1836c2070
<                 e.puppet = ParserPuppet(self, state, state.lexer)
---
>                 e.interactive_parser = InteractiveParser(self, state, state.lexer)
1918,1941c2152,2192
< def get_frontend(parser, lexer):
<     if parser=='lalr':
<         if lexer is None:
<             raise ValueError('The LALR parser requires use of a lexer')
<         elif lexer == 'standard':
<             return LALR_TraditionalLexer
<         elif lexer == 'contextual':
<             return LALR_ContextualLexer
<         elif issubclass(lexer, Lexer):
<             class CustomLexerWrapper(Lexer):
<                 def __init__(self, lexer_conf):
<                     self.lexer = lexer(lexer_conf)
<                 def lex(self, lexer_state, parser_state):
<                     return self.lexer.lex(lexer_state.text)
< 
<             class LALR_CustomLexerWrapper(LALR_WithLexer):
<                 def __init__(self, lexer_conf, parser_conf, options=None):
<                     super(LALR_CustomLexerWrapper, self).__init__(lexer_conf, parser_conf, options=options)
<                 def init_lexer(self):
<                     future_interface = getattr(lexer, '__future_interface__', False)
<                     if future_interface:
<                         self.lexer = lexer(self.lexer_conf)
<                     else:
<                         self.lexer = CustomLexerWrapper(self.lexer_conf)
---
> def _wrap_lexer(lexer_class):
>     future_interface = getattr(lexer_class, '__future_interface__', False)
>     if future_interface:
>         return lexer_class
>     else:
>         class CustomLexerWrapper(Lexer):
>             def __init__(self, lexer_conf):
>                 self.lexer = lexer_class(lexer_conf)
>             def lex(self, lexer_state, parser_state):
>                 return self.lexer.lex(lexer_state.text)
>         return CustomLexerWrapper
> 
> 
> class MakeParsingFrontend:
>     def __init__(self, parser_type, lexer_type):
>         self.parser_type = parser_type
>         self.lexer_type = lexer_type
> 
>     def __call__(self, lexer_conf, parser_conf, options):
>         assert isinstance(lexer_conf, LexerConf)
>         assert isinstance(parser_conf, ParserConf)
>         parser_conf.parser_type = self.parser_type
>         lexer_conf.lexer_type = self.lexer_type
>         return ParsingFrontend(lexer_conf, parser_conf, options)
> 
>     def deserialize(self, data, memo, lexer_conf, callbacks, options):
>         parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
>         parser = LALR_Parser.deserialize(data['parser'], memo, callbacks, options.debug)
>         parser_conf.callbacks = callbacks
>         return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)
> 
> 
> 
> 
> class ParsingFrontend(Serialize):
>     __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser', 'options'
> 
>     def __init__(self, lexer_conf, parser_conf, options, parser=None):
>         self.parser_conf = parser_conf
>         self.lexer_conf = lexer_conf
>         self.options = options
1943c2194,2198
<             return LALR_CustomLexerWrapper
---
>         ##
> 
>         if parser:  ##
> 
>             self.parser = parser
1945,1959c2200,2223
<             raise ValueError('Unknown lexer: %s' % lexer)
<     elif parser=='earley':
<         if lexer=='standard':
<             return Earley
<         elif lexer=='dynamic':
<             return XEarley
<         elif lexer=='dynamic_complete':
<             return XEarley_CompleteLex
<         elif lexer=='contextual':
<             raise ValueError('The Earley parser does not support the contextual parser')
<         else:
<             raise ValueError('Unknown lexer: %s' % lexer)
<     elif parser == 'cyk':
<         if lexer == 'standard':
<             return CYK
---
>             create_parser = {
>                 'lalr': create_lalr_parser,
>                 'earley': create_earley_parser,
>                 'cyk': CYK_FrontEnd,
>             }[parser_conf.parser_type]
>             self.parser = create_parser(lexer_conf, parser_conf, options)
> 
>         ##
> 
>         lexer_type = lexer_conf.lexer_type
>         self.skip_lexer = False
>         if lexer_type in ('dynamic', 'dynamic_complete'):
>             assert lexer_conf.postlex is None
>             self.skip_lexer = True
>             return
> 
>         try:
>             create_lexer = {
>                 'standard': create_traditional_lexer,
>                 'contextual': create_contextual_lexer,
>             }[lexer_type]
>         except KeyError:
>             assert issubclass(lexer_type, Lexer), lexer_type
>             self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
1961,1963c2225
<             raise ValueError('CYK parser requires using standard parser.')
<     else:
<         raise ValueError('Unknown parser: %s' % parser)
---
>             self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex)
1964a2227,2228
>         if lexer_conf.postlex:
>             self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)
1966,1967c2230
< class _ParserFrontend(Serialize):
<     def _parse(self, start, input, *args):
---
>     def _verify_start(self, start=None):
1969,1973c2232,2265
<             start = self.start
<             if len(start) > 1:
<                 raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
<             start ,= start
<         return self.parser.parse(input, start, *args)
---
>             start_decls = self.parser_conf.start
>             if len(start_decls) > 1:
>                 raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
>             start ,= start_decls
>         elif start not in self.parser_conf.start:
>             raise ConfigurationError(f"Unknown start rule {start}. Must be one of {self.parser_conf.start!r}")
>         return start
> 
>     def parse(self, text, start=None, on_error=None):
>         chosen_start = self._verify_start(start)
>         stream = text if self.skip_lexer else LexerThread(self.lexer, text)
>         kw = {} if on_error is None else {'on_error': on_error}
>         return self.parser.parse(stream, chosen_start, **kw)
> 
>     def parse_interactive(self, text=None, start=None):
>         chosen_start = self._verify_start(start)
>         if self.parser_conf.parser_type != 'lalr':
>             raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
>         stream = text if self.skip_lexer else LexerThread(self.lexer, text)
>         return self.parser.parse_interactive(stream, chosen_start)
> 
> 
> def get_frontend(parser, lexer):
>     assert_config(parser, ('lalr', 'earley', 'cyk'))
>     if not isinstance(lexer, type):     ##
> 
>         expected = {
>             'lalr': ('standard', 'contextual'),
>             'earley': ('standard', 'dynamic', 'dynamic_complete'),
>             'cyk': ('standard', ),
>          }[parser]
>         assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)
> 
>     return MakeParsingFrontend(parser, lexer)
1997,2029d2288
< class WithLexer(_ParserFrontend):
<     lexer = None
<     parser = None
<     lexer_conf = None
<     start = None
< 
<     __serialize_fields__ = 'parser', 'lexer_conf', 'start'
<     __serialize_namespace__ = LexerConf,
< 
<     def __init__(self, lexer_conf, parser_conf, options=None):
<         self.lexer_conf = lexer_conf
<         self.start = parser_conf.start
<         self.postlex = lexer_conf.postlex
< 
<     @classmethod
<     def deserialize(cls, data, memo, callbacks, options):
<         inst = super(WithLexer, cls).deserialize(data, memo)
< 
<         inst.postlex = options.postlex
<         inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks, options.debug)
< 
<         terminals = [item for item in memo.values() if isinstance(item, TerminalDef)]
<         inst.lexer_conf.callbacks = _get_lexer_callbacks(options.transformer, terminals)
<         inst.lexer_conf.re_module = regex if options.regex else re
<         inst.lexer_conf.use_bytes = options.use_bytes
<         inst.lexer_conf.g_regex_flags = options.g_regex_flags
<         inst.lexer_conf.skip_validation = True
<         inst.init_lexer()
< 
<         return inst
< 
<     def _serialize(self, data, memo):
<         data['parser'] = data['parser'].serialize(memo)
2031,2047c2290,2291
<     def make_lexer(self, text):
<         lexer = self.lexer
<         if self.postlex:
<             lexer = PostLexConnector(self.lexer, self.postlex)
<         return LexerThread(lexer, text)
< 
<     def parse(self, text, start=None):
<         return self._parse(start, self.make_lexer(text))
< 
<     def init_traditional_lexer(self):
<         self.lexer = TraditionalLexer(self.lexer_conf)
< 
< class LALR_WithLexer(WithLexer):
<     def __init__(self, lexer_conf, parser_conf, options=None):
<         debug = options.debug if options else False
<         self.parser = LALR_Parser(parser_conf, debug=debug)
<         WithLexer.__init__(self, lexer_conf, parser_conf, options)
---
> def create_traditional_lexer(lexer_conf, parser, postlex):
>     return TraditionalLexer(lexer_conf)
2049c2293,2296
<         self.init_lexer()
---
> def create_contextual_lexer(lexer_conf, parser, postlex):
>     states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
>     always_accept = postlex.always_accept if postlex else ()
>     return ContextualLexer(lexer_conf, states, always_accept=always_accept)
2051,2052c2298,2300
<     def init_lexer(self, **kw):
<         raise NotImplementedError()
---
> def create_lalr_parser(lexer_conf, parser_conf, options=None):
>     debug = options.debug if options else False
>     return LALR_Parser(parser_conf, debug=debug)
2054,2062d2301
< class LALR_TraditionalLexer(LALR_WithLexer):
<     def init_lexer(self):
<         self.init_traditional_lexer()
< 
< class LALR_ContextualLexer(LALR_WithLexer):
<     def init_lexer(self):
<         states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
<         always_accept = self.postlex.always_accept if self.postlex else ()
<         self.lexer = ContextualLexer(self.lexer_conf, states, always_accept=always_accept)
2063a2303,2304
> create_earley_parser = NotImplemented
> CYK_FrontEnd = NotImplemented
2080a2322
>             Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
2082c2324
<             When True, the ``[]`` operator returns ``None`` when not matched.
---
>             When ``True``, the ``[]`` operator returns ``None`` when not matched.
2138,2139c2380
< 
<     **=== End Options ===**
---
>     **=== End of Options ===**
2191c2432
<                 if isinstance(default, bool) and name not in ('cache', 'use_bytes'):
---
>                 if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
2203c2444,2445
<         assert self.parser in ('earley', 'lalr', 'cyk', None)
---
> 
>         assert_config(self.parser, ('earley', 'lalr', 'cyk', None))
2206c2448
<             raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
---
>             raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
2210c2452
<             raise ValueError("Unknown options: %s" % o.keys())
---
>             raise ConfigurationError("Unknown options: %s" % o.keys())
2214c2456
<             return self.options[name]
---
>             return self.__dict__['options'][name]
2219c2461
<         assert name in self.options
---
>         assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
2234c2476
< _LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class'}
---
> _LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class'}
2239a2482,2489
> class PostLex(ABC):
>     @abstractmethod
>     def process(self, stream):
>         return stream
> 
>     always_accept = ()
> 
> 
2275,2280d2524
<         assert isinstance(grammar, STRING_TYPE)
<         self.source_grammar = grammar
<         if self.options.use_bytes:
<             if not isascii(grammar):
<                 raise ValueError("Grammar must be ascii only, when use_bytes=True")
< 
2282,2289c2526,2539
<         if self.options.cache:
<             if self.options.parser != 'lalr':
<                 raise NotImplementedError("cache only works with parser='lalr' for now")
<             if isinstance(self.options.cache, STRING_TYPE):
<                 cache_fn = self.options.cache
<             else:
<                 if self.options.cache is not True:
<                     raise ValueError("cache argument must be bool or str")
---
>         cache_md5 = None
>         if isinstance(grammar, STRING_TYPE):
>             self.source_grammar = grammar
>             if self.options.use_bytes:
>                 if not isascii(grammar):
>                     raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")
>                 if sys.version_info[0] == 2 and self.options.use_bytes != 'force':
>                     raise ConfigurationError("`use_bytes=True` may have issues on python2."
>                                               "Use `use_bytes='force'` to use it at your own risk.")
> 
>             if self.options.cache:
>                 if self.options.parser != 'lalr':
>                     raise ConfigurationError("cache only works with parser='lalr' for now")
> 
2291d2540
<                 from . import __version__
2293,2295c2542,2544
<                 s = grammar + options_str + __version__
<                 md5 = hashlib.md5(s.encode()).hexdigest()
<                 cache_fn = tempfile.gettempdir() + '/.lark_cache_%s.tmp' % md5
---
>                 from . import __version__
>                 s = grammar + options_str + __version__ + str(sys.version_info[:2])
>                 cache_md5 = hashlib.md5(s.encode('utf8')).hexdigest()
2297,2299c2546,2586
<             if FS.exists(cache_fn):
<                 logger.debug('Loading grammar from cache: %s', cache_fn)
<                 ##
---
>                 if isinstance(self.options.cache, STRING_TYPE):
>                     cache_fn = self.options.cache
>                 else:
>                     if self.options.cache is not True:
>                         raise ConfigurationError("cache argument must be bool or str")
>                     ##
> 
>                     cache_fn = tempfile.gettempdir() + '/.lark_cache_%s_%s_%s.tmp' % ((cache_md5,) + sys.version_info[:2])
> 
>                 if FS.exists(cache_fn):
>                     logger.debug('Loading grammar from cache: %s', cache_fn)
>                     ##
> 
>                     for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
>                         del options[name]
>                     with FS.open(cache_fn, 'rb') as f:
>                         old_options = self.options
>                         try:
>                             file_md5 = f.readline().rstrip(b'\n')
>                             cached_used_files = pickle.load(f)
>                             if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
>                                 cached_parser_data = pickle.load(f)
>                                 self._load(cached_parser_data, **options)
>                                 return
>                         except Exception: ##
> 
>                             logger.exception("Failed to load Lark from cache: %r. We will try to carry on." % cache_fn)
> 
>                             ##
> 
>                             ##
> 
>                             self.options = old_options
> 
> 
>             ##
> 
>             self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
>         else:
>             assert isinstance(grammar, Grammar)
>             self.grammar = grammar
2301,2305d2587
<                 for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
<                     del options[name]
<                 with FS.open(cache_fn, 'rb') as f:
<                     self._load(f, **options)
<                 return
2311c2593,2598
<                 self.options.lexer = 'dynamic'
---
>                 if self.options.postlex is not None:
>                     logger.info("postlex can't be used with the dynamic lexer, so we use standard instead. "
>                                 "Consider using lalr with contextual instead of earley")
>                     self.options.lexer = 'standard'
>                 else:
>                     self.options.lexer = 'dynamic'
2317c2604,2610
<         assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)
---
>         if isinstance(lexer, type):
>             assert issubclass(lexer, Lexer)     ##
> 
>         else:
>             assert_config(lexer, ('standard', 'contextual', 'dynamic', 'dynamic_complete'))
>             if self.options.postlex is not None and 'dynamic' in lexer:
>                 raise ConfigurationError("Can't use postlex with a dynamic lexer. Use standard or contextual instead")
2323,2325c2616
<             disambig_parsers = ['earley', 'cyk']
<             assert self.options.parser in disambig_parsers, (
<                 'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)
---
>             assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")
2331c2622
<             raise ValueError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
---
>             raise ConfigurationError(f"invalid priority option: {self.options.priority!r}. Must be one of {_VALID_PRIORITY_OPTIONS!r}")
2334,2338c2625
<             raise ValueError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))
< 
<         ##
< 
<         self.grammar = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
---
>             raise ConfigurationError(f"invalid ambiguity option: {self.options.ambiguity!r}. Must be one of {_VALID_AMBIGUITY_OPTIONS!r}")
2340c2627,2629
<         if self.options.postlex is not None:
---
>         if self.options.parser is None:
>             terminals_to_keep = '*'
>         elif self.options.postlex is not None:
2376,2381c2665,2668
<         lexer_callbacks = (_get_lexer_callbacks(self.options.transformer, self.terminals)
<                            if self.options.transformer
<                            else {})
<         lexer_callbacks.update(self.options.lexer_callbacks)
< 
<         self.lexer_conf = LexerConf(self.terminals, re_module, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes)
---
>         self.lexer_conf = LexerConf(
>                 self.terminals, re_module, self.ignore_tokens, self.options.postlex,
>                 self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
>             )
2390a2678,2679
>                 f.write(cache_md5.encode('utf8') + b'\n')
>                 pickle.dump(used_files, f)
2398,2399c2687,2693
<     def _build_lexer(self):
<         return TraditionalLexer(self.lexer_conf)
---
>     def _build_lexer(self, dont_ignore=False):
>         lexer_conf = self.lexer_conf
>         if dont_ignore:
>             from copy import copy
>             lexer_conf = copy(lexer_conf)
>             lexer_conf.ignore = ()
>         return TraditionalLexer(lexer_conf)
2402,2403c2696
<         self.parser_class = get_frontend(self.options.parser, self.options.lexer)
<         self._callbacks = None
---
>         self._callbacks = {}
2414a2708
>         self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))
2417a2712
>         parser_class = get_frontend(self.options.parser, self.options.lexer)
2419c2714
<         return self.parser_class(self.lexer_conf, parser_conf, options=self.options)
---
>         return parser_class(self.lexer_conf, parser_conf, options=self.options)
2431a2727,2736
>     def _deserialize_lexer_conf(self, data, memo, options):
>         lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
>         lexer_conf.callbacks = options.lexer_callbacks or {}
>         lexer_conf.re_module = regex if options.regex else re
>         lexer_conf.use_bytes = options.use_bytes
>         lexer_conf.g_regex_flags = options.g_regex_flags
>         lexer_conf.skip_validation = True
>         lexer_conf.postlex = options.postlex
>         return lexer_conf
> 
2437c2742
<         memo = d['memo']
---
>         memo_json = d['memo']
2440,2441c2745,2746
<         assert memo
<         memo = SerializeMemoizer.deserialize(memo, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
---
>         assert memo_json
>         memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
2444c2749
<             raise ValueError("Some options are not allowed when loading a Parser: {}"
---
>             raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
2449a2755,2757
>         parser_class = get_frontend(self.options.parser, self.options.lexer)
>         self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
>         self.terminals = self.lexer_conf.terminals
2451c2759,2760
<         self.parser = self.parser_class.deserialize(
---
>         self._terminals_dict = {t.name: t for t in self.terminals}
>         self.parser = parser_class.deserialize(
2453a2763
>             self.lexer_conf,
2458,2459d2767
<         self.terminals = self.parser.lexer_conf.tokens
<         self._terminals_dict = {t.name: t for t in self.terminals}
2479,2480c2787,2788
<         package = FromPackageLoader(package, search_paths)
<         full_path, text = package(None, grammar_path)
---
>         package_loader = FromPackageLoader(package, search_paths)
>         full_path, text = package_loader(None, grammar_path)
2483c2791
<         options['import_paths'].append(package)
---
>         options['import_paths'].append(package_loader)
2487c2795
<         return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)
---
>         return f'Lark(open({self.source_path!r}), parser={self.options.parser!r}, lexer={self.options.lexer!r}, ...)'
2490c2798
<     def lex(self, text):
---
>     def lex(self, text, dont_ignore=False):
2492,2494c2800,2805
<         if not hasattr(self, 'lexer'):
<             self.lexer = self._build_lexer()
<         stream = self.lexer.lex(text)
---
>         if not hasattr(self, 'lexer') or dont_ignore:
>             lexer = self._build_lexer(dont_ignore)
>         else:
>             lexer = self.lexer
>         lexer_thread = LexerThread(lexer, text)
>         stream = lexer_thread.lex(None)
2503c2814
<     def parse(self, text, start=None, on_error=None):
---
>     def parse_interactive(self, text=None, start=None):
2504a2816
>         return self.parser.parse_interactive(text, start=start)
2506,2535c2818,2820
<         try:
<             return self.parser.parse(text, start=start)
<         except UnexpectedInput as e:
<             if on_error is None:
<                 raise
< 
<             while True:
<                 if isinstance(e, UnexpectedCharacters):
<                     s = e.puppet.lexer_state.state
<                     p = s.line_ctr.char_pos
< 
<                 if not on_error(e):
<                     raise e
< 
<                 if isinstance(e, UnexpectedCharacters):
<                     ##
< 
<                     if p == s.line_ctr.char_pos:
<                         s.line_ctr.feed(s.text[p:p+1])
< 
<                 try:
<                     return e.puppet.resume_parse()
<                 except UnexpectedToken as e2:
<                     if isinstance(e, UnexpectedToken) and e.token.type == e2.token.type == '$END' and e.puppet == e2.puppet:
<                         ##
< 
<                         raise e2
<                     e = e2
<                 except UnexpectedCharacters as e2:
<                     e = e2
---
>     def parse(self, text, start=None, on_error=None):
>         #--
>         return self.parser.parse(text, start=start, on_error=on_error)
2539c2824
<         warn("Lark.source attribute has been renamed to Lark.source_path", DeprecationWarning)
---
>         warn("Attribute Lark.source was renamed to Lark.source_path", DeprecationWarning)
2548c2833
<         warn("Lark.grammar_source attribute has been renamed to Lark.source_grammar", DeprecationWarning)
---
>         warn("Attribute Lark.grammar_source was renamed to Lark.source_grammar", DeprecationWarning)
2557c2842,2906
< import pickle, zlib, base64
---
> class DedentError(LarkError):
>     pass
> 
> class Indenter(PostLex):
>     def __init__(self):
>         self.paren_level = None
>         self.indent_level = None
>         assert self.tab_len > 0
> 
>     def handle_NL(self, token):
>         if self.paren_level > 0:
>             return
> 
>         yield token
> 
>         indent_str = token.rsplit('\n', 1)[1] ##
> 
>         indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len
> 
>         if indent > self.indent_level[-1]:
>             self.indent_level.append(indent)
>             yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
>         else:
>             while indent < self.indent_level[-1]:
>                 self.indent_level.pop()
>                 yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)
> 
>             if indent != self.indent_level[-1]:
>                 raise DedentError(f'Unexpected dedent to column {indent}. Expected dedent to {self.indent_level[-1]}')
> 
>     def _process(self, stream):
>         for token in stream:
>             if token.type == self.NL_type:
>                 yield from self.handle_NL(token)
>             else:
>                 yield token
> 
>             if token.type in self.OPEN_PAREN_types:
>                 self.paren_level += 1
>             elif token.type in self.CLOSE_PAREN_types:
>                 self.paren_level -= 1
>                 assert self.paren_level >= 0
> 
>         while len(self.indent_level) > 1:
>             self.indent_level.pop()
>             yield Token(self.DEDENT_type, '')
> 
>         assert self.indent_level == [0], self.indent_level
> 
>     def process(self, stream):
>         self.paren_level = 0
>         self.indent_level = [0]
>         return self._process(stream)
> 
>     ##
> 
>     @property
>     def always_accept(self):
>         return (self.NL_type,)
> 
> 
> import base64
> import pickle
> import zlib
> 
2559c2908
< {'parser': {'parser': {'tokens': {0: 'RSQB', 1: 'COMMA', 2: 'option_parm', 3: 'option_highlevel', 4: 'VAR', 5: 'record_highlevel', 6: 'predefined_typestr', 7: 'LPAR', 8: 'LSQB', 9: 'record_tuple', 10: 'UNKNOWN', 11: 'HARDCODED', 12: 'UNQUOTED_STRING', 13: 'listtype', 14: 'input', 15: 'list_single', 16: 'UNION', 17: 'STRUCT', 18: 'option_single', 19: 'QMARK', 20: 'regular_outparm', 21: 'union_parm', 22: 'regular_inparm', 23: 'LBRACE', 24: 'uniontype', 25: 'TUPLE', 26: 'TYPE', 27: 'record', 28: 'unknown', 29: 'list_parm', 30: 'optiontype', 31: 'union_single', 32: 'CATEGORICAL', 33: 'record_dict', 34: 'categories', 35: 'regular', 36: 'number', 37: 'OPTION', 38: 'record_tuple_param', 39: 'record_struct', 40: 'SIGNED_NUMBER', 41: 'primitive', 42: 'PARAMETERS', 43: 'def_option', 44: '$END', 45: 'RBRACE', 46: 'RPAR', 47: 'STAR', 48: '__union_single_star_0', 49: 'start', 50: '__record_struct_star_2', 51: 'COLON', 52: '__ANON_1', 53: 'string', 54: 'options', 55: '__record_dict_star_1', 56: 'TRUE', 57: 'NULL', 58: 'list_obj', 59: 'FALSE', 60: 'dict_obj', 61: 'json', 62: '__list_obj_star_3', 63: 'pair', 64: '__ANON_0', 65: '__dict_obj_star_4', 66: 'EQUAL'}, 'states': {0: {0: (1, {'@': 29}), 1: (1, {'@': 29})}, 1: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 14: (0, 163), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 2: {1: (0, 3)}, 3: {42: (0, 193), 43: (0, 113)}, 4: {0: (1, {'@': 30}), 1: (1, {'@': 30}), 44: (1, {'@': 30}), 45: (1, {'@': 30}), 8: (1, {'@': 30}), 46: (1, {'@': 30})}, 5: {47: (0, 182)}, 6: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 14: (0, 13), 19: (0, 142), 18: (0, 143), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 7: {8: (0, 101)}, 8: {0: (1, {'@': 31}), 1: (1, {'@': 31}), 44: (1, {'@': 31}), 45: (1, {'@': 31}), 8: (1, {'@': 31}), 46: (1, {'@': 31})}, 9: {0: (1, {'@': 32}), 1: (1, {'@': 32}), 44: (1, {'@': 32}), 45: (1, {'@': 32}), 8: (1, {'@': 32}), 46: (1, {'@': 32})}, 10: {0: (0, 77), 1: (0, 179)}, 11: {42: (0, 193), 43: (0, 93)}, 12: {45: (1, {'@': 33}), 1: (1, {'@': 33})}, 13: {48: (0, 10), 1: (0, 164), 0: (0, 83)}, 14: {45: (1, {'@': 34}), 1: (1, {'@': 34})}, 15: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 14: (0, 153), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 49: (0, 65), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 16: {0: (1, {'@': 35}), 1: (1, {'@': 35}), 44: (1, {'@': 35}), 45: (1, {'@': 35}), 8: (1, {'@': 35}), 46: (1, {'@': 35})}, 17: {0: (1, {'@': 36}), 1: (1, {'@': 36}), 44: (1, {'@': 36}), 45: (1, {'@': 36}), 8: (1, {'@': 36}), 46: (1, {'@': 36})}, 18: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 14: (0, 72), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 19: {0: (1, {'@': 37}), 1: (1, {'@': 37}), 44: (1, {'@': 37}), 45: (1, {'@': 37}), 8: (1, {'@': 37}), 46: (1, {'@': 37})}, 20: {45: (1, {'@': 38}), 1: (1, {'@': 38}), 0: (1, {'@': 38})}, 21: {0: (0, 75), 1: (0, 33), 50: (0, 104)}, 22: {0: (1, {'@': 39}), 1: (1, {'@': 39}), 44: (1, {'@': 39}), 45: (1, {'@': 39}), 8: (1, {'@': 39}), 46: (1, {'@': 39})}, 23: {8: (0, 1)}, 24: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 14: (0, 145), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 25: {0: (1, {'@': 40}), 1: (1, {'@': 40}), 44: (1, {'@': 40}), 45: (1, {'@': 40}), 8: (1, {'@': 40}), 46: (1, {'@': 40})}, 26: {0: (1, {'@': 41}), 1: (1, {'@': 41}), 44: (1, {'@': 41}), 45: (1, {'@': 41}), 8: (1, {'@': 41}), 46: (1, {'@': 41})}, 27: {51: (0, 140)}, 28: {0: (1, {'@': 42}), 1: (1, {'@': 42}), 45: (1, {'@': 42})}, 29: {0: (1, {'@': 43}), 1: (1, {'@': 43}), 44: (1, {'@': 43}), 45: (1, {'@': 43}), 8: (1, {'@': 43}), 46: (1, {'@': 43})}, 30: {47: (1, {'@': 44}), 0: (1, {'@': 44}), 1: (1, {'@': 44}), 45: (1, {'@': 44})}, 31: {0: (0, 107)}, 32: {0: (1, {'@': 45}), 1: (1, {'@': 45}), 45: (1, {'@': 45})}, 33: {52: (0, 61), 53: (0, 67)}, 34: {0: (1, {'@': 46}), 1: (1, {'@': 46}), 45: (1, {'@': 46})}, 35: {54: (0, 118), 8: (0, 183), 0: (1, {'@': 47}), 1: (1, {'@': 47}), 44: (1, {'@': 47}), 45: (1, {'@': 47}), 46: (1, {'@': 47})}, 36: {8: (0, 18)}, 37: {55: (0, 81), 45: (0, 45), 1: (0, 115)}, 38: {0: (1, {'@': 48}), 1: (1, {'@': 48}), 44: (1, {'@': 48}), 45: (1, {'@': 48}), 8: (1, {'@': 48}), 46: (1, {'@': 48})}, 39: {0: (1, {'@': 49}), 1: (1, {'@': 49}), 45: (1, {'@': 49})}, 40: {51: (0, 68)}, 41: {0: (0, 43)}, 42: {0: (1, {'@': 50}), 1: (1, {'@': 50}), 45: (1, {'@': 50})}, 43: {0: (1, {'@': 51}), 1: (1, {'@': 51}), 44: (1, {'@': 51}), 45: (1, {'@': 51}), 8: (1, {'@': 51}), 46: (1, {'@': 51})}, 44: {0: (1, {'@': 52}), 1: (1, {'@': 52}), 45: (1, {'@': 52})}, 45: {0: (1, {'@': 53}), 1: (1, {'@': 53}), 44: (1, {'@': 53}), 45: (1, {'@': 53}), 8: (1, {'@': 53}), 46: (1, {'@': 53})}, 46: {0: (1, {'@': 54}), 1: (1, {'@': 54})}, 47: {0: (1, {'@': 55}), 1: (1, {'@': 55}), 44: (1, {'@': 55}), 45: (1, {'@': 55}), 8: (1, {'@': 55}), 46: (1, {'@': 55})}, 48: {0: (1, {'@': 56}), 1: (1, {'@': 56}), 44: (1, {'@': 56}), 45: (1, {'@': 56}), 8: (1, {'@': 56}), 46: (1, {'@': 56})}, 49: {1: (0, 98)}, 50: {23: (0, 173), 56: (0, 66), 57: (0, 34), 58: (0, 42), 59: (0, 121), 60: (0, 39), 8: (0, 125), 61: (0, 46), 52: (0, 61), 53: (0, 100), 36: (0, 28), 40: (0, 30)}, 51: {47: (0, 122)}, 52: {8: (0, 6)}, 53: {0: (1, {'@': 57}), 1: (1, {'@': 57}), 44: (1, {'@': 57}), 45: (1, {'@': 57}), 8: (1, {'@': 57}), 46: (1, {'@': 57})}, 54: {23: (0, 173), 56: (0, 66), 61: (0, 12), 57: (0, 34), 58: (0, 42), 59: (0, 121), 60: (0, 39), 8: (0, 125), 52: (0, 61), 53: (0, 100), 36: (0, 28), 40: (0, 30)}, 55: {47: (0, 24)}, 56: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 14: (0, 37), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 57: {53: (0, 27), 52: (0, 61)}, 58: {0: (1, {'@': 58}), 1: (1, {'@': 58}), 45: (1, {'@': 58})}, 59: {0: (1, {'@': 59}), 1: (1, {'@': 59}), 44: (1, {'@': 59}), 45: (1, {'@': 59}), 8: (1, {'@': 59}), 46: (1, {'@': 59})}, 60: {53: (0, 88), 52: (0, 61)}, 61: {0: (1, {'@': 60}), 1: (1, {'@': 60}), 45: (1, {'@': 60}), 51: (1, {'@': 60})}, 62: {0: (1, {'@': 61}), 1: (1, {'@': 61}), 44: (1, {'@': 61}), 45: (1, {'@': 61}), 8: (1, {'@': 61}), 46: (1, {'@': 61})}, 63: {62: (0, 117), 1: (0, 50), 0: (0, 44)}, 64: {48: (0, 160), 1: (0, 164), 46: (0, 167)}, 65: {}, 66: {0: (1, {'@': 62}), 1: (1, {'@': 62}), 45: (1, {'@': 62})}, 67: {0: (1, {'@': 63}), 1: (1, {'@': 63})}, 68: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 14: (0, 20), 41: (0, 48)}, 69: {0: (0, 59)}, 70: {45: (1, {'@': 64}), 1: (1, {'@': 64})}, 71: {0: (1, {'@': 65}), 1: (1, {'@': 65}), 44: (1, {'@': 65}), 45: (1, {'@': 65}), 8: (1, {'@': 65}), 46: (1, {'@': 65})}, 72: {48: (0, 186), 1: (0, 164), 0: (0, 82)}, 73: {0: (1, {'@': 66}), 1: (1, {'@': 66}), 45: (1, {'@': 66})}, 74: {0: (1, {'@': 67}), 1: (1, {'@': 67}), 44: (1, {'@': 67}), 45: (1, {'@': 67}), 8: (1, {'@': 67}), 46: (1, {'@': 67})}, 75: {1: (0, 52)}, 76: {0: (1, {'@': 68}), 1: (1, {'@': 68}), 44: (1, {'@': 68}), 45: (1, {'@': 68}), 8: (1, {'@': 68}), 46: (1, {'@': 68})}, 77: {1: (0, 169)}, 78: {51: (0, 56)}, 79: {42: (0, 193), 43: (0, 41)}, 80: {0: (1, {'@': 69}), 1: (1, {'@': 69}), 44: (1, {'@': 69}), 45: (1, {'@': 69}), 8: (1, {'@': 69}), 46: (1, {'@': 69})}, 81: {45: (0, 99), 1: (0, 57)}, 82: {1: (0, 79)}, 83: {1: (0, 94)}, 84: {0: (0, 138), 1: (0, 179)}, 85: {36: (0, 110), 40: (0, 30), 4: (0, 5)}, 86: {0: (1, {'@': 70}), 1: (1, {'@': 70}), 44: (1, {'@': 70}), 45: (1, {'@': 70}), 8: (1, {'@': 70}), 46: (1, {'@': 70})}, 87: {0: (0, 123), 55: (0, 106), 1: (0, 115)}, 88: {0: (1, {'@': 71}), 1: (1, {'@': 71})}, 89: {0: (1, {'@': 72}), 1: (1, {'@': 72}), 44: (1, {'@': 72}), 45: (1, {'@': 72}), 8: (1, {'@': 72}), 46: (1, {'@': 72})}, 90: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 14: (0, 64), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 91: {8: (0, 170)}, 92: {48: (0, 84), 1: (0, 164), 0: (0, 156)}, 93: {0: (0, 62)}, 94: {42: (0, 193), 43: (0, 189)}, 95: {54: (0, 26), 8: (0, 183), 0: (1, {'@': 73}), 1: (1, {'@': 73}), 44: (1, {'@': 73}), 45: (1, {'@': 73}), 46: (1, {'@': 73})}, 96: {0: (0, 71)}, 97: {63: (0, 14), 53: (0, 102), 52: (0, 61)}, 98: {8: (0, 181)}, 99: {0: (1, {'@': 74}), 1: (1, {'@': 74}), 44: (1, {'@': 74}), 45: (1, {'@': 74}), 8: (1, {'@': 74}), 46: (1, {'@': 74})}, 100: {0: (1, {'@': 75}), 1: (1, {'@': 75}), 45: (1, {'@': 75})}, 101: {64: (0, 126)}, 102: {51: (0, 54)}, 103: {0: (0, 89)}, 104: {0: (0, 49), 1: (0, 60)}, 105: {0: (1, {'@': 76})}, 106: {0: (0, 168), 1: (0, 57)}, 107: {0: (1, {'@': 77}), 1: (1, {'@': 77}), 44: (1, {'@': 77}), 45: (1, {'@': 77}), 8: (1, {'@': 77}), 46: (1, {'@': 77})}, 108: {0: (1, {'@': 78}), 1: (1, {'@': 78}), 44: (1, {'@': 78}), 45: (1, {'@': 78}), 8: (1, {'@': 78}), 46: (1, {'@': 78})}, 109: {0: (0, 9)}, 110: {47: (0, 161)}, 111: {42: (0, 193), 43: (0, 109)}, 112: {52: (0, 61), 63: (0, 70), 53: (0, 102)}, 113: {0: (0, 185)}, 114: {0: (1, {'@': 79}), 1: (1, {'@': 79}), 44: (1, {'@': 79}), 45: (1, {'@': 79}), 8: (1, {'@': 79}), 46: (1, {'@': 79})}, 115: {53: (0, 40), 52: (0, 61)}, 116: {1: (0, 112), 65: (0, 120), 45: (0, 73)}, 117: {0: (0, 137), 1: (0, 174)}, 118: {0: (1, {'@': 80}), 1: (1, {'@': 80}), 44: (1, {'@': 80}), 45: (1, {'@': 80}), 8: (1, {'@': 80}), 46: (1, {'@': 80})}, 119: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 14: (0, 159), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 43: (0, 31), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 42: (0, 193), 41: (0, 48)}, 120: {45: (0, 58), 1: (0, 97)}, 121: {0: (1, {'@': 81}), 1: (1, {'@': 81}), 45: (1, {'@': 81})}, 122: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 14: (0, 154), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 123: {0: (1, {'@': 82}), 1: (1, {'@': 82}), 44: (1, {'@': 82}), 45: (1, {'@': 82}), 8: (1, {'@': 82}), 46: (1, {'@': 82})}, 124: {0: (1, {'@': 83}), 1: (1, {'@': 83}), 45: (1, {'@': 83})}, 125: {23: (0, 173), 61: (0, 63), 56: (0, 66), 57: (0, 34), 58: (0, 42), 59: (0, 121), 0: (0, 32), 60: (0, 39), 8: (0, 125), 52: (0, 61), 53: (0, 100), 36: (0, 28), 40: (0, 30)}, 126: {66: (0, 166)}, 127: {42: (0, 193), 43: (0, 96)}, 128: {0: (0, 150)}, 129: {54: (0, 108), 8: (0, 183), 0: (1, {'@': 84}), 1: (1, {'@': 84}), 44: (1, {'@': 84}), 45: (1, {'@': 84}), 46: (1, {'@': 84})}, 130: {42: (0, 193), 43: (0, 69)}, 131: {42: (0, 193), 43: (0, 103)}, 132: {0: (1, {'@': 85}), 1: (1, {'@': 85}), 44: (1, {'@': 85}), 45: (1, {'@': 85}), 8: (1, {'@': 85}), 46: (1, {'@': 85})}, 133: {23: (0, 173), 60: (0, 105)}, 134: {0: (0, 76)}, 135: {0: (1, {'@': 86}), 1: (1, {'@': 86}), 44: (1, {'@': 86}), 45: (1, {'@': 86}), 8: (1, {'@': 86}), 46: (1, {'@': 86})}, 136: {8: (0, 155)}, 137: {0: (1, {'@': 87}), 1: (1, {'@': 87}), 45: (1, {'@': 87})}, 138: {1: (0, 131)}, 139: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 14: (0, 87), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 140: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 14: (0, 157), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 141: {0: (1, {'@': 88}), 1: (1, {'@': 88}), 44: (1, {'@': 88}), 45: (1, {'@': 88}), 8: (1, {'@': 88}), 46: (1, {'@': 88})}, 142: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 14: (0, 95), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 143: {0: (1, {'@': 89}), 1: (1, {'@': 89}), 44: (1, {'@': 89}), 45: (1, {'@': 89}), 8: (1, {'@': 89}), 46: (1, {'@': 89})}, 144: {1: (0, 11)}, 145: {0: (1, {'@': 90}), 1: (1, {'@': 90}), 44: (1, {'@': 90}), 45: (1, {'@': 90}), 8: (1, {'@': 90}), 46: (1, {'@': 90})}, 146: {8: (0, 191)}, 147: {0: (1, {'@': 91}), 1: (1, {'@': 91}), 44: (1, {'@': 91}), 45: (1, {'@': 91}), 8: (1, {'@': 91}), 46: (1, {'@': 91})}, 148: {1: (0, 111)}, 149: {0: (1, {'@': 92}), 1: (1, {'@': 92}), 44: (1, {'@': 92}), 45: (1, {'@': 92}), 8: (1, {'@': 92}), 46: (1, {'@': 92})}, 150: {0: (1, {'@': 93}), 1: (1, {'@': 93}), 44: (1, {'@': 93}), 45: (1, {'@': 93}), 8: (1, {'@': 93}), 46: (1, {'@': 93})}, 151: {0: (1, {'@': 94}), 1: (1, {'@': 94}), 44: (1, {'@': 94}), 45: (1, {'@': 94}), 8: (1, {'@': 94}), 46: (1, {'@': 94})}, 152: {1: (0, 171), 48: (0, 180), 0: (0, 184)}, 153: {44: (1, {'@': 95})}, 154: {0: (1, {'@': 96}), 1: (1, {'@': 96}), 44: (1, {'@': 96}), 45: (1, {'@': 96}), 8: (1, {'@': 96}), 46: (1, {'@': 96})}, 155: {52: (0, 61), 53: (0, 190)}, 156: {1: (0, 130)}, 157: {45: (1, {'@': 97}), 1: (1, {'@': 97}), 0: (1, {'@': 97})}, 158: {0: (1, {'@': 98}), 1: (1, {'@': 98}), 44: (1, {'@': 98}), 45: (1, {'@': 98}), 8: (1, {'@': 98}), 46: (1, {'@': 98})}, 159: {0: (1, {'@': 99}), 1: (1, {'@': 99}), 46: (1, {'@': 99})}, 160: {46: (0, 177), 1: (0, 179)}, 161: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 14: (0, 148), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 162: {0: (1, {'@': 100}), 1: (1, {'@': 100}), 44: (1, {'@': 100}), 45: (1, {'@': 100}), 8: (1, {'@': 100}), 46: (1, {'@': 100})}, 163: {0: (0, 178), 1: (0, 127)}, 164: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 37: (0, 23), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 38: (0, 74), 39: (0, 8), 40: (0, 30), 14: (0, 187), 41: (0, 48)}, 165: {44: (1, {'@': 101}), 8: (1, {'@': 101}), 46: (1, {'@': 101}), 1: (1, {'@': 101}), 45: (1, {'@': 101}), 0: (1, {'@': 101})}, 166: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 14: (0, 176), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 167: {0: (1, {'@': 102}), 1: (1, {'@': 102}), 44: (1, {'@': 102}), 45: (1, {'@': 102}), 8: (1, {'@': 102}), 46: (1, {'@': 102})}, 168: {0: (1, {'@': 103}), 1: (1, {'@': 103}), 44: (1, {'@': 103}), 45: (1, {'@': 103}), 8: (1, {'@': 103}), 46: (1, {'@': 103})}, 169: {42: (0, 193), 43: (0, 128)}, 170: {53: (0, 21), 52: (0, 61)}, 171: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 37: (0, 23), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 43: (0, 134), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 38: (0, 74), 39: (0, 8), 40: (0, 30), 42: (0, 193), 14: (0, 187), 41: (0, 48)}, 172: {0: (1, {'@': 104}), 1: (1, {'@': 104}), 44: (1, {'@': 104}), 45: (1, {'@': 104}), 8: (1, {'@': 104}), 46: (1, {'@': 104})}, 173: {63: (0, 116), 52: (0, 61), 53: (0, 102), 45: (0, 124)}, 174: {23: (0, 173), 56: (0, 66), 61: (0, 0), 57: (0, 34), 58: (0, 42), 59: (0, 121), 60: (0, 39), 8: (0, 125), 52: (0, 61), 53: (0, 100), 36: (0, 28), 40: (0, 30)}, 175: {8: (0, 36)}, 176: {0: (0, 188)}, 177: {0: (1, {'@': 105}), 1: (1, {'@': 105}), 44: (1, {'@': 105}), 45: (1, {'@': 105}), 8: (1, {'@': 105}), 46: (1, {'@': 105})}, 178: {0: (1, {'@': 106}), 1: (1, {'@': 106}), 44: (1, {'@': 106}), 45: (1, {'@': 106}), 8: (1, {'@': 106}), 46: (1, {'@': 106})}, 179: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 14: (0, 159), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 180: {1: (0, 119), 0: (0, 4)}, 181: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 14: (0, 92), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 182: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 14: (0, 144), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 183: {42: (0, 193), 43: (0, 194)}, 184: {0: (1, {'@': 107}), 1: (1, {'@': 107}), 44: (1, {'@': 107}), 45: (1, {'@': 107}), 8: (1, {'@': 107}), 46: (1, {'@': 107})}, 185: {0: (1, {'@': 108}), 1: (1, {'@': 108}), 44: (1, {'@': 108}), 45: (1, {'@': 108}), 8: (1, {'@': 108}), 46: (1, {'@': 108})}, 186: {0: (0, 2), 1: (0, 179)}, 187: {0: (1, {'@': 109}), 1: (1, {'@': 109}), 46: (1, {'@': 109})}, 188: {0: (1, {'@': 110}), 1: (1, {'@': 110}), 44: (1, {'@': 110}), 45: (1, {'@': 110}), 8: (1, {'@': 110}), 46: (1, {'@': 110})}, 189: {0: (0, 149)}, 190: {51: (0, 139)}, 191: {2: (0, 22), 3: (0, 47), 4: (0, 55), 5: (0, 29), 6: (0, 114), 7: (0, 90), 8: (0, 85), 9: (0, 38), 10: (0, 35), 11: (0, 151), 12: (0, 136), 13: (0, 158), 15: (0, 162), 16: (0, 146), 17: (0, 192), 18: (0, 143), 19: (0, 142), 20: (0, 147), 21: (0, 132), 22: (0, 141), 23: (0, 195), 24: (0, 172), 25: (0, 175), 26: (0, 129), 14: (0, 152), 27: (0, 135), 28: (0, 86), 29: (0, 25), 30: (0, 19), 31: (0, 80), 32: (0, 7), 33: (0, 53), 34: (0, 17), 35: (0, 16), 36: (0, 51), 37: (0, 23), 38: (0, 74), 39: (0, 8), 40: (0, 30), 41: (0, 48)}, 192: {8: (0, 91)}, 193: {66: (0, 133)}, 194: {0: (0, 165)}, 195: {52: (0, 61), 53: (0, 78)}}, 'start_states': {'start': 15}, 'end_states': {'start': 65}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}], 'ignore': ['WS'], 'g_regex_flags': 0, 'use_bytes': False, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 95}, {'@': 86}, {'@': 70}, {'@': 56}, {'@': 37}, {'@': 35}, {'@': 98}, {'@': 104}, {'@': 79}, {'@': 36}, {'@': 48}, {'@': 67}, {'@': 57}, {'@': 31}, {'@': 43}, {'@': 78}, {'@': 84}, {'@': 80}, {'@': 47}, {'@': 89}, {'@': 39}, {'@': 55}, {'@': 88}, {'@': 91}, {'@': 100}, {'@': 40}, {'@': 69}, {'@': 85}, {'@': 110}, {'@': 94}, {'@': 41}, {'@': 73}, {'@': 65}, {'@': 106}, {'@': 30}, {'@': 107}, {'@': 77}, {'@': 68}, {'@': 61}, {'@': 90}, {'@': 105}, {'@': 102}, {'@': 108}, {'@': 51}, {'@': 74}, {'@': 53}, {'@': 72}, {'@': 59}, {'@': 93}, {'@': 92}, {'@': 103}, {'@': 82}, {'@': 96}, {'@': 32}, {'@': 101}, {'@': 76}, {'@': 49}, {'@': 50}, {'@': 75}, {'@': 42}, {'@': 62}, {'@': 81}, {'@': 46}, {'@': 87}, {'@': 52}, {'@': 45}, {'@': 58}, {'@': 66}, {'@': 83}, {'@': 33}, {'@': 60}, {'@': 44}, {'@': 109}, {'@': 111}, {'@': 99}, {'@': 112}, {'@': 38}, {'@': 113}, {'@': 97}, {'@': 114}, {'@': 63}, {'@': 115}, {'@': 71}, {'@': 116}, {'@': 54}, {'@': 29}, {'@': 64}, {'@': 34}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'Lark'}
---
> {'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}], 'ignore': ['WS'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'RSQB', 1: 'LSQB', 2: 'COMMA', 3: 'RBRACE', 4: '$END', 5: 'RPAR', 6: 'INT', 7: 'key', 8: 'ESCAPED_STRING', 9: 'CNAME', 10: 'pair', 11: 'LBRACE', 12: 'json_object', 13: 'EQUAL', 14: 'PARAMETERS', 15: 'OPTION', 16: 'tuple', 17: 'numpytype_name', 18: 'type', 19: 'tuple_parameters', 20: 'TUPLE', 21: 'named_pair', 22: 'list_parameters', 23: 'option1', 24: 'BYTE', 25: 'union', 26: 'regulartype', 27: 'unknowntype', 28: 'option2', 29: 'named_pairs', 30: 'varlen_string', 31: 'UNION', 32: 'char', 33: 'VAR', 34: 'record_parameters', 35: 'STRING', 36: 'CATEGORICAL', 37: 'record', 38: 'DTYPE', 39: 'STRUCT', 40: 'categorical', 41: 'UNKNOWN', 42: 'named0', 43: 'named', 44: 'numpytype', 45: 'named_key', 46: 'CHAR', 47: 'LPAR', 48: 'TIMEDELTA64', 49: 'named_types', 50: 'byte', 51: 'listtype', 52: 'DATETIME64', 53: 'BYTES', 54: 'fixedlen_string', 55: 'QMARK', 56: 'types', 57: 'pairs', 58: '__pairs_star_1', 59: 'json', 60: 'json_array', 61: 'FALSE', 62: 'TRUE', 63: 'NULL', 64: 'SIGNED_NUMBER', 65: 'COLON', 66: '__types_star_0', 67: 'json_pair', 68: 'STAR', 69: '__json_object_star_3', 70: '__json_array_star_2', 71: 'start', 72: 'TYPE'}, 'states': {0: {0: (1, {'@': 57}), 1: (1, {'@': 57}), 2: (1, {'@': 57}), 3: (1, {'@': 57}), 4: (1, {'@': 57}), 5: (1, {'@': 57})}, 1: {0: (1, {'@': 106}), 2: (1, {'@': 106}), 3: (1, {'@': 106}), 4: (1, {'@': 106}), 5: (1, {'@': 106})}, 2: {0: (0, 165)}, 3: {1: (0, 160)}, 4: {6: (0, 72)}, 5: {7: (0, 52), 8: (0, 46), 9: (0, 47), 10: (0, 42)}, 6: {0: (0, 91)}, 7: {11: (0, 189), 12: (0, 63)}, 8: {11: (0, 189), 12: (0, 59)}, 9: {0: (1, {'@': 119}), 2: (1, {'@': 119}), 3: (1, {'@': 119})}, 10: {11: (0, 189), 12: (0, 65)}, 11: {3: (0, 9), 2: (0, 89)}, 12: {0: (1, {'@': 44}), 2: (1, {'@': 44}), 3: (1, {'@': 44}), 4: (1, {'@': 44}), 5: (1, {'@': 44})}, 13: {13: (0, 138)}, 14: {1: (0, 69), 0: (1, {'@': 61}), 2: (1, {'@': 61}), 3: (1, {'@': 61}), 4: (1, {'@': 61}), 5: (1, {'@': 61})}, 15: {13: (0, 119)}, 16: {1: (0, 164), 14: (0, 182), 15: (0, 140), 16: (0, 147), 17: (0, 197), 18: (0, 177), 19: (0, 174), 20: (0, 3), 21: (0, 201), 0: (0, 114), 22: (0, 22), 23: (0, 12), 9: (0, 123), 24: (0, 145), 25: (0, 116), 26: (0, 96), 27: (0, 200), 28: (0, 137), 29: (0, 112), 30: (0, 153), 31: (0, 120), 32: (0, 146), 11: (0, 32), 33: (0, 64), 34: (0, 186), 35: (0, 51), 36: (0, 143), 37: (0, 166), 38: (0, 0), 39: (0, 45), 40: (0, 40), 6: (0, 75), 41: (0, 14), 42: (0, 55), 43: (0, 128), 44: (0, 131), 45: (0, 98), 46: (0, 107), 47: (0, 181), 48: (0, 159), 49: (0, 104), 50: (0, 133), 51: (0, 198), 8: (0, 126), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191)}, 17: {21: (0, 201), 14: (0, 15), 8: (0, 126), 45: (0, 98), 29: (0, 31), 9: (0, 93)}, 18: {3: (1, {'@': 122}), 2: (1, {'@': 122})}, 19: {1: (0, 164), 15: (0, 140), 36: (0, 143), 18: (0, 60), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 56: (0, 155), 33: (0, 64), 40: (0, 40), 0: (0, 130), 6: (0, 75), 9: (0, 29), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 25: (0, 116), 26: (0, 96), 44: (0, 131), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 34: (0, 186)}, 20: {0: (1, {'@': 112}), 2: (1, {'@': 112}), 3: (1, {'@': 112})}, 21: {0: (1, {'@': 90}), 2: (1, {'@': 90}), 3: (1, {'@': 90}), 4: (1, {'@': 90}), 5: (1, {'@': 90})}, 22: {0: (1, {'@': 53}), 2: (1, {'@': 53}), 3: (1, {'@': 53}), 4: (1, {'@': 53}), 5: (1, {'@': 53})}, 23: {0: (1, {'@': 74}), 2: (1, {'@': 74}), 3: (1, {'@': 74}), 4: (1, {'@': 74}), 5: (1, {'@': 74})}, 24: {14: (0, 179)}, 25: {0: (1, {'@': 109}), 2: (1, {'@': 109}), 3: (1, {'@': 109})}, 26: {0: (1, {'@': 118}), 2: (1, {'@': 118}), 3: (1, {'@': 118})}, 27: {0: (1, {'@': 111}), 2: (1, {'@': 111}), 3: (1, {'@': 111})}, 28: {0: (1, {'@': 128}), 2: (1, {'@': 128})}, 29: {1: (0, 16)}, 30: {3: (0, 170), 7: (0, 52), 57: (0, 193), 10: (0, 33), 8: (0, 46), 9: (0, 47)}, 31: {0: (1, {'@': 99})}, 32: {7: (0, 52), 10: (0, 33), 8: (0, 46), 9: (0, 47), 3: (0, 58), 57: (0, 76)}, 33: {58: (0, 157), 2: (0, 149), 3: (1, {'@': 84})}, 34: {0: (1, {'@': 96})}, 35: {59: (0, 80), 12: (0, 44), 60: (0, 199), 1: (0, 35), 11: (0, 189), 0: (0, 26), 61: (0, 20), 62: (0, 27), 8: (0, 25), 63: (0, 136), 64: (0, 127)}, 36: {0: (0, 152)}, 37: {0: (0, 122)}, 38: {0: (0, 50), 2: (0, 77)}, 39: {0: (1, {'@': 77}), 2: (1, {'@': 77}), 3: (1, {'@': 77}), 4: (1, {'@': 77}), 5: (1, {'@': 77})}, 40: {0: (1, {'@': 54}), 2: (1, {'@': 54}), 3: (1, {'@': 54}), 4: (1, {'@': 54}), 5: (1, {'@': 54})}, 41: {0: (1, {'@': 102}), 2: (1, {'@': 102})}, 42: {3: (1, {'@': 126}), 2: (1, {'@': 126})}, 43: {61: (0, 20), 11: (0, 189), 62: (0, 27), 8: (0, 25), 12: (0, 44), 1: (0, 35), 60: (0, 199), 63: (0, 136), 64: (0, 127), 59: (0, 90)}, 44: {0: (1, {'@': 115}), 2: (1, {'@': 115}), 3: (1, {'@': 115})}, 45: {1: (0, 113)}, 46: {65: (1, {'@': 86})}, 47: {65: (1, {'@': 87})}, 48: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 18: (0, 6), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 49: {0: (1, {'@': 120}), 2: (1, {'@': 120}), 3: (1, {'@': 120})}, 50: {0: (1, {'@': 116}), 2: (1, {'@': 116}), 3: (1, {'@': 116})}, 51: {1: (0, 129), 0: (1, {'@': 64}), 2: (1, {'@': 64}), 3: (1, {'@': 64}), 4: (1, {'@': 64}), 5: (1, {'@': 64})}, 52: {65: (0, 74)}, 53: {13: (0, 121)}, 54: {0: (0, 97)}, 55: {0: (1, {'@': 50}), 2: (1, {'@': 50}), 3: (1, {'@': 50}), 4: (1, {'@': 50}), 5: (1, {'@': 50})}, 56: {11: (0, 189), 12: (0, 139)}, 57: {0: (0, 190), 2: (0, 168)}, 58: {0: (1, {'@': 82}), 2: (1, {'@': 82}), 3: (1, {'@': 82}), 4: (1, {'@': 82}), 5: (1, {'@': 82})}, 59: {0: (0, 21)}, 60: {66: (0, 106), 2: (0, 108), 0: (1, {'@': 76}), 5: (1, {'@': 76})}, 61: {0: (1, {'@': 95}), 2: (1, {'@': 95}), 3: (1, {'@': 95}), 4: (1, {'@': 95}), 5: (1, {'@': 95})}, 62: {8: (0, 163), 67: (0, 71)}, 63: {0: (0, 135)}, 64: {68: (0, 148)}, 65: {0: (0, 82)}, 66: {0: (1, {'@': 100})}, 67: {0: (1, {'@': 88}), 2: (1, {'@': 88}), 3: (1, {'@': 88}), 4: (1, {'@': 88}), 5: (1, {'@': 88})}, 68: {0: (0, 1), 1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 18: (0, 177), 19: (0, 174), 20: (0, 3), 39: (0, 45), 49: (0, 54), 40: (0, 40), 6: (0, 75), 9: (0, 29), 38: (0, 0), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 69: {14: (0, 87)}, 70: {0: (1, {'@': 72}), 2: (1, {'@': 72}), 3: (1, {'@': 72}), 4: (1, {'@': 72}), 5: (1, {'@': 72})}, 71: {3: (1, {'@': 129}), 2: (1, {'@': 129})}, 72: {0: (0, 103)}, 73: {0: (1, {'@': 97})}, 74: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 18: (0, 102), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 75: {68: (0, 175)}, 76: {3: (0, 132)}, 77: {61: (0, 20), 11: (0, 189), 62: (0, 27), 8: (0, 25), 59: (0, 28), 12: (0, 44), 1: (0, 35), 60: (0, 199), 63: (0, 136), 64: (0, 127)}, 78: {0: (1, {'@': 117}), 2: (1, {'@': 117}), 3: (1, {'@': 117})}, 79: {69: (0, 11), 3: (0, 49), 2: (0, 62)}, 80: {70: (0, 38), 0: (0, 78), 2: (0, 43)}, 81: {0: (1, {'@': 55}), 2: (1, {'@': 55}), 3: (1, {'@': 55}), 4: (1, {'@': 55}), 5: (1, {'@': 55})}, 82: {0: (1, {'@': 71}), 2: (1, {'@': 71}), 3: (1, {'@': 71}), 4: (1, {'@': 71}), 5: (1, {'@': 71})}, 83: {0: (0, 67)}, 84: {0: (0, 70), 2: (0, 24)}, 85: {0: (0, 171)}, 86: {0: (0, 39)}, 87: {13: (0, 173)}, 88: {0: (1, {'@': 91}), 2: (1, {'@': 91}), 3: (1, {'@': 91}), 4: (1, {'@': 91}), 5: (1, {'@': 91})}, 89: {8: (0, 163), 67: (0, 162)}, 90: {0: (1, {'@': 127}), 2: (1, {'@': 127})}, 91: {0: (1, {'@': 108}), 2: (1, {'@': 108}), 3: (1, {'@': 108}), 4: (1, {'@': 108}), 5: (1, {'@': 108})}, 92: {13: (0, 183)}, 93: {65: (1, {'@': 104})}, 94: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 18: (0, 177), 19: (0, 174), 20: (0, 3), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 38: (0, 0), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 49: (0, 34), 48: (0, 159), 50: (0, 133), 14: (0, 53), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 95: {14: (0, 184)}, 96: {0: (1, {'@': 38}), 2: (1, {'@': 38}), 3: (1, {'@': 38}), 4: (1, {'@': 38}), 5: (1, {'@': 38})}, 97: {0: (1, {'@': 105}), 2: (1, {'@': 105}), 3: (1, {'@': 105}), 4: (1, {'@': 105}), 5: (1, {'@': 105})}, 98: {65: (0, 150)}, 99: {0: (1, {'@': 121}), 2: (1, {'@': 121}), 3: (1, {'@': 121})}, 100: {71: (0, 169), 1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 33: (0, 64), 6: (0, 75), 9: (0, 29), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 18: (0, 101), 31: (0, 120), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 34: (0, 186)}, 101: {4: (1, {'@': 35})}, 102: {3: (1, {'@': 85}), 2: (1, {'@': 85})}, 103: {0: (1, {'@': 67}), 2: (1, {'@': 67}), 3: (1, {'@': 67}), 4: (1, {'@': 67}), 5: (1, {'@': 67})}, 104: {0: (0, 178)}, 105: {14: (0, 194)}, 106: {2: (0, 115), 0: (1, {'@': 75}), 5: (1, {'@': 75})}, 107: {0: (1, {'@': 68}), 2: (1, {'@': 68}), 3: (1, {'@': 68}), 4: (1, {'@': 68}), 5: (1, {'@': 68})}, 108: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 18: (0, 187), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 109: {3: (1, {'@': 125}), 2: (1, {'@': 125})}, 110: {2: (0, 172)}, 111: {5: (0, 117)}, 112: {0: (0, 61)}, 113: {11: (0, 30)}, 114: {0: (1, {'@': 93}), 2: (1, {'@': 93}), 3: (1, {'@': 93}), 4: (1, {'@': 93}), 5: (1, {'@': 93})}, 115: {1: (0, 164), 15: (0, 140), 36: (0, 143), 18: (0, 134), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 116: {0: (1, {'@': 52}), 2: (1, {'@': 52}), 3: (1, {'@': 52}), 4: (1, {'@': 52}), 5: (1, {'@': 52})}, 117: {0: (1, {'@': 73}), 2: (1, {'@': 73}), 3: (1, {'@': 73}), 4: (1, {'@': 73}), 5: (1, {'@': 73})}, 118: {2: (0, 158), 0: (0, 142)}, 119: {12: (0, 66), 11: (0, 189)}, 120: {1: (0, 68)}, 121: {11: (0, 189), 12: (0, 73)}, 122: {0: (1, {'@': 107}), 2: (1, {'@': 107}), 3: (1, {'@': 107}), 4: (1, {'@': 107}), 5: (1, {'@': 107})}, 123: {1: (0, 16), 65: (1, {'@': 104})}, 124: {13: (0, 156)}, 125: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 33: (0, 64), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 25: (0, 116), 26: (0, 96), 44: (0, 131), 18: (0, 84), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 34: (0, 186)}, 126: {65: (1, {'@': 103})}, 127: {0: (1, {'@': 110}), 2: (1, {'@': 110}), 3: (1, {'@': 110})}, 128: {0: (1, {'@': 51}), 2: (1, {'@': 51}), 3: (1, {'@': 51}), 4: (1, {'@': 51}), 5: (1, {'@': 51})}, 129: {6: (0, 85)}, 130: {0: (0, 196), 2: (0, 105)}, 131: {0: (1, {'@': 36}), 2: (1, {'@': 36}), 3: (1, {'@': 36}), 4: (1, {'@': 36}), 5: (1, {'@': 36})}, 132: {0: (1, {'@': 81}), 2: (1, {'@': 81}), 3: (1, {'@': 81}), 4: (1, {'@': 81}), 5: (1, {'@': 81})}, 133: {0: (1, {'@': 43}), 2: (1, {'@': 43}), 3: (1, {'@': 43}), 4: (1, {'@': 43}), 5: (1, {'@': 43})}, 134: {0: (1, {'@': 124}), 5: (1, {'@': 124}), 2: (1, {'@': 124})}, 135: {0: (1, {'@': 79}), 2: (1, {'@': 79}), 3: (1, {'@': 79}), 4: (1, {'@': 79}), 5: (1, {'@': 79})}, 136: {0: (1, {'@': 113}), 2: (1, {'@': 113}), 3: (1, {'@': 113})}, 137: {0: (1, {'@': 45}), 2: (1, {'@': 45}), 3: (1, {'@': 45}), 4: (1, {'@': 45}), 5: (1, {'@': 45})}, 138: {11: (0, 189), 12: (0, 83)}, 139: {0: (0, 81)}, 140: {1: (0, 125)}, 141: {0: (1, {'@': 58}), 1: (1, {'@': 58}), 2: (1, {'@': 58}), 3: (1, {'@': 58}), 4: (1, {'@': 58}), 5: (1, {'@': 58})}, 142: {0: (1, {'@': 78}), 2: (1, {'@': 78}), 3: (1, {'@': 78}), 4: (1, {'@': 78}), 5: (1, {'@': 78})}, 143: {1: (0, 192)}, 144: {13: (0, 56)}, 145: {0: (1, {'@': 69}), 2: (1, {'@': 69}), 3: (1, {'@': 69}), 4: (1, {'@': 69}), 5: (1, {'@': 69})}, 146: {0: (1, {'@': 42}), 2: (1, {'@': 42}), 3: (1, {'@': 42}), 4: (1, {'@': 42}), 5: (1, {'@': 42})}, 147: {0: (1, {'@': 46}), 2: (1, {'@': 46}), 3: (1, {'@': 46}), 4: (1, {'@': 46}), 5: (1, {'@': 46})}, 148: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 18: (0, 161), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 149: {10: (0, 109), 8: (0, 46), 7: (0, 52), 9: (0, 47)}, 150: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 18: (0, 41), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 151: {13: (0, 48)}, 152: {0: (1, {'@': 92}), 2: (1, {'@': 92}), 3: (1, {'@': 92}), 4: (1, {'@': 92}), 5: (1, {'@': 92})}, 153: {0: (1, {'@': 40}), 2: (1, {'@': 40}), 3: (1, {'@': 40}), 4: (1, {'@': 40}), 5: (1, {'@': 40})}, 154: {11: (0, 189), 12: (0, 36)}, 155: {0: (0, 118)}, 156: {11: (0, 189), 12: (0, 86)}, 157: {2: (0, 5), 3: (1, {'@': 83})}, 158: {14: (0, 124)}, 159: {0: (1, {'@': 59}), 1: (1, {'@': 59}), 2: (1, {'@': 59}), 3: (1, {'@': 59}), 4: (1, {'@': 59}), 5: (1, {'@': 59})}, 160: {1: (0, 19)}, 161: {0: (1, {'@': 63}), 2: (1, {'@': 63}), 3: (1, {'@': 63}), 4: (1, {'@': 63}), 5: (1, {'@': 63})}, 162: {3: (1, {'@': 130}), 2: (1, {'@': 130})}, 163: {65: (0, 176)}, 164: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 18: (0, 110), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 165: {0: (1, {'@': 60}), 2: (1, {'@': 60}), 3: (1, {'@': 60}), 4: (1, {'@': 60}), 5: (1, {'@': 60})}, 166: {0: (1, {'@': 48}), 2: (1, {'@': 48}), 3: (1, {'@': 48}), 4: (1, {'@': 48}), 5: (1, {'@': 48})}, 167: {0: (1, {'@': 41}), 2: (1, {'@': 41}), 3: (1, {'@': 41}), 4: (1, {'@': 41}), 5: (1, {'@': 41})}, 168: {14: (0, 13)}, 169: {}, 170: {2: (0, 95), 0: (0, 88)}, 171: {0: (1, {'@': 66}), 2: (1, {'@': 66}), 3: (1, {'@': 66}), 4: (1, {'@': 66}), 5: (1, {'@': 66})}, 172: {14: (0, 92)}, 173: {12: (0, 2), 11: (0, 189)}, 174: {0: (1, {'@': 47}), 2: (1, {'@': 47}), 3: (1, {'@': 47}), 4: (1, {'@': 47}), 5: (1, {'@': 47})}, 175: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 18: (0, 185), 50: (0, 133), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 176: {59: (0, 18), 61: (0, 20), 11: (0, 189), 62: (0, 27), 8: (0, 25), 12: (0, 44), 1: (0, 35), 60: (0, 199), 63: (0, 136), 64: (0, 127)}, 177: {2: (0, 94), 0: (1, {'@': 98})}, 178: {0: (1, {'@': 94}), 2: (1, {'@': 94}), 3: (1, {'@': 94}), 4: (1, {'@': 94}), 5: (1, {'@': 94})}, 179: {13: (0, 10)}, 180: {1: (0, 4), 0: (1, {'@': 65}), 2: (1, {'@': 65}), 3: (1, {'@': 65}), 4: (1, {'@': 65}), 5: (1, {'@': 65})}, 181: {1: (0, 164), 15: (0, 140), 36: (0, 143), 18: (0, 60), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 5: (0, 23), 38: (0, 0), 39: (0, 45), 40: (0, 40), 6: (0, 75), 9: (0, 29), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 56: (0, 111), 51: (0, 198), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 182: {13: (0, 154)}, 183: {11: (0, 189), 12: (0, 37)}, 184: {13: (0, 8)}, 185: {0: (1, {'@': 62}), 2: (1, {'@': 62}), 3: (1, {'@': 62}), 4: (1, {'@': 62}), 5: (1, {'@': 62})}, 186: {0: (1, {'@': 49}), 2: (1, {'@': 49}), 3: (1, {'@': 49}), 4: (1, {'@': 49}), 5: (1, {'@': 49})}, 187: {0: (1, {'@': 123}), 5: (1, {'@': 123}), 2: (1, {'@': 123})}, 188: {0: (1, {'@': 70}), 2: (1, {'@': 70}), 3: (1, {'@': 70}), 4: (1, {'@': 70}), 5: (1, {'@': 70})}, 189: {67: (0, 79), 3: (0, 99), 8: (0, 163)}, 190: {0: (1, {'@': 89}), 2: (1, {'@': 89}), 3: (1, {'@': 89}), 4: (1, {'@': 89}), 5: (1, {'@': 89})}, 191: {1: (0, 164), 15: (0, 140), 36: (0, 143), 16: (0, 147), 17: (0, 197), 37: (0, 166), 19: (0, 174), 20: (0, 3), 38: (0, 0), 39: (0, 45), 40: (0, 40), 9: (0, 29), 6: (0, 75), 35: (0, 51), 22: (0, 22), 23: (0, 12), 41: (0, 14), 11: (0, 32), 42: (0, 55), 24: (0, 145), 43: (0, 128), 44: (0, 131), 26: (0, 96), 25: (0, 116), 46: (0, 107), 27: (0, 200), 47: (0, 181), 48: (0, 159), 50: (0, 133), 51: (0, 198), 18: (0, 188), 28: (0, 137), 30: (0, 153), 31: (0, 120), 34: (0, 186), 32: (0, 146), 52: (0, 141), 53: (0, 180), 54: (0, 167), 55: (0, 191), 33: (0, 64)}, 192: {72: (0, 151)}, 193: {3: (0, 57)}, 194: {13: (0, 7)}, 195: {14: (0, 144)}, 196: {0: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 4: (1, {'@': 80}), 5: (1, {'@': 80})}, 197: {1: (0, 195), 0: (1, {'@': 56}), 2: (1, {'@': 56}), 3: (1, {'@': 56}), 4: (1, {'@': 56}), 5: (1, {'@': 56})}, 198: {0: (1, {'@': 39}), 2: (1, {'@': 39}), 3: (1, {'@': 39}), 4: (1, {'@': 39}), 5: (1, {'@': 39})}, 199: {0: (1, {'@': 114}), 2: (1, {'@': 114}), 3: (1, {'@': 114})}, 200: {0: (1, {'@': 37}), 2: (1, {'@': 37}), 3: (1, {'@': 37}), 4: (1, {'@': 37}), 5: (1, {'@': 37})}, 201: {2: (0, 17), 0: (1, {'@': 101})}}, 'start_states': {'start': 100}, 'end_states': {'start': 169}}, 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'Lark'}
2562c2911
< {0: {'name': 'HARDCODED', 'pattern': {'value': '(?:(?:(?:string|char)|bytes)|byte)', 'flags': [], '_width': [4, 6], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'TYPE', 'pattern': {'value': '(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:int8|int16)|int32)|int64)|int128)|uint8)|uint16)|uint32)|uint64)|uint128)|float32)|float64)|bool)', 'flags': [], '_width': [4, 7], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'UNQUOTED_STRING', 'pattern': {'value': '[a-zA-Z]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': -1, '__type__': 'TerminalDef'}, 3: {'name': 'SIGNED_NUMBER', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+\\.(?:(?:[0-9])+)?|\\.(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)|(?:[0-9])+)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'UNKNOWN', 'pattern': {'value': 'unknown', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'CATEGORICAL', 'pattern': {'value': 'categorical', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': '__ANON_0', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'OPTION', 'pattern': {'value': 'option', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'UNION', 'pattern': {'value': 'union', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'VAR', 'pattern': {'value': 'var', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'TUPLE', 'pattern': {'value': 'tuple', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'PARAMETERS', 'pattern': {'value': 'parameters', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'NULL', 'pattern': {'value': 'null', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_1', 'pattern': {'value': '((?:"(?:[^"\n\r\\\\]|(?:\\\\u[0-9a-fA-F]{4})|(?:\\\\["bfnrt]))*")|(?:\\\\\\\'(?:[^\\\\\\\'\n\r\\\\]|(?:\\\\u[0-9a-fA-F]{4})|(?:\\\\[\\\'bfnrt]))*")*\\\\\\\')', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'origin': {'name': '__list_obj_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__list_obj_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 30: {'origin': {'name': 'union_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 31: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_struct', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 32: {'origin': {'name': 'regular_outparm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'number', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 33: {'origin': {'name': 'pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 34: {'origin': {'name': '__dict_obj_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dict_obj_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 35: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'regular', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 36: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'categories', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 37: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'optiontype', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 38: {'origin': {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 39: {'origin': {'name': 'optiontype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'option_parm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 40: {'origin': {'name': 'listtype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_parm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 41: {'origin': {'name': 'option_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'options', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 42: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 43: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_highlevel', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 44: {'origin': {'name': 'number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': 'list_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NULL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'null', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': 'unknown', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNKNOWN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_tuple', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dict_obj', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_obj', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': 'record_tuple_param', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': 'list_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': 'record_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': '__list_obj_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': 'optiontype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'option_highlevel', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'primitive', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_dict', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'dict_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}, {'name': '__dict_obj_star_4', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'record_struct', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'list_parm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': '__dict_obj_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'option_parm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPTION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': 'dict_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_tuple_param', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'union_parm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'uniontype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'union_single', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unknown', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'record_struct', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'option_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'record_dict', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'def_option', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dict_obj', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'union_parm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'primitive', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TYPE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'options', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'predefined_typestr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'unknown', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNKNOWN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'options', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'record_highlevel', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNQUOTED_STRING', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'dict_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'primitive', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TYPE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'uniontype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'union_parm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'list_obj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}, {'name': '__list_obj_star_3', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'regular', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'regular_inparm', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'optiontype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'option_single', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'list_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'regular', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'regular_outparm', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'record_struct', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'record_struct', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'predefined_typestr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HARDCODED', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'regular_inparm', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'listtype', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'listtype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_single', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'options', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'record_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'record_highlevel', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNQUOTED_STRING', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'input', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'uniontype', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'record_tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'option_highlevel', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPTION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'union_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'record_tuple_param', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'def_option', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'categories', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATEGORICAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'input', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': '__union_single_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__union_single_star_0', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': '__record_dict_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__record_dict_star_1', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': '__record_struct_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__record_struct_star_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
---
> {0: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'SIGNED_NUMBER', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+\\.(?:(?:[0-9])+)?|\\.(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)|(?:[0-9])+)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'CNAME', 'pattern': {'value': '(?:(?:[A-Z]|[a-z])|_)(?:(?:(?:[A-Z]|[a-z])|[0-9]|_))*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'DTYPE', 'pattern': {'value': '(?:complex128|complex64|float32|float64|uint16|uint32|uint64|uint8|int16|int32|int64|bool|int8)', 'flags': [], '_width': [4, 10], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 6: {'name': 'DATETIME64', 'pattern': {'value': 'datetime64(\\[(\\s*-?[0-9]*)?(Y|M|W|D|h|m|s|ms|us|μ|ns|ps|fs|as)\\])?', 'flags': [], '_width': [10, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'TIMEDELTA64', 'pattern': {'value': 'timedelta64(\\[(\\s*-?[0-9]*)?(Y|M|W|D|h|m|s|ms|us|μ|ns|ps|fs|as)\\])?', 'flags': [], '_width': [11, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'PARAMETERS', 'pattern': {'value': 'parameters', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'UNKNOWN', 'pattern': {'value': 'unknown', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'VAR', 'pattern': {'value': 'var', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'STRING', 'pattern': {'value': 'string', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'BYTES', 'pattern': {'value': 'bytes', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'CHAR', 'pattern': {'value': 'char', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'BYTE', 'pattern': {'value': 'byte', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'OPTION', 'pattern': {'value': 'option', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'TUPLE', 'pattern': {'value': 'tuple', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'UNION', 'pattern': {'value': 'union', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'CATEGORICAL', 'pattern': {'value': 'categorical', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'TYPE', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'NULL', 'pattern': {'value': 'null', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 36: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'numpytype', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 37: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unknowntype', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 38: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'regulartype', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 39: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'listtype', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 40: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'varlen_string', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 41: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fixedlen_string', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 42: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'char', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 43: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'byte', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 44: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'option1', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'option2', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tuple', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tuple_parameters', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'record_parameters', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named0', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'union', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list_parameters', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': 'type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'categorical', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': 'numpytype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'numpytype_name', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'numpytype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'numpytype_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'numpytype_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DTYPE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'numpytype_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DATETIME64', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'numpytype_name', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TIMEDELTA64', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'unknowntype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNKNOWN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'unknowntype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNKNOWN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'regulartype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': 'listtype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': 'varlen_string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'varlen_string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'varlen_string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BYTES', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'varlen_bytestring', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': 'fixedlen_string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'fixedlen_string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'fixedlen_string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BYTES', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'fixedlen_bytestring', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CHAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'byte', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BYTE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'option1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'option2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPTION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'option2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPTION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'types', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'types', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}, {'name': '__types_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'types', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'tuple_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'types', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'tuple_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'types', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'tuple_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'tuple_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TUPLE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pairs', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'record', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'pairs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pair', '__type__': 'NonTerminal'}, {'name': '__pairs_star_1', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'pairs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'key', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'key', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'identifier', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'record_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pairs', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'record_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pairs', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'record_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'record_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'named0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'named0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'named', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'named_types', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'named', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'named_pairs', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'named_types', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'named_types', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'named_types', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'named_types', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'named_pairs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named_pair', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'named_pairs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'named_pairs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named_pair', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'named_pairs', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named_pair', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'named_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'named_key', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'named_key', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'named_key', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CNAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'identifier', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'union', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'named_types', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'union', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'list_parameters', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMETERS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_object', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'categorical', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CATEGORICAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIGNED_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'number', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NULL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'null', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'json_array', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'json', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'json_object', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'json_array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}, {'name': '__json_array_star_2', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'json_array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'json_array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'json_object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_pair', '__type__': 'NonTerminal'}, {'name': '__json_object_star_3', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'json_object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_pair', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'json_object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'json_pair', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': '__types_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': '__types_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__types_star_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': '__pairs_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': '__pairs_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__pairs_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': '__json_array_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': '__json_array_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__json_array_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '__json_object_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': '__json_object_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__json_object_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'json_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
