- name: awkward_UnionArray_validity
  specializations:
    - name: awkward_UnionArray8_U32_validity
      args:
        - name: tags
          type: Const[List[int8_t]]
          direction: in
          role: UnionArray-tags
        - name: index
          type: Const[List[uint32_t]]
          direction: in
          role: IndexedArray-index
        - name: length
          type: int64_t
          direction: in
          role: default
        - name: numcontents
          type: int64_t
          direction: in
          role: UnionArray-length
        - name: lencontents
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
    - name: awkward_UnionArray8_32_validity
      args:
        - name: tags
          type: Const[List[int8_t]]
          direction: in
          role: UnionArray-tags
        - name: index
          type: Const[List[int32_t]]
          direction: in
          role: IndexedArray-index
        - name: length
          type: int64_t
          direction: in
          role: default
        - name: numcontents
          type: int64_t
          direction: in
          role: UnionArray-length
        - name: lencontents
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
    - name: awkward_UnionArray8_64_validity
      args:
        - name: tags
          type: Const[List[int8_t]]
          direction: in
          role: UnionArray-tags
        - name: index
          type: Const[List[int64_t]]
          direction: in
          role: IndexedArray-index
        - name: length
          type: int64_t
          direction: in
          role: default
        - name: numcontents
          type: int64_t
          direction: in
          role: UnionArray-length
        - name: lencontents
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
  definition: |
    def awkward_UnionArray_validity(tags , index , length , numcontents , lencontents ):
        for i in range(length):
            tag = tags[i]
            idx = index[i]
            if tag < 0:
                raise ValueError("tags[i] < 0")
            if idx < 0:
                raise ValueError("index[i] < 0")
            if tag >= numcontents:
                raise ValueError("tags[i] >= len(contents)")
            lencontent = lencontents[tag]
            if idx >= lencontent:
                raise ValueError("index[i] >= len(content[tags[i]])")
  description: null