- name: awkward_IndexedArray_flatten_none2empty
  specializations:
    - name: awkward_IndexedArrayU32_flatten_none2empty_64
      args:
        - name: outoffsets
          type: List[int64_t]
          direction: out
        - name: outindex
          type: Const[List[uint32_t]]
          direction: in
          role: IndexedArray-index
        - name: outindexlength
          type: int64_t
          direction: in
          role: default
        - name: offsets
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
        - name: offsetslength
          type: int64_t
          direction: in
          role: default
    - name: awkward_IndexedArray64_flatten_none2empty_64
      args:
        - name: outoffsets
          type: List[int64_t]
          direction: out
        - name: outindex
          type: Const[List[int64_t]]
          direction: in
          role: IndexedArray-index
        - name: outindexlength
          type: int64_t
          direction: in
          role: default
        - name: offsets
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
        - name: offsetslength
          type: int64_t
          direction: in
          role: default
    - name: awkward_IndexedArray32_flatten_none2empty_64
      args:
        - name: outoffsets
          type: List[int64_t]
          direction: out
        - name: outindex
          type: Const[List[int32_t]]
          direction: in
          role: IndexedArray-index
        - name: outindexlength
          type: int64_t
          direction: in
          role: default
        - name: offsets
          type: Const[List[int64_t]]
          direction: in
          role: ListOffsetArray-offsets
        - name: offsetslength
          type: int64_t
          direction: in
          role: default
  definition: |
    def awkward_IndexedArray_flatten_none2empty(outoffsets , outindex , outindexlength , offsets , offsetslength ):
        outoffsets[0] = offsets[0]
        k = 1
        for i in range(outindexlength):
            idx = outindex[i]
            if idx < 0:
                outoffsets[k] = outoffsets[k - 1]
                k = k + 1
            else:
                if (idx + 1) >= offsetslength:
                    raise ValueError("flattening offset out of range")
                else:
                    count = offsets[idx + 1] - offsets[idx]
                    outoffsets[k] = outoffsets[k - 1] + count
                    k = k + 1
  description: null