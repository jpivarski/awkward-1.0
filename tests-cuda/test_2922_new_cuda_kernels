# BSD 3-Clause License; see https://github.com/scikit-hep/awkward/blob/main/LICENSE

from __future__ import annotations

import cupy as cp  # noqa: F401
import numpy as np
import pytest

import awkward as ak

try:
    ak.numba.register_and_check()
except ImportError:
    pytest.skip(reason="too old Numba version", allow_module_level=True)

def test_indexedarray_merged_kernel():
    x = ak.contents.IndexedArray(
        ak.index.Index64(np.array([0, 0, 1], dtype=np.int64)),
        ak.contents.NumpyArray(np.array([9, 6, 5], dtype=np.int16)),
        parameters={"money": "doesn't buy happiness"},
    )
    y = ak.contents.IndexedArray(
        ak.index.Index64(np.array([0, 1, 2, 4, 3], dtype=np.int64)),
        ak.contents.NumpyArray(np.array([9, 6, 5, 8, 2], dtype=np.int16)),
        parameters={"age": "number"},
    )

    # Test that we invoke the merge pathway
    z = x._reverse_merge(y)
    cuda_z = ak.to_backend(z, "cuda")
    assert ak.to_list(cuda_z) == ak.to_list(z)

# def test_unionarray_simplify():
#     one = ak.operations.from_iter([5, 4, 3, 2, 1], highlevel=False)
#     two = ak.operations.from_iter([[], [1], [2, 2], [3, 3, 3]], highlevel=False)
#     three = ak.operations.from_iter([1.1, 2.2, 3.3], highlevel=False)

#     tags2 = ak.index.Index8(np.array([0, 1, 0, 1, 0, 0, 1], dtype=np.int8))
#     index2 = ak.index.Index32(np.array([0, 0, 1, 1, 2, 3, 2], dtype=np.int32))
#     inner = ak.contents.UnionArray(tags2, index2, [two, three])
#     tags1 = ak.index.Index8(
#         np.array([0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], dtype=np.int8)
#     )
#     index1 = ak.index.Index64(
#         np.array([0, 1, 0, 1, 2, 2, 3, 4, 5, 3, 6, 4], dtype=np.int64)
#     )
#     outer = ak.contents.UnionArray.simplified(tags1, index1, [one, inner])
#     cuda_outer = ak.to_backend(outer, "cuda")
#     assert ak.operations.to_list(cuda_outer) == ak.operations.to_list(outer)
