name: Deploy

on:
  workflow_dispatch:
    inputs:
        publish-pypi:
            type: boolean
            description: Publish to PyPI
  release:
    types:
    - published


jobs:
  check-requirements:
    name: "Check awkward requirements"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Check awkward-cpp version matches requirement
        run: pipx run nox -s check_cpp_constraint

  check-cpp-on-pypi:
    name: "Check awkward-cpp dependency on PyPI"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Compute SOURCE_DATE_EPOCH
        shell: python
        run: |
          import os, subprocess
          result = subprocess.run(
            ["git", "log", "-1", '--format=%at', '--', 'pyproject.toml'],
            cwd="awkward-cpp", capture_output=True, text=True, check=True
          )
          with open(os.environ["GITHUB_ENV"], "a") as env_file:
            env_file.write(f"SOURCE_DATE_EPOCH={result.stdout.strip()}")

      - name: Prepare build files
        run: pipx run nox -s prepare

      - name: Build awkward-cpp sdist
        run: pipx run build --sdist awkward-cpp

      - name: Check sdist matches PyPI
        run: pipx run nox -s check_cpp_sdist_released -- awkward-cpp/dist/awkward-cpp*.tar.gz

  build:
    name: "Build wheel & sdist"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Compute SOURCE_DATE_EPOCH
      run: |
        # Set SOURCE_DATE_EPOCH to datetime of last change to pyproject.toml
        SOURCE_DATE_EPOCH="$(git log -1 --format="%ad" --date=unix -- pyproject.toml)"
        echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

    - name: Prepare build files
      run: pipx run nox -s prepare

    - name: Build distributions
      run: pipx run build --sdist --wheel

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*

  bundle-headers:
    name: "Bundle header-only libraries"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Create archive
      run: tar -czvf header-only.tar.gz header-only

    - uses: actions/upload-artifact@v3
      with:
        path: header-only.tar.gz

  upload:
    needs: [build, check-requirements, check-cpp-on-pypi]
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published') || inputs.publish-pypi
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.5.1
      with:
        password: ${{ secrets.PYPI_PASSWORD }}
